
DA7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  000014e4  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080016c  0080016c  000015e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd0  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ed  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e0  00000000  00000000  00002a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00002f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001228  00000000  00000000  0000374e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004976  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_13>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e4 ee       	ldi	r30, 0xE4	; 228
      aa:	f4 e1       	ldi	r31, 0x14	; 20
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	ac 36       	cpi	r26, 0x6C	; 108
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	ac e6       	ldi	r26, 0x6C	; 108
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a0 37       	cpi	r26, 0x70	; 112
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 c1 02 	call	0x582	; 0x582 <main>
      cc:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
      d4:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
      d8:	88 e4       	ldi	r24, 0x48	; 72
      da:	80 93 b8 00 	sts	0x00B8, r24
      de:	08 95       	ret

000000e0 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
      e0:	94 ea       	ldi	r25, 0xA4	; 164
      e2:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
      e6:	ec eb       	ldi	r30, 0xBC	; 188
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	90 81       	ld	r25, Z
      ec:	99 23       	and	r25, r25
      ee:	ec f7       	brge	.-6      	; 0xea <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
      f0:	90 91 b9 00 	lds	r25, 0x00B9
      f4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
      f6:	98 30       	cpi	r25, 0x08	; 8
      f8:	11 f0       	breq	.+4      	; 0xfe <i2c_start+0x1e>
      fa:	90 31       	cpi	r25, 0x10	; 16
      fc:	a1 f4       	brne	.+40     	; 0x126 <i2c_start+0x46>

	// send device address
	TWDR = address;
      fe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     102:	84 e8       	ldi	r24, 0x84	; 132
     104:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     108:	ec eb       	ldi	r30, 0xBC	; 188
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	88 23       	and	r24, r24
     110:	ec f7       	brge	.-6      	; 0x10c <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     112:	90 91 b9 00 	lds	r25, 0x00B9
     116:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     118:	98 31       	cpi	r25, 0x18	; 24
     11a:	39 f0       	breq	.+14     	; 0x12a <i2c_start+0x4a>
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	90 34       	cpi	r25, 0x40	; 64
     120:	29 f4       	brne	.+10     	; 0x12c <i2c_start+0x4c>
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     12a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     12c:	08 95       	ret

0000012e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     132:	ec eb       	ldi	r30, 0xBC	; 188
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     138:	a9 eb       	ldi	r26, 0xB9	; 185
     13a:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     13c:	cb eb       	ldi	r28, 0xBB	; 187
     13e:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     140:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     142:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     144:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     146:	90 81       	ld	r25, Z
     148:	99 23       	and	r25, r25
     14a:	ec f7       	brge	.-6      	; 0x146 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     14c:	9c 91       	ld	r25, X
     14e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     150:	98 30       	cpi	r25, 0x08	; 8
     152:	11 f0       	breq	.+4      	; 0x158 <i2c_start_wait+0x2a>
     154:	90 31       	cpi	r25, 0x10	; 16
     156:	b1 f7       	brne	.-20     	; 0x144 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
     158:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     15a:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     15c:	90 81       	ld	r25, Z
     15e:	99 23       	and	r25, r25
     160:	ec f7       	brge	.-6      	; 0x15c <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     162:	9c 91       	ld	r25, X
     164:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     166:	90 32       	cpi	r25, 0x20	; 32
     168:	11 f0       	breq	.+4      	; 0x16e <i2c_start_wait+0x40>
     16a:	98 35       	cpi	r25, 0x58	; 88
     16c:	29 f4       	brne	.+10     	; 0x178 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     16e:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     170:	90 81       	ld	r25, Z
     172:	94 fd       	sbrc	r25, 4
     174:	fd cf       	rjmp	.-6      	; 0x170 <i2c_start_wait+0x42>
     176:	e6 cf       	rjmp	.-52     	; 0x144 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     17e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_start>

}/* i2c_rep_start */
     182:	08 95       	ret

00000184 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     184:	84 e9       	ldi	r24, 0x94	; 148
     186:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     18a:	ec eb       	ldi	r30, 0xBC	; 188
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	84 fd       	sbrc	r24, 4
     192:	fd cf       	rjmp	.-6      	; 0x18e <i2c_stop+0xa>

}/* i2c_stop */
     194:	08 95       	ret

00000196 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     196:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     19a:	84 e8       	ldi	r24, 0x84	; 132
     19c:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1a0:	ec eb       	ldi	r30, 0xBC	; 188
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	88 23       	and	r24, r24
     1a8:	ec f7       	brge	.-6      	; 0x1a4 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1aa:	90 91 b9 00 	lds	r25, 0x00B9
     1ae:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	98 32       	cpi	r25, 0x28	; 40
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <i2c_write+0x22>
     1b6:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     1b8:	08 95       	ret

000001ba <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1ba:	84 e8       	ldi	r24, 0x84	; 132
     1bc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     1c0:	ec eb       	ldi	r30, 0xBC	; 188
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	88 23       	and	r24, r24
     1c8:	ec f7       	brge	.-6      	; 0x1c4 <i2c_readNak+0xa>
	
    return TWDR;
     1ca:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     1ce:	08 95       	ret

000001d0 <i2c_read_byte>:




// read one byte from dev, stored in value, return 1 for error
void i2c_read_byte(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data){
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	c8 2f       	mov	r28, r24
     1da:	d6 2f       	mov	r29, r22
     1dc:	8a 01       	movw	r16, r20

	i2c_start_wait(dev_addr+I2C_WRITE); 	//start i2c to write register address
     1de:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_start_wait>
	i2c_write(reg_addr);			//write address of register to read
     1e2:	8d 2f       	mov	r24, r29
     1e4:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_write>
	i2c_rep_start(dev_addr+I2C_READ);	//restart i2c to start reading
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	8c 0f       	add	r24, r28
     1ec:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_rep_start>
	*data = i2c_readNak();
     1f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <i2c_readNak>
     1f4:	f8 01       	movw	r30, r16
     1f6:	80 83       	st	Z, r24
        i2c_stop();
     1f8:	0e 94 c2 00 	call	0x184	; 0x184 <i2c_stop>

}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	08 95       	ret

00000206 <mpu6050_read_gyro_X>:

	
//read gyro X, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_gyro_X(uint8_t * buff){
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, buff);
     20c:	ac 01       	movw	r20, r24
     20e:	63 e4       	ldi	r22, 0x43	; 67
     210:	80 ed       	ldi	r24, 0xD0	; 208
     212:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, buff+1);
     216:	ae 01       	movw	r20, r28
     218:	4f 5f       	subi	r20, 0xFF	; 255
     21a:	5f 4f       	sbci	r21, 0xFF	; 255
     21c:	64 e4       	ldi	r22, 0x44	; 68
     21e:	80 ed       	ldi	r24, 0xD0	; 208
     220:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <mpu6050_read_gyro_Y>:

//read gyro Y, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_gyro_Y(uint8_t * buff){
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, buff);
     230:	ac 01       	movw	r20, r24
     232:	65 e4       	ldi	r22, 0x45	; 69
     234:	80 ed       	ldi	r24, 0xD0	; 208
     236:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, buff+1);
     23a:	ae 01       	movw	r20, r28
     23c:	4f 5f       	subi	r20, 0xFF	; 255
     23e:	5f 4f       	sbci	r21, 0xFF	; 255
     240:	66 e4       	ldi	r22, 0x46	; 70
     242:	80 ed       	ldi	r24, 0xD0	; 208
     244:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <mpu6050_read_gyro_Z>:

//read gyro Z, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_gyro_Z(uint8_t * buff){
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, buff);
     254:	ac 01       	movw	r20, r24
     256:	67 e4       	ldi	r22, 0x47	; 71
     258:	80 ed       	ldi	r24, 0xD0	; 208
     25a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, buff+1);
     25e:	ae 01       	movw	r20, r28
     260:	4f 5f       	subi	r20, 0xFF	; 255
     262:	5f 4f       	sbci	r21, 0xFF	; 255
     264:	68 e4       	ldi	r22, 0x48	; 72
     266:	80 ed       	ldi	r24, 0xD0	; 208
     268:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <mpu6050_read_gyro_ALL>:

// read gyro X, Y, Z all at once, high- & low-8-bits combined
// return int16_t (signed) in buff
//buff must have at least 3 available places
//no error handling for too small buff
void mpu6050_read_gyro_ALL(int16_t * buff){
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	00 d0       	rcall	.+0      	; 0x27c <mpu6050_read_gyro_ALL+0xa>
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	8c 01       	movw	r16, r24
	
	uint8_t tmp[2];

	mpu6050_read_gyro_X(tmp);
     282:	ce 01       	movw	r24, r28
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	0e 94 03 01 	call	0x206	; 0x206 <mpu6050_read_gyro_X>
	buff[0] = (tmp[0]<<8)|(tmp[1]);
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	98 2f       	mov	r25, r24
     290:	88 27       	eor	r24, r24
     292:	2a 81       	ldd	r18, Y+2	; 0x02
     294:	82 2b       	or	r24, r18
     296:	f8 01       	movw	r30, r16
     298:	91 83       	std	Z+1, r25	; 0x01
     29a:	80 83       	st	Z, r24
	mpu6050_read_gyro_Y(tmp);
     29c:	ce 01       	movw	r24, r28
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	0e 94 15 01 	call	0x22a	; 0x22a <mpu6050_read_gyro_Y>
	buff[1] = (tmp[0]<<8)|(tmp[1]);
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	98 2f       	mov	r25, r24
     2aa:	88 27       	eor	r24, r24
     2ac:	2a 81       	ldd	r18, Y+2	; 0x02
     2ae:	82 2b       	or	r24, r18
     2b0:	f8 01       	movw	r30, r16
     2b2:	93 83       	std	Z+3, r25	; 0x03
     2b4:	82 83       	std	Z+2, r24	; 0x02
	mpu6050_read_gyro_Z(tmp);
     2b6:	ce 01       	movw	r24, r28
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	0e 94 27 01 	call	0x24e	; 0x24e <mpu6050_read_gyro_Z>
	buff[2] = (tmp[0]<<8)|(tmp[1]);
     2be:	29 81       	ldd	r18, Y+1	; 0x01
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	32 2f       	mov	r19, r18
     2c4:	22 27       	eor	r18, r18
     2c6:	8a 81       	ldd	r24, Y+2	; 0x02
     2c8:	28 2b       	or	r18, r24
     2ca:	f8 01       	movw	r30, r16
     2cc:	35 83       	std	Z+5, r19	; 0x05
     2ce:	24 83       	std	Z+4, r18	; 0x04
}
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	08 95       	ret

000002de <mpu6050_read_accel_X>:


//read accel X, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_X(uint8_t * buff){
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, buff);
     2e4:	ac 01       	movw	r20, r24
     2e6:	6b e3       	ldi	r22, 0x3B	; 59
     2e8:	80 ed       	ldi	r24, 0xD0	; 208
     2ea:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, buff+1);
     2ee:	ae 01       	movw	r20, r28
     2f0:	4f 5f       	subi	r20, 0xFF	; 255
     2f2:	5f 4f       	sbci	r21, 0xFF	; 255
     2f4:	6c e3       	ldi	r22, 0x3C	; 60
     2f6:	80 ed       	ldi	r24, 0xD0	; 208
     2f8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <mpu6050_read_accel_Y>:

//read accel Y, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_Y(uint8_t * buff){
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, buff);
     308:	ac 01       	movw	r20, r24
     30a:	6d e3       	ldi	r22, 0x3D	; 61
     30c:	80 ed       	ldi	r24, 0xD0	; 208
     30e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, buff+1);
     312:	ae 01       	movw	r20, r28
     314:	4f 5f       	subi	r20, 0xFF	; 255
     316:	5f 4f       	sbci	r21, 0xFF	; 255
     318:	6e e3       	ldi	r22, 0x3E	; 62
     31a:	80 ed       	ldi	r24, 0xD0	; 208
     31c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <mpu6050_read_accel_Z>:

//read accel Z, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_Z(uint8_t * buff){
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, buff);
     32c:	ac 01       	movw	r20, r24
     32e:	6f e3       	ldi	r22, 0x3F	; 63
     330:	80 ed       	ldi	r24, 0xD0	; 208
     332:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, buff+1);
     336:	ae 01       	movw	r20, r28
     338:	4f 5f       	subi	r20, 0xFF	; 255
     33a:	5f 4f       	sbci	r21, 0xFF	; 255
     33c:	60 e4       	ldi	r22, 0x40	; 64
     33e:	80 ed       	ldi	r24, 0xD0	; 208
     340:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <mpu6050_read_accel_ALL>:

// read accel X, Y, Z all at once, high- & low-8-bits combined
// return int16_t (signed) in buff
//buff must have at least 3 available places
//no error handling for too small buff
void mpu6050_read_accel_ALL(int16_t * buff){
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	00 d0       	rcall	.+0      	; 0x354 <mpu6050_read_accel_ALL+0xa>
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	8c 01       	movw	r16, r24
	
	uint8_t tmp[2];

	mpu6050_read_accel_X(tmp);
     35a:	ce 01       	movw	r24, r28
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	0e 94 6f 01 	call	0x2de	; 0x2de <mpu6050_read_accel_X>
	buff[0] = (tmp[0]<<8)|(tmp[1]);
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	98 2f       	mov	r25, r24
     368:	88 27       	eor	r24, r24
     36a:	2a 81       	ldd	r18, Y+2	; 0x02
     36c:	82 2b       	or	r24, r18
     36e:	f8 01       	movw	r30, r16
     370:	91 83       	std	Z+1, r25	; 0x01
     372:	80 83       	st	Z, r24
	mpu6050_read_accel_Y(tmp);
     374:	ce 01       	movw	r24, r28
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	0e 94 81 01 	call	0x302	; 0x302 <mpu6050_read_accel_Y>
	buff[1] = (tmp[0]<<8)|(tmp[1]);
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	98 2f       	mov	r25, r24
     382:	88 27       	eor	r24, r24
     384:	2a 81       	ldd	r18, Y+2	; 0x02
     386:	82 2b       	or	r24, r18
     388:	f8 01       	movw	r30, r16
     38a:	93 83       	std	Z+3, r25	; 0x03
     38c:	82 83       	std	Z+2, r24	; 0x02
	mpu6050_read_accel_Z(tmp);
     38e:	ce 01       	movw	r24, r28
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	0e 94 93 01 	call	0x326	; 0x326 <mpu6050_read_accel_Z>
	buff[2] = (tmp[0]<<8)|(tmp[1]);
     396:	29 81       	ldd	r18, Y+1	; 0x01
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	32 2f       	mov	r19, r18
     39c:	22 27       	eor	r18, r18
     39e:	8a 81       	ldd	r24, Y+2	; 0x02
     3a0:	28 2b       	or	r18, r24
     3a2:	f8 01       	movw	r30, r16
     3a4:	35 83       	std	Z+5, r19	; 0x05
     3a6:	24 83       	std	Z+4, r18	; 0x04
}
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <i2c_write_byte>:



// write one byte to dev
void i2c_write_byte(uint8_t dev_addr, uint8_t reg_addr, uint8_t data){
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	d6 2f       	mov	r29, r22
     3bc:	c4 2f       	mov	r28, r20
	
	i2c_start_wait(dev_addr+I2C_WRITE);
     3be:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_start_wait>
 	i2c_write(reg_addr);                     
     3c2:	8d 2f       	mov	r24, r29
     3c4:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_write>
        i2c_write(data);
     3c8:	8c 2f       	mov	r24, r28
     3ca:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_write>
	i2c_stop();
     3ce:	0e 94 c2 00 	call	0x184	; 0x184 <i2c_stop>

}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <mpu6050_init>:

//configure important settings in mpu6050
//subject to change app(ilcation) by app
void mpu6050_init(void){
	
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 0x00); //exit sleep mode
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	6b e6       	ldi	r22, 0x6B	; 107
     3dc:	80 ed       	ldi	r24, 0xD0	; 208
     3de:	0e 94 db 01 	call	0x3b6	; 0x3b6 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_CONFIG, 0x01); // LPF, bandwidth = 184(accel) and 188(gyro)
     3e2:	41 e0       	ldi	r20, 0x01	; 1
     3e4:	6a e1       	ldi	r22, 0x1A	; 26
     3e6:	80 ed       	ldi	r24, 0xD0	; 208
     3e8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1<<4); // gyro ADC scale: 1000 deg/s
     3ec:	40 e1       	ldi	r20, 0x10	; 16
     3ee:	6b e1       	ldi	r22, 0x1B	; 27
     3f0:	80 ed       	ldi	r24, 0xD0	; 208
     3f2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 0x00); //accel ADC scale: 2 g
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	6c e1       	ldi	r22, 0x1C	; 28
     3fa:	80 ed       	ldi	r24, 0xD0	; 208
     3fc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <i2c_write_byte>
	
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 0x00); //enable data ready interrupt
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	68 e3       	ldi	r22, 0x38	; 56
     404:	80 ed       	ldi	r24, 0xD0	; 208
     406:	0e 94 db 01 	call	0x3b6	; 0x3b6 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_SIGNAL_PATH_RESET, 0x00); //don't reset signal path
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	68 e6       	ldi	r22, 0x68	; 104
     40e:	80 ed       	ldi	r24, 0xD0	; 208
     410:	0e 94 db 01 	call	0x3b6	; 0x3b6 <i2c_write_byte>
     414:	08 95       	ret

00000416 <uart_init>:


// initialize UART
void uart_init() {
   
  UBRR0H = UBRRH_VALUE; //(uint8_t)(BAUD_PRESCALER >> 8);
     416:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE; //(uint8_t)(BAUD_PRESCALER);
     41a:	87 e6       	ldi	r24, 0x67	; 103
     41c:	80 93 c4 00 	sts	0x00C4, r24

  UCSR0A &= ~(_BV(U2X0));
     420:	e0 ec       	ldi	r30, 0xC0	; 192
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	8d 7f       	andi	r24, 0xFD	; 253
     428:	80 83       	st	Z, r24

  UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8-bit data
     42a:	86 e0       	ldi	r24, 0x06	; 6
     42c:	80 93 c2 00 	sts	0x00C2, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);   // Enable RX and TX
     430:	88 e9       	ldi	r24, 0x98	; 152
     432:	80 93 c1 00 	sts	0x00C1, r24
     436:	08 95       	ret

00000438 <uart_putchar>:

  
}

void uart_putchar(char data) {
    while ( !( UCSR0A & (1<<UDRE0)) );
     438:	e0 ec       	ldi	r30, 0xC0	; 192
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	90 81       	ld	r25, Z
     43e:	95 ff       	sbrs	r25, 5
     440:	fd cf       	rjmp	.-6      	; 0x43c <uart_putchar+0x4>
    UDR0 = data;
     442:	80 93 c6 00 	sts	0x00C6, r24
     446:	08 95       	ret

00000448 <uart_putstring>:
char uart_getchar(void) {
    while ( !(UCSR0A & (1<<RXC0)) ) ;
    return UDR0;
}

void uart_putstring(char * s) {
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	ec 01       	movw	r28, r24
  int i = 0;
  while(s[i]!='\0'){
     44e:	88 81       	ld	r24, Y
     450:	88 23       	and	r24, r24
     452:	31 f0       	breq	.+12     	; 0x460 <uart_putstring+0x18>
     454:	21 96       	adiw	r28, 0x01	; 1
    uart_putchar(s[i]);
     456:	0e 94 1c 02 	call	0x438	; 0x438 <uart_putchar>
    return UDR0;
}

void uart_putstring(char * s) {
  int i = 0;
  while(s[i]!='\0'){
     45a:	89 91       	ld	r24, Y+
     45c:	81 11       	cpse	r24, r1
     45e:	fb cf       	rjmp	.-10     	; 0x456 <uart_putstring+0xe>
    uart_putchar(s[i]);
    ++i;
  };
  
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <uart_putdouble>:
	a = data >> 8;
	uart_putchar(a);
}


void uart_putdouble(double data){
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	2a 97       	sbiw	r28, 0x0a	; 10
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
	
	char datastring[10];
	snprintf(datastring, 10, "%f", data);
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	7f 93       	push	r23
     484:	6f 93       	push	r22
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	1f 92       	push	r1
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	8f 93       	push	r24
     494:	8e 01       	movw	r16, r28
     496:	0f 5f       	subi	r16, 0xFF	; 255
     498:	1f 4f       	sbci	r17, 0xFF	; 255
     49a:	1f 93       	push	r17
     49c:	0f 93       	push	r16
     49e:	0e 94 8b 07 	call	0xf16	; 0xf16 <snprintf>
	uart_putstring(datastring);
     4a2:	c8 01       	movw	r24, r16
     4a4:	0e 94 24 02 	call	0x448	; 0x448 <uart_putstring>
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
	
}
     4b2:	2a 96       	adiw	r28, 0x0a	; 10
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret

000004c8 <timer_setup>:
}//end of main



void timer_setup(){
	TCCR1A = 0x00;
     4c8:	10 92 80 00 	sts	0x0080, r1
	TIMSK1 |= _BV(TOIE1);
     4cc:	ef e6       	ldi	r30, 0x6F	; 111
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS11);
     4d6:	e1 e8       	ldi	r30, 0x81	; 129
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	82 60       	ori	r24, 0x02	; 2
     4de:	80 83       	st	Z, r24
	TCCR1B &= ~( _BV(CS12)  | _BV(CS10)); // prescaler=8
     4e0:	80 81       	ld	r24, Z
     4e2:	8a 7f       	andi	r24, 0xFA	; 250
     4e4:	80 83       	st	Z, r24
     4e6:	08 95       	ret

000004e8 <get_time>:

}



void get_time(double * dt){
     4e8:	8f 92       	push	r8
     4ea:	9f 92       	push	r9
     4ec:	af 92       	push	r10
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
	cli();
     4fe:	f8 94       	cli
	uint8_t l = TCNT1L;
     500:	40 91 84 00 	lds	r20, 0x0084
	uint8_t h = TCNT1H;
     504:	80 91 85 00 	lds	r24, 0x0085
	uint16_t step = h<<8 | l;
	*dt = (double)step*5e-7 + count*0.032768;
     508:	c0 90 6c 01 	lds	r12, 0x016C
     50c:	d0 90 6d 01 	lds	r13, 0x016D
     510:	e0 90 6e 01 	lds	r14, 0x016E
     514:	f0 90 6f 01 	lds	r15, 0x016F

void get_time(double * dt){
	cli();
	uint8_t l = TCNT1L;
	uint8_t h = TCNT1H;
	uint16_t step = h<<8 | l;
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	58 2b       	or	r21, r24
	*dt = (double)step*5e-7 + count*0.032768;
     51c:	ba 01       	movw	r22, r20
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 34 06 	call	0xc68	; 0xc68 <__floatunsisf>
     526:	2d eb       	ldi	r18, 0xBD	; 189
     528:	37 e3       	ldi	r19, 0x37	; 55
     52a:	46 e0       	ldi	r20, 0x06	; 6
     52c:	55 e3       	ldi	r21, 0x35	; 53
     52e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     532:	4b 01       	movw	r8, r22
     534:	5c 01       	movw	r10, r24
     536:	2d eb       	ldi	r18, 0xBD	; 189
     538:	37 e3       	ldi	r19, 0x37	; 55
     53a:	46 e0       	ldi	r20, 0x06	; 6
     53c:	5d e3       	ldi	r21, 0x3D	; 61
     53e:	c7 01       	movw	r24, r14
     540:	b6 01       	movw	r22, r12
     542:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     546:	9b 01       	movw	r18, r22
     548:	ac 01       	movw	r20, r24
     54a:	c5 01       	movw	r24, r10
     54c:	b4 01       	movw	r22, r8
     54e:	0e 94 df 04 	call	0x9be	; 0x9be <__addsf3>
     552:	68 83       	st	Y, r22
     554:	79 83       	std	Y+1, r23	; 0x01
     556:	8a 83       	std	Y+2, r24	; 0x02
     558:	9b 83       	std	Y+3, r25	; 0x03
	count = 0;
     55a:	10 92 6c 01 	sts	0x016C, r1
     55e:	10 92 6d 01 	sts	0x016D, r1
     562:	10 92 6e 01 	sts	0x016E, r1
     566:	10 92 6f 01 	sts	0x016F, r1
	sei();
     56a:	78 94       	sei
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	bf 90       	pop	r11
     57a:	af 90       	pop	r10
     57c:	9f 90       	pop	r9
     57e:	8f 90       	pop	r8
     580:	08 95       	ret

00000582 <main>:
void timer_setup();
void get_time(double* dt);
volatile double count;
const double unit_t = 8/16000000;

int main(void){
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	a0 97       	sbiw	r28, 0x20	; 32
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61

	sei();
     596:	78 94       	sei
	uart_init();
     598:	0e 94 0b 02 	call	0x416	; 0x416 <uart_init>
	i2c_init();
     59c:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2c_init>

	DDRB |= _BV(5);
     5a0:	25 9a       	sbi	0x04, 5	; 4
	float clicks = 0;
	int clickprevx = 0;
	int clickprevy = 0;

	// initialize & test MPU5060 availability
	ret = i2c_start(MPU6050_ADDRESS+I2C_WRITE);
     5a2:	80 ed       	ldi	r24, 0xD0	; 208
     5a4:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_start>
	if(~ret){
		PORTB |= _BV(5);
     5a8:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	83 ec       	ldi	r24, 0xC3	; 195
     5ae:	99 e0       	ldi	r25, 0x09	; 9
     5b0:	21 50       	subi	r18, 0x01	; 1
     5b2:	80 40       	sbci	r24, 0x00	; 0
     5b4:	90 40       	sbci	r25, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x2e>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x38>
     5ba:	00 00       	nop
		_delay_ms(200);
		PORTB &= ~(_BV(5));
     5bc:	2d 98       	cbi	0x05, 5	; 5
	}

	mpu6050_init();
     5be:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <mpu6050_init>
	timer_setup();
     5c2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <timer_setup>

	mpu6050_read_accel_ALL(accel_buff);
     5c6:	ce 01       	movw	r24, r28
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	0e 94 a5 01 	call	0x34a	; 0x34a <mpu6050_read_accel_ALL>
	float pitch;	//angle around x axis
	float roll;		//angle around y axis
	float pitch_accel, roll_accel;
	float clicks = 0;
	int clickprevx = 0;
	int clickprevy = 0;
     5ce:	21 2c       	mov	r2, r1
     5d0:	31 2c       	mov	r3, r1
	double dt;
	float pitch;	//angle around x axis
	float roll;		//angle around y axis
	float pitch_accel, roll_accel;
	float clicks = 0;
	int clickprevx = 0;
     5d2:	1a 8e       	std	Y+26, r1	; 0x1a
     5d4:	19 8e       	std	Y+25, r1	; 0x19
	double gyroX, gyroY, gyroZ;
	double dt;
	float pitch;	//angle around x axis
	float roll;		//angle around y axis
	float pitch_accel, roll_accel;
	float clicks = 0;
     5d6:	1d 8a       	std	Y+21, r1	; 0x15
     5d8:	1e 8a       	std	Y+22, r1	; 0x16
     5da:	1f 8a       	std	Y+23, r1	; 0x17
     5dc:	18 8e       	std	Y+24, r1	; 0x18
			{
				clicks += 1;
				clickprevy = 1;
			}
			
			else if(!(roll > 25 || roll <-25)) clickprevy = 0;
     5de:	3c 8e       	std	Y+28, r3	; 0x1c
     5e0:	2b 8e       	std	Y+27, r2	; 0x1b
	timer_setup();

	mpu6050_read_accel_ALL(accel_buff);

	while(1){
		get_time(&dt);
     5e2:	ce 01       	movw	r24, r28
     5e4:	0d 96       	adiw	r24, 0x0d	; 13
     5e6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <get_time>
		mpu6050_read_accel_ALL(accel_buff);
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	0e 94 a5 01 	call	0x34a	; 0x34a <mpu6050_read_accel_ALL>
		mpu6050_read_gyro_ALL(gyro_buff);
     5f2:	ce 01       	movw	r24, r28
     5f4:	07 96       	adiw	r24, 0x07	; 7
     5f6:	0e 94 39 01 	call	0x272	; 0x272 <mpu6050_read_gyro_ALL>
		accelZ = accel_buff[2]*9.8*2/32768;
		
		// gyro rate (degrees/s)
		gyroX = gyro_buff[0]*(180/PI)*1000/32768;
		gyroY = gyro_buff[1]*(180/PI)*1000/32768;
		gyroZ = gyro_buff[2]*(180/PI)*1000/32768;
     5fa:	6b 85       	ldd	r22, Y+11	; 0x0b
     5fc:	7c 85       	ldd	r23, Y+12	; 0x0c
     5fe:	07 2e       	mov	r0, r23
     600:	00 0c       	add	r0, r0
     602:	88 0b       	sbc	r24, r24
     604:	99 0b       	sbc	r25, r25
     606:	0e 94 36 06 	call	0xc6c	; 0xc6c <__floatsisf>
     60a:	20 ee       	ldi	r18, 0xE0	; 224
     60c:	3e e2       	ldi	r19, 0x2E	; 46
     60e:	45 e6       	ldi	r20, 0x65	; 101
     610:	52 e4       	ldi	r21, 0x42	; 66
     612:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	4a e7       	ldi	r20, 0x7A	; 122
     61c:	54 e4       	ldi	r21, 0x44	; 68
     61e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	58 e3       	ldi	r21, 0x38	; 56
     62a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     62e:	69 8b       	std	Y+17, r22	; 0x11
     630:	7a 8b       	std	Y+18, r23	; 0x12
     632:	8b 8b       	std	Y+19, r24	; 0x13
     634:	9c 8b       	std	Y+20, r25	; 0x14
		
		//uses complementary filter as found on http://www.pieter-jan.com/
		
		//integrate the gyro data: int(angularSpeed) = angle
		pitch = pitch + ((float)gyro_buff[0] / GYRO_SENSITIVITY) * dt;
     636:	8d 84       	ldd	r8, Y+13	; 0x0d
     638:	9e 84       	ldd	r9, Y+14	; 0x0e
     63a:	af 84       	ldd	r10, Y+15	; 0x0f
     63c:	b8 88       	ldd	r11, Y+16	; 0x10
     63e:	6f 81       	ldd	r22, Y+7	; 0x07
     640:	78 85       	ldd	r23, Y+8	; 0x08
     642:	07 2e       	mov	r0, r23
     644:	00 0c       	add	r0, r0
     646:	88 0b       	sbc	r24, r24
     648:	99 0b       	sbc	r25, r25
     64a:	0e 94 36 06 	call	0xc6c	; 0xc6c <__floatsisf>
     64e:	2f e6       	ldi	r18, 0x6F	; 111
     650:	32 e1       	ldi	r19, 0x12	; 18
     652:	43 e8       	ldi	r20, 0x83	; 131
     654:	52 e4       	ldi	r21, 0x42	; 66
     656:	0e 94 c2 05 	call	0xb84	; 0xb84 <__divsf3>
     65a:	a5 01       	movw	r20, r10
     65c:	94 01       	movw	r18, r8
     65e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     662:	9b 01       	movw	r18, r22
     664:	ac 01       	movw	r20, r24
     666:	c3 01       	movw	r24, r6
     668:	b2 01       	movw	r22, r4
     66a:	0e 94 df 04 	call	0x9be	; 0x9be <__addsf3>
     66e:	2b 01       	movw	r4, r22
     670:	3c 01       	movw	r6, r24
		roll = roll - ((float)gyro_buff[1] / GYRO_SENSITIVITY) * dt;
     672:	69 85       	ldd	r22, Y+9	; 0x09
     674:	7a 85       	ldd	r23, Y+10	; 0x0a
     676:	07 2e       	mov	r0, r23
     678:	00 0c       	add	r0, r0
     67a:	88 0b       	sbc	r24, r24
     67c:	99 0b       	sbc	r25, r25
     67e:	0e 94 36 06 	call	0xc6c	; 0xc6c <__floatsisf>
     682:	2f e6       	ldi	r18, 0x6F	; 111
     684:	32 e1       	ldi	r19, 0x12	; 18
     686:	43 e8       	ldi	r20, 0x83	; 131
     688:	52 e4       	ldi	r21, 0x42	; 66
     68a:	0e 94 c2 05 	call	0xb84	; 0xb84 <__divsf3>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	c5 01       	movw	r24, r10
     694:	b4 01       	movw	r22, r8
     696:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	0e 94 de 04 	call	0x9bc	; 0x9bc <__subsf3>
     6a6:	6b 01       	movw	r12, r22
     6a8:	7c 01       	movw	r14, r24
		
		//compensate for drift with accelerometer data
		int approx_force_magnitude = abs(accel_buff[0]) + abs(accel_buff[1]) + abs(accel_buff[2]);
     6aa:	29 80       	ldd	r2, Y+1	; 0x01
     6ac:	3a 80       	ldd	r3, Y+2	; 0x02
     6ae:	0b 81       	ldd	r16, Y+3	; 0x03
     6b0:	1c 81       	ldd	r17, Y+4	; 0x04
     6b2:	6d 81       	ldd	r22, Y+5	; 0x05
     6b4:	7e 81       	ldd	r23, Y+6	; 0x06
     6b6:	91 01       	movw	r18, r2
     6b8:	33 20       	and	r3, r3
     6ba:	24 f4       	brge	.+8      	; 0x6c4 <main+0x142>
     6bc:	22 27       	eor	r18, r18
     6be:	33 27       	eor	r19, r19
     6c0:	22 19       	sub	r18, r2
     6c2:	33 09       	sbc	r19, r3
     6c4:	c8 01       	movw	r24, r16
     6c6:	11 23       	and	r17, r17
     6c8:	24 f4       	brge	.+8      	; 0x6d2 <main+0x150>
     6ca:	88 27       	eor	r24, r24
     6cc:	99 27       	eor	r25, r25
     6ce:	80 1b       	sub	r24, r16
     6d0:	91 0b       	sbc	r25, r17
     6d2:	28 0f       	add	r18, r24
     6d4:	39 1f       	adc	r19, r25
     6d6:	cb 01       	movw	r24, r22
     6d8:	77 23       	and	r23, r23
     6da:	24 f4       	brge	.+8      	; 0x6e4 <main+0x162>
     6dc:	88 27       	eor	r24, r24
     6de:	99 27       	eor	r25, r25
     6e0:	86 1b       	sub	r24, r22
     6e2:	97 0b       	sbc	r25, r23
     6e4:	82 0f       	add	r24, r18
     6e6:	93 1f       	adc	r25, r19
		
		if(approx_force_magnitude > 8192 && approx_force_magnitude < 32768)
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	90 42       	sbci	r25, 0x20	; 32
     6ec:	0c f4       	brge	.+2      	; 0x6f0 <main+0x16e>
     6ee:	ee c0       	rjmp	.+476    	; 0x8cc <main+0x34a>
		{
			//pitch
			pitch_accel = atan2f((float)accel_buff[1], (float)accel_buff[2]) * 180 / PI; //in degrees
     6f0:	07 2e       	mov	r0, r23
     6f2:	00 0c       	add	r0, r0
     6f4:	88 0b       	sbc	r24, r24
     6f6:	99 0b       	sbc	r25, r25
     6f8:	0e 94 36 06 	call	0xc6c	; 0xc6c <__floatsisf>
     6fc:	4b 01       	movw	r8, r22
     6fe:	5c 01       	movw	r10, r24
     700:	b8 01       	movw	r22, r16
     702:	11 0f       	add	r17, r17
     704:	88 0b       	sbc	r24, r24
     706:	99 0b       	sbc	r25, r25
     708:	0e 94 36 06 	call	0xc6c	; 0xc6c <__floatsisf>
     70c:	a5 01       	movw	r20, r10
     70e:	94 01       	movw	r18, r8
     710:	0e 94 5e 05 	call	0xabc	; 0xabc <atan2>
     714:	6d 8f       	std	Y+29, r22	; 0x1d
     716:	7e 8f       	std	Y+30, r23	; 0x1e
     718:	8f 8f       	std	Y+31, r24	; 0x1f
     71a:	98 a3       	std	Y+32, r25	; 0x20
			pitch = pitch * 0.98 + pitch_accel * 0.02;
     71c:	28 e4       	ldi	r18, 0x48	; 72
     71e:	31 ee       	ldi	r19, 0xE1	; 225
     720:	4a e7       	ldi	r20, 0x7A	; 122
     722:	5f e3       	ldi	r21, 0x3F	; 63
     724:	c3 01       	movw	r24, r6
     726:	b2 01       	movw	r22, r4
     728:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     72c:	2b 01       	movw	r4, r22
     72e:	3c 01       	movw	r6, r24
		int approx_force_magnitude = abs(accel_buff[0]) + abs(accel_buff[1]) + abs(accel_buff[2]);
		
		if(approx_force_magnitude > 8192 && approx_force_magnitude < 32768)
		{
			//pitch
			pitch_accel = atan2f((float)accel_buff[1], (float)accel_buff[2]) * 180 / PI; //in degrees
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	44 e3       	ldi	r20, 0x34	; 52
     736:	53 e4       	ldi	r21, 0x43	; 67
     738:	6d 8d       	ldd	r22, Y+29	; 0x1d
     73a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     73c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     73e:	98 a1       	ldd	r25, Y+32	; 0x20
     740:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     744:	2b ed       	ldi	r18, 0xDB	; 219
     746:	3f e0       	ldi	r19, 0x0F	; 15
     748:	49 e4       	ldi	r20, 0x49	; 73
     74a:	50 e4       	ldi	r21, 0x40	; 64
     74c:	0e 94 c2 05 	call	0xb84	; 0xb84 <__divsf3>
			pitch = pitch * 0.98 + pitch_accel * 0.02;
     750:	2a e0       	ldi	r18, 0x0A	; 10
     752:	37 ed       	ldi	r19, 0xD7	; 215
     754:	43 ea       	ldi	r20, 0xA3	; 163
     756:	5c e3       	ldi	r21, 0x3C	; 60
     758:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     75c:	9b 01       	movw	r18, r22
     75e:	ac 01       	movw	r20, r24
     760:	c3 01       	movw	r24, r6
     762:	b2 01       	movw	r22, r4
     764:	0e 94 df 04 	call	0x9be	; 0x9be <__addsf3>
     768:	2b 01       	movw	r4, r22
     76a:	3c 01       	movw	r6, r24
			if((pitch > 25 || pitch <-25) && clickprevx == 0)
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	48 ec       	ldi	r20, 0xC8	; 200
     772:	51 e4       	ldi	r21, 0x41	; 65
     774:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__gesf2>
     778:	18 16       	cp	r1, r24
     77a:	0c f4       	brge	.+2      	; 0x77e <main+0x1fc>
     77c:	db c0       	rjmp	.+438    	; 0x934 <__stack+0x35>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	48 ec       	ldi	r20, 0xC8	; 200
     784:	51 ec       	ldi	r21, 0xC1	; 193
     786:	c3 01       	movw	r24, r6
     788:	b2 01       	movw	r22, r4
     78a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__cmpsf2>
     78e:	88 23       	and	r24, r24
     790:	b4 f4       	brge	.+44     	; 0x7be <main+0x23c>
     792:	89 8d       	ldd	r24, Y+25	; 0x19
     794:	9a 8d       	ldd	r25, Y+26	; 0x1a
     796:	89 2b       	or	r24, r25
     798:	41 f5       	brne	.+80     	; 0x7ea <main+0x268>
			{
				clicks += 1;
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e8       	ldi	r20, 0x80	; 128
     7a0:	5f e3       	ldi	r21, 0x3F	; 63
     7a2:	6d 89       	ldd	r22, Y+21	; 0x15
     7a4:	7e 89       	ldd	r23, Y+22	; 0x16
     7a6:	8f 89       	ldd	r24, Y+23	; 0x17
     7a8:	98 8d       	ldd	r25, Y+24	; 0x18
     7aa:	0e 94 df 04 	call	0x9be	; 0x9be <__addsf3>
     7ae:	6d 8b       	std	Y+21, r22	; 0x15
     7b0:	7e 8b       	std	Y+22, r23	; 0x16
     7b2:	8f 8b       	std	Y+23, r24	; 0x17
     7b4:	98 8f       	std	Y+24, r25	; 0x18
				clickprevx = 1;
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	99 8f       	std	Y+25, r25	; 0x19
     7ba:	1a 8e       	std	Y+26, r1	; 0x1a
     7bc:	16 c0       	rjmp	.+44     	; 0x7ea <main+0x268>
			}
			
			else if (!(pitch > 25 || pitch <-25)) clickprevx = 0;
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	48 ec       	ldi	r20, 0xC8	; 200
     7c4:	51 e4       	ldi	r21, 0x41	; 65
     7c6:	c3 01       	movw	r24, r6
     7c8:	b2 01       	movw	r22, r4
     7ca:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__gesf2>
     7ce:	18 16       	cp	r1, r24
     7d0:	64 f0       	brlt	.+24     	; 0x7ea <main+0x268>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	48 ec       	ldi	r20, 0xC8	; 200
     7d8:	51 ec       	ldi	r21, 0xC1	; 193
     7da:	c3 01       	movw	r24, r6
     7dc:	b2 01       	movw	r22, r4
     7de:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__cmpsf2>
     7e2:	88 23       	and	r24, r24
     7e4:	14 f0       	brlt	.+4      	; 0x7ea <main+0x268>
     7e6:	19 8e       	std	Y+25, r1	; 0x19
     7e8:	1a 8e       	std	Y+26, r1	; 0x1a
			
			//roll
			roll_accel = atan2f((float)accel_buff[0], (float)accel_buff[2]) * 180 / PI; //in degrees
     7ea:	b1 01       	movw	r22, r2
     7ec:	33 0c       	add	r3, r3
     7ee:	88 0b       	sbc	r24, r24
     7f0:	99 0b       	sbc	r25, r25
     7f2:	0e 94 36 06 	call	0xc6c	; 0xc6c <__floatsisf>
     7f6:	a5 01       	movw	r20, r10
     7f8:	94 01       	movw	r18, r8
     7fa:	0e 94 5e 05 	call	0xabc	; 0xabc <atan2>
     7fe:	4b 01       	movw	r8, r22
     800:	5c 01       	movw	r10, r24
			roll = roll * 0.98 + roll_accel * 0.02;
     802:	28 e4       	ldi	r18, 0x48	; 72
     804:	31 ee       	ldi	r19, 0xE1	; 225
     806:	4a e7       	ldi	r20, 0x7A	; 122
     808:	5f e3       	ldi	r21, 0x3F	; 63
     80a:	c7 01       	movw	r24, r14
     80c:	b6 01       	movw	r22, r12
     80e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     812:	6b 01       	movw	r12, r22
     814:	7c 01       	movw	r14, r24
			}
			
			else if (!(pitch > 25 || pitch <-25)) clickprevx = 0;
			
			//roll
			roll_accel = atan2f((float)accel_buff[0], (float)accel_buff[2]) * 180 / PI; //in degrees
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	44 e3       	ldi	r20, 0x34	; 52
     81c:	53 e4       	ldi	r21, 0x43	; 67
     81e:	c5 01       	movw	r24, r10
     820:	b4 01       	movw	r22, r8
     822:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     826:	2b ed       	ldi	r18, 0xDB	; 219
     828:	3f e0       	ldi	r19, 0x0F	; 15
     82a:	49 e4       	ldi	r20, 0x49	; 73
     82c:	50 e4       	ldi	r21, 0x40	; 64
     82e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__divsf3>
			roll = roll * 0.98 + roll_accel * 0.02;
     832:	2a e0       	ldi	r18, 0x0A	; 10
     834:	37 ed       	ldi	r19, 0xD7	; 215
     836:	43 ea       	ldi	r20, 0xA3	; 163
     838:	5c e3       	ldi	r21, 0x3C	; 60
     83a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3>
     83e:	9b 01       	movw	r18, r22
     840:	ac 01       	movw	r20, r24
     842:	c7 01       	movw	r24, r14
     844:	b6 01       	movw	r22, r12
     846:	0e 94 df 04 	call	0x9be	; 0x9be <__addsf3>
     84a:	6b 01       	movw	r12, r22
     84c:	7c 01       	movw	r14, r24
			if((roll > 25 || roll <-25) && clickprevy == 0)
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	48 ec       	ldi	r20, 0xC8	; 200
     854:	51 e4       	ldi	r21, 0x41	; 65
     856:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	0c f4       	brge	.+2      	; 0x860 <main+0x2de>
     85e:	70 c0       	rjmp	.+224    	; 0x940 <__stack+0x41>
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	48 ec       	ldi	r20, 0xC8	; 200
     866:	51 ec       	ldi	r21, 0xC1	; 193
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
     86c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__cmpsf2>
     870:	88 23       	and	r24, r24
     872:	b4 f4       	brge	.+44     	; 0x8a0 <main+0x31e>
     874:	8b 8d       	ldd	r24, Y+27	; 0x1b
     876:	9c 8d       	ldd	r25, Y+28	; 0x1c
     878:	89 2b       	or	r24, r25
     87a:	41 f5       	brne	.+80     	; 0x8cc <main+0x34a>
			{
				clicks += 1;
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	5f e3       	ldi	r21, 0x3F	; 63
     884:	6d 89       	ldd	r22, Y+21	; 0x15
     886:	7e 89       	ldd	r23, Y+22	; 0x16
     888:	8f 89       	ldd	r24, Y+23	; 0x17
     88a:	98 8d       	ldd	r25, Y+24	; 0x18
     88c:	0e 94 df 04 	call	0x9be	; 0x9be <__addsf3>
     890:	6d 8b       	std	Y+21, r22	; 0x15
     892:	7e 8b       	std	Y+22, r23	; 0x16
     894:	8f 8b       	std	Y+23, r24	; 0x17
     896:	98 8f       	std	Y+24, r25	; 0x18
				clickprevy = 1;
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	9b 8f       	std	Y+27, r25	; 0x1b
     89c:	1c 8e       	std	Y+28, r1	; 0x1c
     89e:	16 c0       	rjmp	.+44     	; 0x8cc <main+0x34a>
			}
			
			else if(!(roll > 25 || roll <-25)) clickprevy = 0;
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	48 ec       	ldi	r20, 0xC8	; 200
     8a6:	51 e4       	ldi	r21, 0x41	; 65
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__gesf2>
     8b0:	18 16       	cp	r1, r24
     8b2:	64 f0       	brlt	.+24     	; 0x8cc <main+0x34a>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	48 ec       	ldi	r20, 0xC8	; 200
     8ba:	51 ec       	ldi	r21, 0xC1	; 193
     8bc:	c7 01       	movw	r24, r14
     8be:	b6 01       	movw	r22, r12
     8c0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__cmpsf2>
     8c4:	88 23       	and	r24, r24
     8c6:	14 f0       	brlt	.+4      	; 0x8cc <main+0x34a>
     8c8:	1b 8e       	std	Y+27, r1	; 0x1b
     8ca:	1c 8e       	std	Y+28, r1	; 0x1c
     8cc:	8f e3       	ldi	r24, 0x3F	; 63
     8ce:	9c e9       	ldi	r25, 0x9C	; 156
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <main+0x34e>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <main+0x354>
     8d6:	00 00       	nop
		//from bluetooth requires a special format. Each line must start with
		//"E" and all values must be separated by commas.
		//Format: "Evalue1,value2,value3\n"
		
		_delay_ms(10);
		uart_putchar('E');
     8d8:	85 e4       	ldi	r24, 0x45	; 69
     8da:	0e 94 1c 02 	call	0x438	; 0x438 <uart_putchar>
		uart_putdouble(gyroZ);
     8de:	69 89       	ldd	r22, Y+17	; 0x11
     8e0:	7a 89       	ldd	r23, Y+18	; 0x12
     8e2:	8b 89       	ldd	r24, Y+19	; 0x13
     8e4:	9c 89       	ldd	r25, Y+20	; 0x14
     8e6:	0e 94 33 02 	call	0x466	; 0x466 <uart_putdouble>
		uart_putstring(",");
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 24 02 	call	0x448	; 0x448 <uart_putstring>
		uart_putdouble(pitch);
     8f2:	c3 01       	movw	r24, r6
     8f4:	b2 01       	movw	r22, r4
     8f6:	0e 94 33 02 	call	0x466	; 0x466 <uart_putdouble>
		uart_putstring(",");
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 24 02 	call	0x448	; 0x448 <uart_putstring>
		uart_putdouble(roll);
     902:	c7 01       	movw	r24, r14
     904:	b6 01       	movw	r22, r12
     906:	0e 94 33 02 	call	0x466	; 0x466 <uart_putdouble>
		uart_putchar('\n');
     90a:	8a e0       	ldi	r24, 0x0A	; 10
     90c:	0e 94 1c 02 	call	0x438	; 0x438 <uart_putchar>
		uart_putstring("                                                                   MOVEMENTS: ");
     910:	85 e0       	ldi	r24, 0x05	; 5
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 24 02 	call	0x448	; 0x448 <uart_putstring>
		uart_putdouble(clicks);
     918:	6d 89       	ldd	r22, Y+21	; 0x15
     91a:	7e 89       	ldd	r23, Y+22	; 0x16
     91c:	8f 89       	ldd	r24, Y+23	; 0x17
     91e:	98 8d       	ldd	r25, Y+24	; 0x18
     920:	0e 94 33 02 	call	0x466	; 0x466 <uart_putdouble>
		uart_putstring("                      ");
     924:	84 e5       	ldi	r24, 0x54	; 84
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 24 02 	call	0x448	; 0x448 <uart_putstring>
		uart_putchar('\n');
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	0e 94 1c 02 	call	0x438	; 0x438 <uart_putchar>
		//uart_putchar('\r');
		
		
	}
     932:	57 ce       	rjmp	.-850    	; 0x5e2 <main+0x60>
		if(approx_force_magnitude > 8192 && approx_force_magnitude < 32768)
		{
			//pitch
			pitch_accel = atan2f((float)accel_buff[1], (float)accel_buff[2]) * 180 / PI; //in degrees
			pitch = pitch * 0.98 + pitch_accel * 0.02;
			if((pitch > 25 || pitch <-25) && clickprevx == 0)
     934:	89 8d       	ldd	r24, Y+25	; 0x19
     936:	9a 8d       	ldd	r25, Y+26	; 0x1a
     938:	89 2b       	or	r24, r25
     93a:	09 f4       	brne	.+2      	; 0x93e <__stack+0x3f>
     93c:	2e cf       	rjmp	.-420    	; 0x79a <main+0x218>
     93e:	55 cf       	rjmp	.-342    	; 0x7ea <main+0x268>
			else if (!(pitch > 25 || pitch <-25)) clickprevx = 0;
			
			//roll
			roll_accel = atan2f((float)accel_buff[0], (float)accel_buff[2]) * 180 / PI; //in degrees
			roll = roll * 0.98 + roll_accel * 0.02;
			if((roll > 25 || roll <-25) && clickprevy == 0)
     940:	8b 8d       	ldd	r24, Y+27	; 0x1b
     942:	9c 8d       	ldd	r25, Y+28	; 0x1c
     944:	89 2b       	or	r24, r25
     946:	09 f4       	brne	.+2      	; 0x94a <__stack+0x4b>
     948:	99 cf       	rjmp	.-206    	; 0x87c <main+0x2fa>
     94a:	c0 cf       	rjmp	.-128    	; 0x8cc <main+0x34a>

0000094c <__vector_13>:
	sei();
}


// timer 1 overflow interrupt handler
SIGNAL(TIMER1_OVF_vect){
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
	count += 1;
     96e:	60 91 6c 01 	lds	r22, 0x016C
     972:	70 91 6d 01 	lds	r23, 0x016D
     976:	80 91 6e 01 	lds	r24, 0x016E
     97a:	90 91 6f 01 	lds	r25, 0x016F
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e8       	ldi	r20, 0x80	; 128
     984:	5f e3       	ldi	r21, 0x3F	; 63
     986:	0e 94 df 04 	call	0x9be	; 0x9be <__addsf3>
     98a:	60 93 6c 01 	sts	0x016C, r22
     98e:	70 93 6d 01 	sts	0x016D, r23
     992:	80 93 6e 01 	sts	0x016E, r24
     996:	90 93 6f 01 	sts	0x016F, r25
	//TCNT1H = 0x00;
	//TCNT1L = 0x00;

}
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <__subsf3>:
     9bc:	50 58       	subi	r21, 0x80	; 128

000009be <__addsf3>:
     9be:	bb 27       	eor	r27, r27
     9c0:	aa 27       	eor	r26, r26
     9c2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__addsf3x>
     9c6:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__fp_round>
     9ca:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscA>
     9ce:	38 f0       	brcs	.+14     	; 0x9de <__addsf3+0x20>
     9d0:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscB>
     9d4:	20 f0       	brcs	.+8      	; 0x9de <__addsf3+0x20>
     9d6:	39 f4       	brne	.+14     	; 0x9e6 <__addsf3+0x28>
     9d8:	9f 3f       	cpi	r25, 0xFF	; 255
     9da:	19 f4       	brne	.+6      	; 0x9e2 <__addsf3+0x24>
     9dc:	26 f4       	brtc	.+8      	; 0x9e6 <__addsf3+0x28>
     9de:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_nan>
     9e2:	0e f4       	brtc	.+2      	; 0x9e6 <__addsf3+0x28>
     9e4:	e0 95       	com	r30
     9e6:	e7 fb       	bst	r30, 7
     9e8:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_inf>

000009ec <__addsf3x>:
     9ec:	e9 2f       	mov	r30, r25
     9ee:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_split3>
     9f2:	58 f3       	brcs	.-42     	; 0x9ca <__addsf3+0xc>
     9f4:	ba 17       	cp	r27, r26
     9f6:	62 07       	cpc	r22, r18
     9f8:	73 07       	cpc	r23, r19
     9fa:	84 07       	cpc	r24, r20
     9fc:	95 07       	cpc	r25, r21
     9fe:	20 f0       	brcs	.+8      	; 0xa08 <__addsf3x+0x1c>
     a00:	79 f4       	brne	.+30     	; 0xa20 <__addsf3x+0x34>
     a02:	a6 f5       	brtc	.+104    	; 0xa6c <__addsf3x+0x80>
     a04:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_zero>
     a08:	0e f4       	brtc	.+2      	; 0xa0c <__addsf3x+0x20>
     a0a:	e0 95       	com	r30
     a0c:	0b 2e       	mov	r0, r27
     a0e:	ba 2f       	mov	r27, r26
     a10:	a0 2d       	mov	r26, r0
     a12:	0b 01       	movw	r0, r22
     a14:	b9 01       	movw	r22, r18
     a16:	90 01       	movw	r18, r0
     a18:	0c 01       	movw	r0, r24
     a1a:	ca 01       	movw	r24, r20
     a1c:	a0 01       	movw	r20, r0
     a1e:	11 24       	eor	r1, r1
     a20:	ff 27       	eor	r31, r31
     a22:	59 1b       	sub	r21, r25
     a24:	99 f0       	breq	.+38     	; 0xa4c <__addsf3x+0x60>
     a26:	59 3f       	cpi	r21, 0xF9	; 249
     a28:	50 f4       	brcc	.+20     	; 0xa3e <__addsf3x+0x52>
     a2a:	50 3e       	cpi	r21, 0xE0	; 224
     a2c:	68 f1       	brcs	.+90     	; 0xa88 <__addsf3x+0x9c>
     a2e:	1a 16       	cp	r1, r26
     a30:	f0 40       	sbci	r31, 0x00	; 0
     a32:	a2 2f       	mov	r26, r18
     a34:	23 2f       	mov	r18, r19
     a36:	34 2f       	mov	r19, r20
     a38:	44 27       	eor	r20, r20
     a3a:	58 5f       	subi	r21, 0xF8	; 248
     a3c:	f3 cf       	rjmp	.-26     	; 0xa24 <__addsf3x+0x38>
     a3e:	46 95       	lsr	r20
     a40:	37 95       	ror	r19
     a42:	27 95       	ror	r18
     a44:	a7 95       	ror	r26
     a46:	f0 40       	sbci	r31, 0x00	; 0
     a48:	53 95       	inc	r21
     a4a:	c9 f7       	brne	.-14     	; 0xa3e <__addsf3x+0x52>
     a4c:	7e f4       	brtc	.+30     	; 0xa6c <__addsf3x+0x80>
     a4e:	1f 16       	cp	r1, r31
     a50:	ba 0b       	sbc	r27, r26
     a52:	62 0b       	sbc	r22, r18
     a54:	73 0b       	sbc	r23, r19
     a56:	84 0b       	sbc	r24, r20
     a58:	ba f0       	brmi	.+46     	; 0xa88 <__addsf3x+0x9c>
     a5a:	91 50       	subi	r25, 0x01	; 1
     a5c:	a1 f0       	breq	.+40     	; 0xa86 <__addsf3x+0x9a>
     a5e:	ff 0f       	add	r31, r31
     a60:	bb 1f       	adc	r27, r27
     a62:	66 1f       	adc	r22, r22
     a64:	77 1f       	adc	r23, r23
     a66:	88 1f       	adc	r24, r24
     a68:	c2 f7       	brpl	.-16     	; 0xa5a <__addsf3x+0x6e>
     a6a:	0e c0       	rjmp	.+28     	; 0xa88 <__addsf3x+0x9c>
     a6c:	ba 0f       	add	r27, r26
     a6e:	62 1f       	adc	r22, r18
     a70:	73 1f       	adc	r23, r19
     a72:	84 1f       	adc	r24, r20
     a74:	48 f4       	brcc	.+18     	; 0xa88 <__addsf3x+0x9c>
     a76:	87 95       	ror	r24
     a78:	77 95       	ror	r23
     a7a:	67 95       	ror	r22
     a7c:	b7 95       	ror	r27
     a7e:	f7 95       	ror	r31
     a80:	9e 3f       	cpi	r25, 0xFE	; 254
     a82:	08 f0       	brcs	.+2      	; 0xa86 <__addsf3x+0x9a>
     a84:	b0 cf       	rjmp	.-160    	; 0x9e6 <__addsf3+0x28>
     a86:	93 95       	inc	r25
     a88:	88 0f       	add	r24, r24
     a8a:	08 f0       	brcs	.+2      	; 0xa8e <__addsf3x+0xa2>
     a8c:	99 27       	eor	r25, r25
     a8e:	ee 0f       	add	r30, r30
     a90:	97 95       	ror	r25
     a92:	87 95       	ror	r24
     a94:	08 95       	ret
     a96:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscA>
     a9a:	60 f0       	brcs	.+24     	; 0xab4 <__addsf3x+0xc8>
     a9c:	80 e8       	ldi	r24, 0x80	; 128
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <__addsf3x+0xb8>
     aa2:	9e ef       	ldi	r25, 0xFE	; 254
     aa4:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscB>
     aa8:	28 f0       	brcs	.+10     	; 0xab4 <__addsf3x+0xc8>
     aaa:	40 e8       	ldi	r20, 0x80	; 128
     aac:	51 e0       	ldi	r21, 0x01	; 1
     aae:	71 f4       	brne	.+28     	; 0xacc <atan2+0x10>
     ab0:	5e ef       	ldi	r21, 0xFE	; 254
     ab2:	0c c0       	rjmp	.+24     	; 0xacc <atan2+0x10>
     ab4:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_nan>
     ab8:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__fp_zero>

00000abc <atan2>:
     abc:	e9 2f       	mov	r30, r25
     abe:	e0 78       	andi	r30, 0x80	; 128
     ac0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_split3>
     ac4:	40 f3       	brcs	.-48     	; 0xa96 <__addsf3x+0xaa>
     ac6:	09 2e       	mov	r0, r25
     ac8:	05 2a       	or	r0, r21
     aca:	b1 f3       	breq	.-20     	; 0xab8 <__addsf3x+0xcc>
     acc:	26 17       	cp	r18, r22
     ace:	37 07       	cpc	r19, r23
     ad0:	48 07       	cpc	r20, r24
     ad2:	59 07       	cpc	r21, r25
     ad4:	38 f0       	brcs	.+14     	; 0xae4 <atan2+0x28>
     ad6:	0e 2e       	mov	r0, r30
     ad8:	07 f8       	bld	r0, 7
     ada:	e0 25       	eor	r30, r0
     adc:	69 f0       	breq	.+26     	; 0xaf8 <atan2+0x3c>
     ade:	e0 25       	eor	r30, r0
     ae0:	e0 64       	ori	r30, 0x40	; 64
     ae2:	0a c0       	rjmp	.+20     	; 0xaf8 <atan2+0x3c>
     ae4:	ef 63       	ori	r30, 0x3F	; 63
     ae6:	07 f8       	bld	r0, 7
     ae8:	00 94       	com	r0
     aea:	07 fa       	bst	r0, 7
     aec:	db 01       	movw	r26, r22
     aee:	b9 01       	movw	r22, r18
     af0:	9d 01       	movw	r18, r26
     af2:	dc 01       	movw	r26, r24
     af4:	ca 01       	movw	r24, r20
     af6:	ad 01       	movw	r20, r26
     af8:	ef 93       	push	r30
     afa:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__divsf3_pse>
     afe:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_round>
     b02:	0e 94 8e 05 	call	0xb1c	; 0xb1c <atan>
     b06:	5f 91       	pop	r21
     b08:	55 23       	and	r21, r21
     b0a:	39 f0       	breq	.+14     	; 0xb1a <atan2+0x5e>
     b0c:	2b ed       	ldi	r18, 0xDB	; 219
     b0e:	3f e0       	ldi	r19, 0x0F	; 15
     b10:	49 e4       	ldi	r20, 0x49	; 73
     b12:	50 fd       	sbrc	r21, 0
     b14:	49 ec       	ldi	r20, 0xC9	; 201
     b16:	0c 94 df 04 	jmp	0x9be	; 0x9be <__addsf3>
     b1a:	08 95       	ret

00000b1c <atan>:
     b1c:	df 93       	push	r29
     b1e:	dd 27       	eor	r29, r29
     b20:	b9 2f       	mov	r27, r25
     b22:	bf 77       	andi	r27, 0x7F	; 127
     b24:	40 e8       	ldi	r20, 0x80	; 128
     b26:	5f e3       	ldi	r21, 0x3F	; 63
     b28:	16 16       	cp	r1, r22
     b2a:	17 06       	cpc	r1, r23
     b2c:	48 07       	cpc	r20, r24
     b2e:	5b 07       	cpc	r21, r27
     b30:	18 f4       	brcc	.+6      	; 0xb38 <atan+0x1c>
     b32:	d9 2f       	mov	r29, r25
     b34:	0e 94 12 07 	call	0xe24	; 0xe24 <inverse>
     b38:	9f 93       	push	r25
     b3a:	8f 93       	push	r24
     b3c:	7f 93       	push	r23
     b3e:	6f 93       	push	r22
     b40:	0e 94 87 07 	call	0xf0e	; 0xf0e <square>
     b44:	e8 e6       	ldi	r30, 0x68	; 104
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_powser>
     b4c:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_round>
     b50:	2f 91       	pop	r18
     b52:	3f 91       	pop	r19
     b54:	4f 91       	pop	r20
     b56:	5f 91       	pop	r21
     b58:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3x>
     b5c:	dd 23       	and	r29, r29
     b5e:	51 f0       	breq	.+20     	; 0xb74 <atan+0x58>
     b60:	90 58       	subi	r25, 0x80	; 128
     b62:	a2 ea       	ldi	r26, 0xA2	; 162
     b64:	2a ed       	ldi	r18, 0xDA	; 218
     b66:	3f e0       	ldi	r19, 0x0F	; 15
     b68:	49 ec       	ldi	r20, 0xC9	; 201
     b6a:	5f e3       	ldi	r21, 0x3F	; 63
     b6c:	d0 78       	andi	r29, 0x80	; 128
     b6e:	5d 27       	eor	r21, r29
     b70:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__addsf3x>
     b74:	df 91       	pop	r29
     b76:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__fp_round>

00000b7a <__cmpsf2>:
     b7a:	0e 94 71 06 	call	0xce2	; 0xce2 <__fp_cmp>
     b7e:	08 f4       	brcc	.+2      	; 0xb82 <__cmpsf2+0x8>
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	08 95       	ret

00000b84 <__divsf3>:
     b84:	0e 94 d6 05 	call	0xbac	; 0xbac <__divsf3x>
     b88:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__fp_round>
     b8c:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscB>
     b90:	58 f0       	brcs	.+22     	; 0xba8 <__divsf3+0x24>
     b92:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscA>
     b96:	40 f0       	brcs	.+16     	; 0xba8 <__divsf3+0x24>
     b98:	29 f4       	brne	.+10     	; 0xba4 <__divsf3+0x20>
     b9a:	5f 3f       	cpi	r21, 0xFF	; 255
     b9c:	29 f0       	breq	.+10     	; 0xba8 <__divsf3+0x24>
     b9e:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_inf>
     ba2:	51 11       	cpse	r21, r1
     ba4:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_szero>
     ba8:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_nan>

00000bac <__divsf3x>:
     bac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_split3>
     bb0:	68 f3       	brcs	.-38     	; 0xb8c <__divsf3+0x8>

00000bb2 <__divsf3_pse>:
     bb2:	99 23       	and	r25, r25
     bb4:	b1 f3       	breq	.-20     	; 0xba2 <__divsf3+0x1e>
     bb6:	55 23       	and	r21, r21
     bb8:	91 f3       	breq	.-28     	; 0xb9e <__divsf3+0x1a>
     bba:	95 1b       	sub	r25, r21
     bbc:	55 0b       	sbc	r21, r21
     bbe:	bb 27       	eor	r27, r27
     bc0:	aa 27       	eor	r26, r26
     bc2:	62 17       	cp	r22, r18
     bc4:	73 07       	cpc	r23, r19
     bc6:	84 07       	cpc	r24, r20
     bc8:	38 f0       	brcs	.+14     	; 0xbd8 <__divsf3_pse+0x26>
     bca:	9f 5f       	subi	r25, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	44 1f       	adc	r20, r20
     bd4:	aa 1f       	adc	r26, r26
     bd6:	a9 f3       	breq	.-22     	; 0xbc2 <__divsf3_pse+0x10>
     bd8:	35 d0       	rcall	.+106    	; 0xc44 <__divsf3_pse+0x92>
     bda:	0e 2e       	mov	r0, r30
     bdc:	3a f0       	brmi	.+14     	; 0xbec <__divsf3_pse+0x3a>
     bde:	e0 e8       	ldi	r30, 0x80	; 128
     be0:	32 d0       	rcall	.+100    	; 0xc46 <__divsf3_pse+0x94>
     be2:	91 50       	subi	r25, 0x01	; 1
     be4:	50 40       	sbci	r21, 0x00	; 0
     be6:	e6 95       	lsr	r30
     be8:	00 1c       	adc	r0, r0
     bea:	ca f7       	brpl	.-14     	; 0xbde <__divsf3_pse+0x2c>
     bec:	2b d0       	rcall	.+86     	; 0xc44 <__divsf3_pse+0x92>
     bee:	fe 2f       	mov	r31, r30
     bf0:	29 d0       	rcall	.+82     	; 0xc44 <__divsf3_pse+0x92>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	88 1f       	adc	r24, r24
     bf8:	bb 1f       	adc	r27, r27
     bfa:	26 17       	cp	r18, r22
     bfc:	37 07       	cpc	r19, r23
     bfe:	48 07       	cpc	r20, r24
     c00:	ab 07       	cpc	r26, r27
     c02:	b0 e8       	ldi	r27, 0x80	; 128
     c04:	09 f0       	breq	.+2      	; 0xc08 <__divsf3_pse+0x56>
     c06:	bb 0b       	sbc	r27, r27
     c08:	80 2d       	mov	r24, r0
     c0a:	bf 01       	movw	r22, r30
     c0c:	ff 27       	eor	r31, r31
     c0e:	93 58       	subi	r25, 0x83	; 131
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	3a f0       	brmi	.+14     	; 0xc22 <__divsf3_pse+0x70>
     c14:	9e 3f       	cpi	r25, 0xFE	; 254
     c16:	51 05       	cpc	r21, r1
     c18:	78 f0       	brcs	.+30     	; 0xc38 <__divsf3_pse+0x86>
     c1a:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_inf>
     c1e:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_szero>
     c22:	5f 3f       	cpi	r21, 0xFF	; 255
     c24:	e4 f3       	brlt	.-8      	; 0xc1e <__divsf3_pse+0x6c>
     c26:	98 3e       	cpi	r25, 0xE8	; 232
     c28:	d4 f3       	brlt	.-12     	; 0xc1e <__divsf3_pse+0x6c>
     c2a:	86 95       	lsr	r24
     c2c:	77 95       	ror	r23
     c2e:	67 95       	ror	r22
     c30:	b7 95       	ror	r27
     c32:	f7 95       	ror	r31
     c34:	9f 5f       	subi	r25, 0xFF	; 255
     c36:	c9 f7       	brne	.-14     	; 0xc2a <__divsf3_pse+0x78>
     c38:	88 0f       	add	r24, r24
     c3a:	91 1d       	adc	r25, r1
     c3c:	96 95       	lsr	r25
     c3e:	87 95       	ror	r24
     c40:	97 f9       	bld	r25, 7
     c42:	08 95       	ret
     c44:	e1 e0       	ldi	r30, 0x01	; 1
     c46:	66 0f       	add	r22, r22
     c48:	77 1f       	adc	r23, r23
     c4a:	88 1f       	adc	r24, r24
     c4c:	bb 1f       	adc	r27, r27
     c4e:	62 17       	cp	r22, r18
     c50:	73 07       	cpc	r23, r19
     c52:	84 07       	cpc	r24, r20
     c54:	ba 07       	cpc	r27, r26
     c56:	20 f0       	brcs	.+8      	; 0xc60 <__divsf3_pse+0xae>
     c58:	62 1b       	sub	r22, r18
     c5a:	73 0b       	sbc	r23, r19
     c5c:	84 0b       	sbc	r24, r20
     c5e:	ba 0b       	sbc	r27, r26
     c60:	ee 1f       	adc	r30, r30
     c62:	88 f7       	brcc	.-30     	; 0xc46 <__divsf3_pse+0x94>
     c64:	e0 95       	com	r30
     c66:	08 95       	ret

00000c68 <__floatunsisf>:
     c68:	e8 94       	clt
     c6a:	09 c0       	rjmp	.+18     	; 0xc7e <__floatsisf+0x12>

00000c6c <__floatsisf>:
     c6c:	97 fb       	bst	r25, 7
     c6e:	3e f4       	brtc	.+14     	; 0xc7e <__floatsisf+0x12>
     c70:	90 95       	com	r25
     c72:	80 95       	com	r24
     c74:	70 95       	com	r23
     c76:	61 95       	neg	r22
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	8f 4f       	sbci	r24, 0xFF	; 255
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	99 23       	and	r25, r25
     c80:	a9 f0       	breq	.+42     	; 0xcac <__floatsisf+0x40>
     c82:	f9 2f       	mov	r31, r25
     c84:	96 e9       	ldi	r25, 0x96	; 150
     c86:	bb 27       	eor	r27, r27
     c88:	93 95       	inc	r25
     c8a:	f6 95       	lsr	r31
     c8c:	87 95       	ror	r24
     c8e:	77 95       	ror	r23
     c90:	67 95       	ror	r22
     c92:	b7 95       	ror	r27
     c94:	f1 11       	cpse	r31, r1
     c96:	f8 cf       	rjmp	.-16     	; 0xc88 <__floatsisf+0x1c>
     c98:	fa f4       	brpl	.+62     	; 0xcd8 <__floatsisf+0x6c>
     c9a:	bb 0f       	add	r27, r27
     c9c:	11 f4       	brne	.+4      	; 0xca2 <__floatsisf+0x36>
     c9e:	60 ff       	sbrs	r22, 0
     ca0:	1b c0       	rjmp	.+54     	; 0xcd8 <__floatsisf+0x6c>
     ca2:	6f 5f       	subi	r22, 0xFF	; 255
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	8f 4f       	sbci	r24, 0xFF	; 255
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	16 c0       	rjmp	.+44     	; 0xcd8 <__floatsisf+0x6c>
     cac:	88 23       	and	r24, r24
     cae:	11 f0       	breq	.+4      	; 0xcb4 <__floatsisf+0x48>
     cb0:	96 e9       	ldi	r25, 0x96	; 150
     cb2:	11 c0       	rjmp	.+34     	; 0xcd6 <__floatsisf+0x6a>
     cb4:	77 23       	and	r23, r23
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <__floatsisf+0x54>
     cb8:	9e e8       	ldi	r25, 0x8E	; 142
     cba:	87 2f       	mov	r24, r23
     cbc:	76 2f       	mov	r23, r22
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <__floatsisf+0x5e>
     cc0:	66 23       	and	r22, r22
     cc2:	71 f0       	breq	.+28     	; 0xce0 <__floatsisf+0x74>
     cc4:	96 e8       	ldi	r25, 0x86	; 134
     cc6:	86 2f       	mov	r24, r22
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	2a f0       	brmi	.+10     	; 0xcd8 <__floatsisf+0x6c>
     cce:	9a 95       	dec	r25
     cd0:	66 0f       	add	r22, r22
     cd2:	77 1f       	adc	r23, r23
     cd4:	88 1f       	adc	r24, r24
     cd6:	da f7       	brpl	.-10     	; 0xcce <__floatsisf+0x62>
     cd8:	88 0f       	add	r24, r24
     cda:	96 95       	lsr	r25
     cdc:	87 95       	ror	r24
     cde:	97 f9       	bld	r25, 7
     ce0:	08 95       	ret

00000ce2 <__fp_cmp>:
     ce2:	99 0f       	add	r25, r25
     ce4:	00 08       	sbc	r0, r0
     ce6:	55 0f       	add	r21, r21
     ce8:	aa 0b       	sbc	r26, r26
     cea:	e0 e8       	ldi	r30, 0x80	; 128
     cec:	fe ef       	ldi	r31, 0xFE	; 254
     cee:	16 16       	cp	r1, r22
     cf0:	17 06       	cpc	r1, r23
     cf2:	e8 07       	cpc	r30, r24
     cf4:	f9 07       	cpc	r31, r25
     cf6:	c0 f0       	brcs	.+48     	; 0xd28 <__fp_cmp+0x46>
     cf8:	12 16       	cp	r1, r18
     cfa:	13 06       	cpc	r1, r19
     cfc:	e4 07       	cpc	r30, r20
     cfe:	f5 07       	cpc	r31, r21
     d00:	98 f0       	brcs	.+38     	; 0xd28 <__fp_cmp+0x46>
     d02:	62 1b       	sub	r22, r18
     d04:	73 0b       	sbc	r23, r19
     d06:	84 0b       	sbc	r24, r20
     d08:	95 0b       	sbc	r25, r21
     d0a:	39 f4       	brne	.+14     	; 0xd1a <__fp_cmp+0x38>
     d0c:	0a 26       	eor	r0, r26
     d0e:	61 f0       	breq	.+24     	; 0xd28 <__fp_cmp+0x46>
     d10:	23 2b       	or	r18, r19
     d12:	24 2b       	or	r18, r20
     d14:	25 2b       	or	r18, r21
     d16:	21 f4       	brne	.+8      	; 0xd20 <__fp_cmp+0x3e>
     d18:	08 95       	ret
     d1a:	0a 26       	eor	r0, r26
     d1c:	09 f4       	brne	.+2      	; 0xd20 <__fp_cmp+0x3e>
     d1e:	a1 40       	sbci	r26, 0x01	; 1
     d20:	a6 95       	lsr	r26
     d22:	8f ef       	ldi	r24, 0xFF	; 255
     d24:	81 1d       	adc	r24, r1
     d26:	81 1d       	adc	r24, r1
     d28:	08 95       	ret

00000d2a <__fp_inf>:
     d2a:	97 f9       	bld	r25, 7
     d2c:	9f 67       	ori	r25, 0x7F	; 127
     d2e:	80 e8       	ldi	r24, 0x80	; 128
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	08 95       	ret

00000d36 <__fp_nan>:
     d36:	9f ef       	ldi	r25, 0xFF	; 255
     d38:	80 ec       	ldi	r24, 0xC0	; 192
     d3a:	08 95       	ret

00000d3c <__fp_powser>:
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	1f 93       	push	r17
     d42:	0f 93       	push	r16
     d44:	ff 92       	push	r15
     d46:	ef 92       	push	r14
     d48:	df 92       	push	r13
     d4a:	7b 01       	movw	r14, r22
     d4c:	8c 01       	movw	r16, r24
     d4e:	68 94       	set
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <__fp_powser+0x22>
     d52:	da 2e       	mov	r13, r26
     d54:	ef 01       	movw	r28, r30
     d56:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3x>
     d5a:	fe 01       	movw	r30, r28
     d5c:	e8 94       	clt
     d5e:	a5 91       	lpm	r26, Z+
     d60:	25 91       	lpm	r18, Z+
     d62:	35 91       	lpm	r19, Z+
     d64:	45 91       	lpm	r20, Z+
     d66:	55 91       	lpm	r21, Z+
     d68:	a6 f3       	brts	.-24     	; 0xd52 <__fp_powser+0x16>
     d6a:	ef 01       	movw	r28, r30
     d6c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__addsf3x>
     d70:	fe 01       	movw	r30, r28
     d72:	97 01       	movw	r18, r14
     d74:	a8 01       	movw	r20, r16
     d76:	da 94       	dec	r13
     d78:	69 f7       	brne	.-38     	; 0xd54 <__fp_powser+0x18>
     d7a:	df 90       	pop	r13
     d7c:	ef 90       	pop	r14
     d7e:	ff 90       	pop	r15
     d80:	0f 91       	pop	r16
     d82:	1f 91       	pop	r17
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <__fp_pscA>:
     d8a:	00 24       	eor	r0, r0
     d8c:	0a 94       	dec	r0
     d8e:	16 16       	cp	r1, r22
     d90:	17 06       	cpc	r1, r23
     d92:	18 06       	cpc	r1, r24
     d94:	09 06       	cpc	r0, r25
     d96:	08 95       	ret

00000d98 <__fp_pscB>:
     d98:	00 24       	eor	r0, r0
     d9a:	0a 94       	dec	r0
     d9c:	12 16       	cp	r1, r18
     d9e:	13 06       	cpc	r1, r19
     da0:	14 06       	cpc	r1, r20
     da2:	05 06       	cpc	r0, r21
     da4:	08 95       	ret

00000da6 <__fp_round>:
     da6:	09 2e       	mov	r0, r25
     da8:	03 94       	inc	r0
     daa:	00 0c       	add	r0, r0
     dac:	11 f4       	brne	.+4      	; 0xdb2 <__fp_round+0xc>
     dae:	88 23       	and	r24, r24
     db0:	52 f0       	brmi	.+20     	; 0xdc6 <__fp_round+0x20>
     db2:	bb 0f       	add	r27, r27
     db4:	40 f4       	brcc	.+16     	; 0xdc6 <__fp_round+0x20>
     db6:	bf 2b       	or	r27, r31
     db8:	11 f4       	brne	.+4      	; 0xdbe <__fp_round+0x18>
     dba:	60 ff       	sbrs	r22, 0
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <__fp_round+0x20>
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	08 95       	ret

00000dc8 <__fp_split3>:
     dc8:	57 fd       	sbrc	r21, 7
     dca:	90 58       	subi	r25, 0x80	; 128
     dcc:	44 0f       	add	r20, r20
     dce:	55 1f       	adc	r21, r21
     dd0:	59 f0       	breq	.+22     	; 0xde8 <__fp_splitA+0x10>
     dd2:	5f 3f       	cpi	r21, 0xFF	; 255
     dd4:	71 f0       	breq	.+28     	; 0xdf2 <__fp_splitA+0x1a>
     dd6:	47 95       	ror	r20

00000dd8 <__fp_splitA>:
     dd8:	88 0f       	add	r24, r24
     dda:	97 fb       	bst	r25, 7
     ddc:	99 1f       	adc	r25, r25
     dde:	61 f0       	breq	.+24     	; 0xdf8 <__fp_splitA+0x20>
     de0:	9f 3f       	cpi	r25, 0xFF	; 255
     de2:	79 f0       	breq	.+30     	; 0xe02 <__fp_splitA+0x2a>
     de4:	87 95       	ror	r24
     de6:	08 95       	ret
     de8:	12 16       	cp	r1, r18
     dea:	13 06       	cpc	r1, r19
     dec:	14 06       	cpc	r1, r20
     dee:	55 1f       	adc	r21, r21
     df0:	f2 cf       	rjmp	.-28     	; 0xdd6 <__fp_split3+0xe>
     df2:	46 95       	lsr	r20
     df4:	f1 df       	rcall	.-30     	; 0xdd8 <__fp_splitA>
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <__fp_splitA+0x30>
     df8:	16 16       	cp	r1, r22
     dfa:	17 06       	cpc	r1, r23
     dfc:	18 06       	cpc	r1, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	f1 cf       	rjmp	.-30     	; 0xde4 <__fp_splitA+0xc>
     e02:	86 95       	lsr	r24
     e04:	71 05       	cpc	r23, r1
     e06:	61 05       	cpc	r22, r1
     e08:	08 94       	sec
     e0a:	08 95       	ret

00000e0c <__fp_zero>:
     e0c:	e8 94       	clt

00000e0e <__fp_szero>:
     e0e:	bb 27       	eor	r27, r27
     e10:	66 27       	eor	r22, r22
     e12:	77 27       	eor	r23, r23
     e14:	cb 01       	movw	r24, r22
     e16:	97 f9       	bld	r25, 7
     e18:	08 95       	ret

00000e1a <__gesf2>:
     e1a:	0e 94 71 06 	call	0xce2	; 0xce2 <__fp_cmp>
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <__gesf2+0x8>
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	08 95       	ret

00000e24 <inverse>:
     e24:	9b 01       	movw	r18, r22
     e26:	ac 01       	movw	r20, r24
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 e8       	ldi	r24, 0x80	; 128
     e2e:	9f e3       	ldi	r25, 0x3F	; 63
     e30:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__divsf3>

00000e34 <__mulsf3>:
     e34:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3x>
     e38:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__fp_round>
     e3c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscA>
     e40:	38 f0       	brcs	.+14     	; 0xe50 <__mulsf3+0x1c>
     e42:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscB>
     e46:	20 f0       	brcs	.+8      	; 0xe50 <__mulsf3+0x1c>
     e48:	95 23       	and	r25, r21
     e4a:	11 f0       	breq	.+4      	; 0xe50 <__mulsf3+0x1c>
     e4c:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_inf>
     e50:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_nan>
     e54:	11 24       	eor	r1, r1
     e56:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_szero>

00000e5a <__mulsf3x>:
     e5a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_split3>
     e5e:	70 f3       	brcs	.-36     	; 0xe3c <__mulsf3+0x8>

00000e60 <__mulsf3_pse>:
     e60:	95 9f       	mul	r25, r21
     e62:	c1 f3       	breq	.-16     	; 0xe54 <__mulsf3+0x20>
     e64:	95 0f       	add	r25, r21
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	55 1f       	adc	r21, r21
     e6a:	62 9f       	mul	r22, r18
     e6c:	f0 01       	movw	r30, r0
     e6e:	72 9f       	mul	r23, r18
     e70:	bb 27       	eor	r27, r27
     e72:	f0 0d       	add	r31, r0
     e74:	b1 1d       	adc	r27, r1
     e76:	63 9f       	mul	r22, r19
     e78:	aa 27       	eor	r26, r26
     e7a:	f0 0d       	add	r31, r0
     e7c:	b1 1d       	adc	r27, r1
     e7e:	aa 1f       	adc	r26, r26
     e80:	64 9f       	mul	r22, r20
     e82:	66 27       	eor	r22, r22
     e84:	b0 0d       	add	r27, r0
     e86:	a1 1d       	adc	r26, r1
     e88:	66 1f       	adc	r22, r22
     e8a:	82 9f       	mul	r24, r18
     e8c:	22 27       	eor	r18, r18
     e8e:	b0 0d       	add	r27, r0
     e90:	a1 1d       	adc	r26, r1
     e92:	62 1f       	adc	r22, r18
     e94:	73 9f       	mul	r23, r19
     e96:	b0 0d       	add	r27, r0
     e98:	a1 1d       	adc	r26, r1
     e9a:	62 1f       	adc	r22, r18
     e9c:	83 9f       	mul	r24, r19
     e9e:	a0 0d       	add	r26, r0
     ea0:	61 1d       	adc	r22, r1
     ea2:	22 1f       	adc	r18, r18
     ea4:	74 9f       	mul	r23, r20
     ea6:	33 27       	eor	r19, r19
     ea8:	a0 0d       	add	r26, r0
     eaa:	61 1d       	adc	r22, r1
     eac:	23 1f       	adc	r18, r19
     eae:	84 9f       	mul	r24, r20
     eb0:	60 0d       	add	r22, r0
     eb2:	21 1d       	adc	r18, r1
     eb4:	82 2f       	mov	r24, r18
     eb6:	76 2f       	mov	r23, r22
     eb8:	6a 2f       	mov	r22, r26
     eba:	11 24       	eor	r1, r1
     ebc:	9f 57       	subi	r25, 0x7F	; 127
     ebe:	50 40       	sbci	r21, 0x00	; 0
     ec0:	9a f0       	brmi	.+38     	; 0xee8 <__mulsf3_pse+0x88>
     ec2:	f1 f0       	breq	.+60     	; 0xf00 <__mulsf3_pse+0xa0>
     ec4:	88 23       	and	r24, r24
     ec6:	4a f0       	brmi	.+18     	; 0xeda <__mulsf3_pse+0x7a>
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	bb 1f       	adc	r27, r27
     ece:	66 1f       	adc	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	91 50       	subi	r25, 0x01	; 1
     ed6:	50 40       	sbci	r21, 0x00	; 0
     ed8:	a9 f7       	brne	.-22     	; 0xec4 <__mulsf3_pse+0x64>
     eda:	9e 3f       	cpi	r25, 0xFE	; 254
     edc:	51 05       	cpc	r21, r1
     ede:	80 f0       	brcs	.+32     	; 0xf00 <__mulsf3_pse+0xa0>
     ee0:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_inf>
     ee4:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_szero>
     ee8:	5f 3f       	cpi	r21, 0xFF	; 255
     eea:	e4 f3       	brlt	.-8      	; 0xee4 <__mulsf3_pse+0x84>
     eec:	98 3e       	cpi	r25, 0xE8	; 232
     eee:	d4 f3       	brlt	.-12     	; 0xee4 <__mulsf3_pse+0x84>
     ef0:	86 95       	lsr	r24
     ef2:	77 95       	ror	r23
     ef4:	67 95       	ror	r22
     ef6:	b7 95       	ror	r27
     ef8:	f7 95       	ror	r31
     efa:	e7 95       	ror	r30
     efc:	9f 5f       	subi	r25, 0xFF	; 255
     efe:	c1 f7       	brne	.-16     	; 0xef0 <__mulsf3_pse+0x90>
     f00:	fe 2b       	or	r31, r30
     f02:	88 0f       	add	r24, r24
     f04:	91 1d       	adc	r25, r1
     f06:	96 95       	lsr	r25
     f08:	87 95       	ror	r24
     f0a:	97 f9       	bld	r25, 7
     f0c:	08 95       	ret

00000f0e <square>:
     f0e:	9b 01       	movw	r18, r22
     f10:	ac 01       	movw	r20, r24
     f12:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__mulsf3>

00000f16 <snprintf>:
     f16:	ae e0       	ldi	r26, 0x0E	; 14
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e1 e9       	ldi	r30, 0x91	; 145
     f1c:	f7 e0       	ldi	r31, 0x07	; 7
     f1e:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__prologue_saves__+0x1c>
     f22:	0d 89       	ldd	r16, Y+21	; 0x15
     f24:	1e 89       	ldd	r17, Y+22	; 0x16
     f26:	8f 89       	ldd	r24, Y+23	; 0x17
     f28:	98 8d       	ldd	r25, Y+24	; 0x18
     f2a:	26 e0       	ldi	r18, 0x06	; 6
     f2c:	2c 83       	std	Y+4, r18	; 0x04
     f2e:	1a 83       	std	Y+2, r17	; 0x02
     f30:	09 83       	std	Y+1, r16	; 0x01
     f32:	97 ff       	sbrs	r25, 7
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <snprintf+0x24>
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e8       	ldi	r25, 0x80	; 128
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	9e 83       	std	Y+6, r25	; 0x06
     f3e:	8d 83       	std	Y+5, r24	; 0x05
     f40:	ae 01       	movw	r20, r28
     f42:	45 5e       	subi	r20, 0xE5	; 229
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	69 8d       	ldd	r22, Y+25	; 0x19
     f48:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	0e 94 bb 07 	call	0xf76	; 0xf76 <vfprintf>
     f52:	4d 81       	ldd	r20, Y+5	; 0x05
     f54:	5e 81       	ldd	r21, Y+6	; 0x06
     f56:	57 fd       	sbrc	r21, 7
     f58:	0a c0       	rjmp	.+20     	; 0xf6e <snprintf+0x58>
     f5a:	2f 81       	ldd	r18, Y+7	; 0x07
     f5c:	38 85       	ldd	r19, Y+8	; 0x08
     f5e:	42 17       	cp	r20, r18
     f60:	53 07       	cpc	r21, r19
     f62:	0c f4       	brge	.+2      	; 0xf66 <snprintf+0x50>
     f64:	9a 01       	movw	r18, r20
     f66:	f8 01       	movw	r30, r16
     f68:	e2 0f       	add	r30, r18
     f6a:	f3 1f       	adc	r31, r19
     f6c:	10 82       	st	Z, r1
     f6e:	2e 96       	adiw	r28, 0x0e	; 14
     f70:	e4 e0       	ldi	r30, 0x04	; 4
     f72:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__epilogue_restores__+0x1c>

00000f76 <vfprintf>:
     f76:	ac e0       	ldi	r26, 0x0C	; 12
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e1 ec       	ldi	r30, 0xC1	; 193
     f7c:	f7 e0       	ldi	r31, 0x07	; 7
     f7e:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__prologue_saves__>
     f82:	7c 01       	movw	r14, r24
     f84:	6b 01       	movw	r12, r22
     f86:	8a 01       	movw	r16, r20
     f88:	fc 01       	movw	r30, r24
     f8a:	17 82       	std	Z+7, r1	; 0x07
     f8c:	16 82       	std	Z+6, r1	; 0x06
     f8e:	83 81       	ldd	r24, Z+3	; 0x03
     f90:	81 ff       	sbrs	r24, 1
     f92:	bd c1       	rjmp	.+890    	; 0x130e <vfprintf+0x398>
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	4c 01       	movw	r8, r24
     f9a:	f7 01       	movw	r30, r14
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	f6 01       	movw	r30, r12
     fa0:	93 fd       	sbrc	r25, 3
     fa2:	85 91       	lpm	r24, Z+
     fa4:	93 ff       	sbrs	r25, 3
     fa6:	81 91       	ld	r24, Z+
     fa8:	6f 01       	movw	r12, r30
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <vfprintf+0x3a>
     fae:	ab c1       	rjmp	.+854    	; 0x1306 <vfprintf+0x390>
     fb0:	85 32       	cpi	r24, 0x25	; 37
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <vfprintf+0x4c>
     fb4:	93 fd       	sbrc	r25, 3
     fb6:	85 91       	lpm	r24, Z+
     fb8:	93 ff       	sbrs	r25, 3
     fba:	81 91       	ld	r24, Z+
     fbc:	6f 01       	movw	r12, r30
     fbe:	85 32       	cpi	r24, 0x25	; 37
     fc0:	29 f4       	brne	.+10     	; 0xfcc <vfprintf+0x56>
     fc2:	b7 01       	movw	r22, r14
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
     fca:	e7 cf       	rjmp	.-50     	; 0xf9a <vfprintf+0x24>
     fcc:	51 2c       	mov	r5, r1
     fce:	31 2c       	mov	r3, r1
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	20 32       	cpi	r18, 0x20	; 32
     fd4:	a0 f4       	brcc	.+40     	; 0xffe <vfprintf+0x88>
     fd6:	8b 32       	cpi	r24, 0x2B	; 43
     fd8:	69 f0       	breq	.+26     	; 0xff4 <vfprintf+0x7e>
     fda:	30 f4       	brcc	.+12     	; 0xfe8 <vfprintf+0x72>
     fdc:	80 32       	cpi	r24, 0x20	; 32
     fde:	59 f0       	breq	.+22     	; 0xff6 <vfprintf+0x80>
     fe0:	83 32       	cpi	r24, 0x23	; 35
     fe2:	69 f4       	brne	.+26     	; 0xffe <vfprintf+0x88>
     fe4:	20 61       	ori	r18, 0x10	; 16
     fe6:	2c c0       	rjmp	.+88     	; 0x1040 <vfprintf+0xca>
     fe8:	8d 32       	cpi	r24, 0x2D	; 45
     fea:	39 f0       	breq	.+14     	; 0xffa <vfprintf+0x84>
     fec:	80 33       	cpi	r24, 0x30	; 48
     fee:	39 f4       	brne	.+14     	; 0xffe <vfprintf+0x88>
     ff0:	21 60       	ori	r18, 0x01	; 1
     ff2:	26 c0       	rjmp	.+76     	; 0x1040 <vfprintf+0xca>
     ff4:	22 60       	ori	r18, 0x02	; 2
     ff6:	24 60       	ori	r18, 0x04	; 4
     ff8:	23 c0       	rjmp	.+70     	; 0x1040 <vfprintf+0xca>
     ffa:	28 60       	ori	r18, 0x08	; 8
     ffc:	21 c0       	rjmp	.+66     	; 0x1040 <vfprintf+0xca>
     ffe:	27 fd       	sbrc	r18, 7
    1000:	27 c0       	rjmp	.+78     	; 0x1050 <vfprintf+0xda>
    1002:	30 ed       	ldi	r19, 0xD0	; 208
    1004:	38 0f       	add	r19, r24
    1006:	3a 30       	cpi	r19, 0x0A	; 10
    1008:	78 f4       	brcc	.+30     	; 0x1028 <vfprintf+0xb2>
    100a:	26 ff       	sbrs	r18, 6
    100c:	06 c0       	rjmp	.+12     	; 0x101a <vfprintf+0xa4>
    100e:	fa e0       	ldi	r31, 0x0A	; 10
    1010:	5f 9e       	mul	r5, r31
    1012:	30 0d       	add	r19, r0
    1014:	11 24       	eor	r1, r1
    1016:	53 2e       	mov	r5, r19
    1018:	13 c0       	rjmp	.+38     	; 0x1040 <vfprintf+0xca>
    101a:	8a e0       	ldi	r24, 0x0A	; 10
    101c:	38 9e       	mul	r3, r24
    101e:	30 0d       	add	r19, r0
    1020:	11 24       	eor	r1, r1
    1022:	33 2e       	mov	r3, r19
    1024:	20 62       	ori	r18, 0x20	; 32
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <vfprintf+0xca>
    1028:	8e 32       	cpi	r24, 0x2E	; 46
    102a:	21 f4       	brne	.+8      	; 0x1034 <vfprintf+0xbe>
    102c:	26 fd       	sbrc	r18, 6
    102e:	6b c1       	rjmp	.+726    	; 0x1306 <vfprintf+0x390>
    1030:	20 64       	ori	r18, 0x40	; 64
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <vfprintf+0xca>
    1034:	8c 36       	cpi	r24, 0x6C	; 108
    1036:	11 f4       	brne	.+4      	; 0x103c <vfprintf+0xc6>
    1038:	20 68       	ori	r18, 0x80	; 128
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <vfprintf+0xca>
    103c:	88 36       	cpi	r24, 0x68	; 104
    103e:	41 f4       	brne	.+16     	; 0x1050 <vfprintf+0xda>
    1040:	f6 01       	movw	r30, r12
    1042:	93 fd       	sbrc	r25, 3
    1044:	85 91       	lpm	r24, Z+
    1046:	93 ff       	sbrs	r25, 3
    1048:	81 91       	ld	r24, Z+
    104a:	6f 01       	movw	r12, r30
    104c:	81 11       	cpse	r24, r1
    104e:	c1 cf       	rjmp	.-126    	; 0xfd2 <vfprintf+0x5c>
    1050:	98 2f       	mov	r25, r24
    1052:	9f 7d       	andi	r25, 0xDF	; 223
    1054:	95 54       	subi	r25, 0x45	; 69
    1056:	93 30       	cpi	r25, 0x03	; 3
    1058:	28 f4       	brcc	.+10     	; 0x1064 <vfprintf+0xee>
    105a:	0c 5f       	subi	r16, 0xFC	; 252
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	ff e3       	ldi	r31, 0x3F	; 63
    1060:	f9 83       	std	Y+1, r31	; 0x01
    1062:	0d c0       	rjmp	.+26     	; 0x107e <vfprintf+0x108>
    1064:	83 36       	cpi	r24, 0x63	; 99
    1066:	31 f0       	breq	.+12     	; 0x1074 <vfprintf+0xfe>
    1068:	83 37       	cpi	r24, 0x73	; 115
    106a:	71 f0       	breq	.+28     	; 0x1088 <vfprintf+0x112>
    106c:	83 35       	cpi	r24, 0x53	; 83
    106e:	09 f0       	breq	.+2      	; 0x1072 <vfprintf+0xfc>
    1070:	5b c0       	rjmp	.+182    	; 0x1128 <vfprintf+0x1b2>
    1072:	22 c0       	rjmp	.+68     	; 0x10b8 <vfprintf+0x142>
    1074:	f8 01       	movw	r30, r16
    1076:	80 81       	ld	r24, Z
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	0e 5f       	subi	r16, 0xFE	; 254
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	44 24       	eor	r4, r4
    1080:	43 94       	inc	r4
    1082:	51 2c       	mov	r5, r1
    1084:	54 01       	movw	r10, r8
    1086:	15 c0       	rjmp	.+42     	; 0x10b2 <vfprintf+0x13c>
    1088:	38 01       	movw	r6, r16
    108a:	f2 e0       	ldi	r31, 0x02	; 2
    108c:	6f 0e       	add	r6, r31
    108e:	71 1c       	adc	r7, r1
    1090:	f8 01       	movw	r30, r16
    1092:	a0 80       	ld	r10, Z
    1094:	b1 80       	ldd	r11, Z+1	; 0x01
    1096:	26 ff       	sbrs	r18, 6
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <vfprintf+0x12a>
    109a:	65 2d       	mov	r22, r5
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x12e>
    10a0:	6f ef       	ldi	r22, 0xFF	; 255
    10a2:	7f ef       	ldi	r23, 0xFF	; 255
    10a4:	c5 01       	movw	r24, r10
    10a6:	2c 87       	std	Y+12, r18	; 0x0c
    10a8:	0e 94 98 09 	call	0x1330	; 0x1330 <strnlen>
    10ac:	2c 01       	movw	r4, r24
    10ae:	83 01       	movw	r16, r6
    10b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b2:	2f 77       	andi	r18, 0x7F	; 127
    10b4:	22 2e       	mov	r2, r18
    10b6:	17 c0       	rjmp	.+46     	; 0x10e6 <vfprintf+0x170>
    10b8:	38 01       	movw	r6, r16
    10ba:	f2 e0       	ldi	r31, 0x02	; 2
    10bc:	6f 0e       	add	r6, r31
    10be:	71 1c       	adc	r7, r1
    10c0:	f8 01       	movw	r30, r16
    10c2:	a0 80       	ld	r10, Z
    10c4:	b1 80       	ldd	r11, Z+1	; 0x01
    10c6:	26 ff       	sbrs	r18, 6
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <vfprintf+0x15a>
    10ca:	65 2d       	mov	r22, r5
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfprintf+0x15e>
    10d0:	6f ef       	ldi	r22, 0xFF	; 255
    10d2:	7f ef       	ldi	r23, 0xFF	; 255
    10d4:	c5 01       	movw	r24, r10
    10d6:	2c 87       	std	Y+12, r18	; 0x0c
    10d8:	0e 94 8d 09 	call	0x131a	; 0x131a <strnlen_P>
    10dc:	2c 01       	movw	r4, r24
    10de:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e0:	20 68       	ori	r18, 0x80	; 128
    10e2:	22 2e       	mov	r2, r18
    10e4:	83 01       	movw	r16, r6
    10e6:	23 fc       	sbrc	r2, 3
    10e8:	1b c0       	rjmp	.+54     	; 0x1120 <vfprintf+0x1aa>
    10ea:	83 2d       	mov	r24, r3
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	48 16       	cp	r4, r24
    10f0:	59 06       	cpc	r5, r25
    10f2:	b0 f4       	brcc	.+44     	; 0x1120 <vfprintf+0x1aa>
    10f4:	b7 01       	movw	r22, r14
    10f6:	80 e2       	ldi	r24, 0x20	; 32
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    10fe:	3a 94       	dec	r3
    1100:	f4 cf       	rjmp	.-24     	; 0x10ea <vfprintf+0x174>
    1102:	f5 01       	movw	r30, r10
    1104:	27 fc       	sbrc	r2, 7
    1106:	85 91       	lpm	r24, Z+
    1108:	27 fe       	sbrs	r2, 7
    110a:	81 91       	ld	r24, Z+
    110c:	5f 01       	movw	r10, r30
    110e:	b7 01       	movw	r22, r14
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1116:	31 10       	cpse	r3, r1
    1118:	3a 94       	dec	r3
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	4f 1a       	sub	r4, r31
    111e:	51 08       	sbc	r5, r1
    1120:	41 14       	cp	r4, r1
    1122:	51 04       	cpc	r5, r1
    1124:	71 f7       	brne	.-36     	; 0x1102 <vfprintf+0x18c>
    1126:	e5 c0       	rjmp	.+458    	; 0x12f2 <vfprintf+0x37c>
    1128:	84 36       	cpi	r24, 0x64	; 100
    112a:	11 f0       	breq	.+4      	; 0x1130 <vfprintf+0x1ba>
    112c:	89 36       	cpi	r24, 0x69	; 105
    112e:	39 f5       	brne	.+78     	; 0x117e <vfprintf+0x208>
    1130:	f8 01       	movw	r30, r16
    1132:	27 ff       	sbrs	r18, 7
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <vfprintf+0x1ce>
    1136:	60 81       	ld	r22, Z
    1138:	71 81       	ldd	r23, Z+1	; 0x01
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	0c 5f       	subi	r16, 0xFC	; 252
    1140:	1f 4f       	sbci	r17, 0xFF	; 255
    1142:	08 c0       	rjmp	.+16     	; 0x1154 <vfprintf+0x1de>
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	07 2e       	mov	r0, r23
    114a:	00 0c       	add	r0, r0
    114c:	88 0b       	sbc	r24, r24
    114e:	99 0b       	sbc	r25, r25
    1150:	0e 5f       	subi	r16, 0xFE	; 254
    1152:	1f 4f       	sbci	r17, 0xFF	; 255
    1154:	2f 76       	andi	r18, 0x6F	; 111
    1156:	72 2e       	mov	r7, r18
    1158:	97 ff       	sbrs	r25, 7
    115a:	09 c0       	rjmp	.+18     	; 0x116e <vfprintf+0x1f8>
    115c:	90 95       	com	r25
    115e:	80 95       	com	r24
    1160:	70 95       	com	r23
    1162:	61 95       	neg	r22
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	20 68       	ori	r18, 0x80	; 128
    116c:	72 2e       	mov	r7, r18
    116e:	2a e0       	ldi	r18, 0x0A	; 10
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	a4 01       	movw	r20, r8
    1174:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__ultoa_invert>
    1178:	a8 2e       	mov	r10, r24
    117a:	a8 18       	sub	r10, r8
    117c:	44 c0       	rjmp	.+136    	; 0x1206 <vfprintf+0x290>
    117e:	85 37       	cpi	r24, 0x75	; 117
    1180:	29 f4       	brne	.+10     	; 0x118c <vfprintf+0x216>
    1182:	2f 7e       	andi	r18, 0xEF	; 239
    1184:	b2 2e       	mov	r11, r18
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	25 c0       	rjmp	.+74     	; 0x11d6 <vfprintf+0x260>
    118c:	f2 2f       	mov	r31, r18
    118e:	f9 7f       	andi	r31, 0xF9	; 249
    1190:	bf 2e       	mov	r11, r31
    1192:	8f 36       	cpi	r24, 0x6F	; 111
    1194:	c1 f0       	breq	.+48     	; 0x11c6 <vfprintf+0x250>
    1196:	18 f4       	brcc	.+6      	; 0x119e <vfprintf+0x228>
    1198:	88 35       	cpi	r24, 0x58	; 88
    119a:	79 f0       	breq	.+30     	; 0x11ba <vfprintf+0x244>
    119c:	b4 c0       	rjmp	.+360    	; 0x1306 <vfprintf+0x390>
    119e:	80 37       	cpi	r24, 0x70	; 112
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <vfprintf+0x232>
    11a2:	88 37       	cpi	r24, 0x78	; 120
    11a4:	21 f0       	breq	.+8      	; 0x11ae <vfprintf+0x238>
    11a6:	af c0       	rjmp	.+350    	; 0x1306 <vfprintf+0x390>
    11a8:	2f 2f       	mov	r18, r31
    11aa:	20 61       	ori	r18, 0x10	; 16
    11ac:	b2 2e       	mov	r11, r18
    11ae:	b4 fe       	sbrs	r11, 4
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <vfprintf+0x256>
    11b2:	8b 2d       	mov	r24, r11
    11b4:	84 60       	ori	r24, 0x04	; 4
    11b6:	b8 2e       	mov	r11, r24
    11b8:	09 c0       	rjmp	.+18     	; 0x11cc <vfprintf+0x256>
    11ba:	24 ff       	sbrs	r18, 4
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <vfprintf+0x25c>
    11be:	9f 2f       	mov	r25, r31
    11c0:	96 60       	ori	r25, 0x06	; 6
    11c2:	b9 2e       	mov	r11, r25
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <vfprintf+0x25c>
    11c6:	28 e0       	ldi	r18, 0x08	; 8
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <vfprintf+0x260>
    11cc:	20 e1       	ldi	r18, 0x10	; 16
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <vfprintf+0x260>
    11d2:	20 e1       	ldi	r18, 0x10	; 16
    11d4:	32 e0       	ldi	r19, 0x02	; 2
    11d6:	f8 01       	movw	r30, r16
    11d8:	b7 fe       	sbrs	r11, 7
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <vfprintf+0x274>
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	0c 5f       	subi	r16, 0xFC	; 252
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <vfprintf+0x280>
    11ea:	60 81       	ld	r22, Z
    11ec:	71 81       	ldd	r23, Z+1	; 0x01
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 5f       	subi	r16, 0xFE	; 254
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	a4 01       	movw	r20, r8
    11f8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__ultoa_invert>
    11fc:	a8 2e       	mov	r10, r24
    11fe:	a8 18       	sub	r10, r8
    1200:	fb 2d       	mov	r31, r11
    1202:	ff 77       	andi	r31, 0x7F	; 127
    1204:	7f 2e       	mov	r7, r31
    1206:	76 fe       	sbrs	r7, 6
    1208:	0b c0       	rjmp	.+22     	; 0x1220 <vfprintf+0x2aa>
    120a:	37 2d       	mov	r19, r7
    120c:	3e 7f       	andi	r19, 0xFE	; 254
    120e:	a5 14       	cp	r10, r5
    1210:	50 f4       	brcc	.+20     	; 0x1226 <vfprintf+0x2b0>
    1212:	74 fe       	sbrs	r7, 4
    1214:	0a c0       	rjmp	.+20     	; 0x122a <vfprintf+0x2b4>
    1216:	72 fc       	sbrc	r7, 2
    1218:	08 c0       	rjmp	.+16     	; 0x122a <vfprintf+0x2b4>
    121a:	37 2d       	mov	r19, r7
    121c:	3e 7e       	andi	r19, 0xEE	; 238
    121e:	05 c0       	rjmp	.+10     	; 0x122a <vfprintf+0x2b4>
    1220:	ba 2c       	mov	r11, r10
    1222:	37 2d       	mov	r19, r7
    1224:	03 c0       	rjmp	.+6      	; 0x122c <vfprintf+0x2b6>
    1226:	ba 2c       	mov	r11, r10
    1228:	01 c0       	rjmp	.+2      	; 0x122c <vfprintf+0x2b6>
    122a:	b5 2c       	mov	r11, r5
    122c:	34 ff       	sbrs	r19, 4
    122e:	0d c0       	rjmp	.+26     	; 0x124a <vfprintf+0x2d4>
    1230:	fe 01       	movw	r30, r28
    1232:	ea 0d       	add	r30, r10
    1234:	f1 1d       	adc	r31, r1
    1236:	80 81       	ld	r24, Z
    1238:	80 33       	cpi	r24, 0x30	; 48
    123a:	11 f4       	brne	.+4      	; 0x1240 <vfprintf+0x2ca>
    123c:	39 7e       	andi	r19, 0xE9	; 233
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <vfprintf+0x2dc>
    1240:	32 ff       	sbrs	r19, 2
    1242:	06 c0       	rjmp	.+12     	; 0x1250 <vfprintf+0x2da>
    1244:	b3 94       	inc	r11
    1246:	b3 94       	inc	r11
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <vfprintf+0x2dc>
    124a:	83 2f       	mov	r24, r19
    124c:	86 78       	andi	r24, 0x86	; 134
    124e:	09 f0       	breq	.+2      	; 0x1252 <vfprintf+0x2dc>
    1250:	b3 94       	inc	r11
    1252:	33 fd       	sbrc	r19, 3
    1254:	13 c0       	rjmp	.+38     	; 0x127c <vfprintf+0x306>
    1256:	30 ff       	sbrs	r19, 0
    1258:	06 c0       	rjmp	.+12     	; 0x1266 <vfprintf+0x2f0>
    125a:	5a 2c       	mov	r5, r10
    125c:	b3 14       	cp	r11, r3
    125e:	18 f4       	brcc	.+6      	; 0x1266 <vfprintf+0x2f0>
    1260:	53 0c       	add	r5, r3
    1262:	5b 18       	sub	r5, r11
    1264:	b3 2c       	mov	r11, r3
    1266:	b3 14       	cp	r11, r3
    1268:	68 f4       	brcc	.+26     	; 0x1284 <vfprintf+0x30e>
    126a:	b7 01       	movw	r22, r14
    126c:	80 e2       	ldi	r24, 0x20	; 32
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	3c 87       	std	Y+12, r19	; 0x0c
    1272:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1276:	b3 94       	inc	r11
    1278:	3c 85       	ldd	r19, Y+12	; 0x0c
    127a:	f5 cf       	rjmp	.-22     	; 0x1266 <vfprintf+0x2f0>
    127c:	b3 14       	cp	r11, r3
    127e:	10 f4       	brcc	.+4      	; 0x1284 <vfprintf+0x30e>
    1280:	3b 18       	sub	r3, r11
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <vfprintf+0x310>
    1284:	31 2c       	mov	r3, r1
    1286:	34 ff       	sbrs	r19, 4
    1288:	12 c0       	rjmp	.+36     	; 0x12ae <vfprintf+0x338>
    128a:	b7 01       	movw	r22, r14
    128c:	80 e3       	ldi	r24, 0x30	; 48
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	3c 87       	std	Y+12, r19	; 0x0c
    1292:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1296:	3c 85       	ldd	r19, Y+12	; 0x0c
    1298:	32 ff       	sbrs	r19, 2
    129a:	17 c0       	rjmp	.+46     	; 0x12ca <vfprintf+0x354>
    129c:	31 fd       	sbrc	r19, 1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <vfprintf+0x330>
    12a0:	88 e7       	ldi	r24, 0x78	; 120
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <vfprintf+0x334>
    12a6:	88 e5       	ldi	r24, 0x58	; 88
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	b7 01       	movw	r22, r14
    12ac:	0c c0       	rjmp	.+24     	; 0x12c6 <vfprintf+0x350>
    12ae:	83 2f       	mov	r24, r19
    12b0:	86 78       	andi	r24, 0x86	; 134
    12b2:	59 f0       	breq	.+22     	; 0x12ca <vfprintf+0x354>
    12b4:	31 ff       	sbrs	r19, 1
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vfprintf+0x346>
    12b8:	8b e2       	ldi	r24, 0x2B	; 43
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <vfprintf+0x348>
    12bc:	80 e2       	ldi	r24, 0x20	; 32
    12be:	37 fd       	sbrc	r19, 7
    12c0:	8d e2       	ldi	r24, 0x2D	; 45
    12c2:	b7 01       	movw	r22, r14
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    12ca:	a5 14       	cp	r10, r5
    12cc:	38 f4       	brcc	.+14     	; 0x12dc <vfprintf+0x366>
    12ce:	b7 01       	movw	r22, r14
    12d0:	80 e3       	ldi	r24, 0x30	; 48
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    12d8:	5a 94       	dec	r5
    12da:	f7 cf       	rjmp	.-18     	; 0x12ca <vfprintf+0x354>
    12dc:	aa 94       	dec	r10
    12de:	f4 01       	movw	r30, r8
    12e0:	ea 0d       	add	r30, r10
    12e2:	f1 1d       	adc	r31, r1
    12e4:	80 81       	ld	r24, Z
    12e6:	b7 01       	movw	r22, r14
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    12ee:	a1 10       	cpse	r10, r1
    12f0:	f5 cf       	rjmp	.-22     	; 0x12dc <vfprintf+0x366>
    12f2:	33 20       	and	r3, r3
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <vfprintf+0x382>
    12f6:	51 ce       	rjmp	.-862    	; 0xf9a <vfprintf+0x24>
    12f8:	b7 01       	movw	r22, r14
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1302:	3a 94       	dec	r3
    1304:	f6 cf       	rjmp	.-20     	; 0x12f2 <vfprintf+0x37c>
    1306:	f7 01       	movw	r30, r14
    1308:	86 81       	ldd	r24, Z+6	; 0x06
    130a:	97 81       	ldd	r25, Z+7	; 0x07
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <vfprintf+0x39c>
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	2c 96       	adiw	r28, 0x0c	; 12
    1314:	e2 e1       	ldi	r30, 0x12	; 18
    1316:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__epilogue_restores__>

0000131a <strnlen_P>:
    131a:	fc 01       	movw	r30, r24
    131c:	05 90       	lpm	r0, Z+
    131e:	61 50       	subi	r22, 0x01	; 1
    1320:	70 40       	sbci	r23, 0x00	; 0
    1322:	01 10       	cpse	r0, r1
    1324:	d8 f7       	brcc	.-10     	; 0x131c <strnlen_P+0x2>
    1326:	80 95       	com	r24
    1328:	90 95       	com	r25
    132a:	8e 0f       	add	r24, r30
    132c:	9f 1f       	adc	r25, r31
    132e:	08 95       	ret

00001330 <strnlen>:
    1330:	fc 01       	movw	r30, r24
    1332:	61 50       	subi	r22, 0x01	; 1
    1334:	70 40       	sbci	r23, 0x00	; 0
    1336:	01 90       	ld	r0, Z+
    1338:	01 10       	cpse	r0, r1
    133a:	d8 f7       	brcc	.-10     	; 0x1332 <strnlen+0x2>
    133c:	80 95       	com	r24
    133e:	90 95       	com	r25
    1340:	8e 0f       	add	r24, r30
    1342:	9f 1f       	adc	r25, r31
    1344:	08 95       	ret

00001346 <fputc>:
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	fb 01       	movw	r30, r22
    1350:	23 81       	ldd	r18, Z+3	; 0x03
    1352:	21 fd       	sbrc	r18, 1
    1354:	03 c0       	rjmp	.+6      	; 0x135c <fputc+0x16>
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    135a:	28 c0       	rjmp	.+80     	; 0x13ac <fputc+0x66>
    135c:	22 ff       	sbrs	r18, 2
    135e:	16 c0       	rjmp	.+44     	; 0x138c <fputc+0x46>
    1360:	46 81       	ldd	r20, Z+6	; 0x06
    1362:	57 81       	ldd	r21, Z+7	; 0x07
    1364:	24 81       	ldd	r18, Z+4	; 0x04
    1366:	35 81       	ldd	r19, Z+5	; 0x05
    1368:	42 17       	cp	r20, r18
    136a:	53 07       	cpc	r21, r19
    136c:	44 f4       	brge	.+16     	; 0x137e <fputc+0x38>
    136e:	a0 81       	ld	r26, Z
    1370:	b1 81       	ldd	r27, Z+1	; 0x01
    1372:	9d 01       	movw	r18, r26
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	31 83       	std	Z+1, r19	; 0x01
    137a:	20 83       	st	Z, r18
    137c:	8c 93       	st	X, r24
    137e:	26 81       	ldd	r18, Z+6	; 0x06
    1380:	37 81       	ldd	r19, Z+7	; 0x07
    1382:	2f 5f       	subi	r18, 0xFF	; 255
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
    1386:	37 83       	std	Z+7, r19	; 0x07
    1388:	26 83       	std	Z+6, r18	; 0x06
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <fputc+0x66>
    138c:	eb 01       	movw	r28, r22
    138e:	09 2f       	mov	r16, r25
    1390:	18 2f       	mov	r17, r24
    1392:	00 84       	ldd	r0, Z+8	; 0x08
    1394:	f1 85       	ldd	r31, Z+9	; 0x09
    1396:	e0 2d       	mov	r30, r0
    1398:	09 95       	icall
    139a:	89 2b       	or	r24, r25
    139c:	e1 f6       	brne	.-72     	; 0x1356 <fputc+0x10>
    139e:	8e 81       	ldd	r24, Y+6	; 0x06
    13a0:	9f 81       	ldd	r25, Y+7	; 0x07
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	9f 83       	std	Y+7, r25	; 0x07
    13a6:	8e 83       	std	Y+6, r24	; 0x06
    13a8:	81 2f       	mov	r24, r17
    13aa:	90 2f       	mov	r25, r16
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <__ultoa_invert>:
    13b6:	fa 01       	movw	r30, r20
    13b8:	aa 27       	eor	r26, r26
    13ba:	28 30       	cpi	r18, 0x08	; 8
    13bc:	51 f1       	breq	.+84     	; 0x1412 <__ultoa_invert+0x5c>
    13be:	20 31       	cpi	r18, 0x10	; 16
    13c0:	81 f1       	breq	.+96     	; 0x1422 <__ultoa_invert+0x6c>
    13c2:	e8 94       	clt
    13c4:	6f 93       	push	r22
    13c6:	6e 7f       	andi	r22, 0xFE	; 254
    13c8:	6e 5f       	subi	r22, 0xFE	; 254
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	af 4f       	sbci	r26, 0xFF	; 255
    13d2:	b1 e0       	ldi	r27, 0x01	; 1
    13d4:	3e d0       	rcall	.+124    	; 0x1452 <__ultoa_invert+0x9c>
    13d6:	b4 e0       	ldi	r27, 0x04	; 4
    13d8:	3c d0       	rcall	.+120    	; 0x1452 <__ultoa_invert+0x9c>
    13da:	67 0f       	add	r22, r23
    13dc:	78 1f       	adc	r23, r24
    13de:	89 1f       	adc	r24, r25
    13e0:	9a 1f       	adc	r25, r26
    13e2:	a1 1d       	adc	r26, r1
    13e4:	68 0f       	add	r22, r24
    13e6:	79 1f       	adc	r23, r25
    13e8:	8a 1f       	adc	r24, r26
    13ea:	91 1d       	adc	r25, r1
    13ec:	a1 1d       	adc	r26, r1
    13ee:	6a 0f       	add	r22, r26
    13f0:	71 1d       	adc	r23, r1
    13f2:	81 1d       	adc	r24, r1
    13f4:	91 1d       	adc	r25, r1
    13f6:	a1 1d       	adc	r26, r1
    13f8:	20 d0       	rcall	.+64     	; 0x143a <__ultoa_invert+0x84>
    13fa:	09 f4       	brne	.+2      	; 0x13fe <__ultoa_invert+0x48>
    13fc:	68 94       	set
    13fe:	3f 91       	pop	r19
    1400:	2a e0       	ldi	r18, 0x0A	; 10
    1402:	26 9f       	mul	r18, r22
    1404:	11 24       	eor	r1, r1
    1406:	30 19       	sub	r19, r0
    1408:	30 5d       	subi	r19, 0xD0	; 208
    140a:	31 93       	st	Z+, r19
    140c:	de f6       	brtc	.-74     	; 0x13c4 <__ultoa_invert+0xe>
    140e:	cf 01       	movw	r24, r30
    1410:	08 95       	ret
    1412:	46 2f       	mov	r20, r22
    1414:	47 70       	andi	r20, 0x07	; 7
    1416:	40 5d       	subi	r20, 0xD0	; 208
    1418:	41 93       	st	Z+, r20
    141a:	b3 e0       	ldi	r27, 0x03	; 3
    141c:	0f d0       	rcall	.+30     	; 0x143c <__ultoa_invert+0x86>
    141e:	c9 f7       	brne	.-14     	; 0x1412 <__ultoa_invert+0x5c>
    1420:	f6 cf       	rjmp	.-20     	; 0x140e <__ultoa_invert+0x58>
    1422:	46 2f       	mov	r20, r22
    1424:	4f 70       	andi	r20, 0x0F	; 15
    1426:	40 5d       	subi	r20, 0xD0	; 208
    1428:	4a 33       	cpi	r20, 0x3A	; 58
    142a:	18 f0       	brcs	.+6      	; 0x1432 <__ultoa_invert+0x7c>
    142c:	49 5d       	subi	r20, 0xD9	; 217
    142e:	31 fd       	sbrc	r19, 1
    1430:	40 52       	subi	r20, 0x20	; 32
    1432:	41 93       	st	Z+, r20
    1434:	02 d0       	rcall	.+4      	; 0x143a <__ultoa_invert+0x84>
    1436:	a9 f7       	brne	.-22     	; 0x1422 <__ultoa_invert+0x6c>
    1438:	ea cf       	rjmp	.-44     	; 0x140e <__ultoa_invert+0x58>
    143a:	b4 e0       	ldi	r27, 0x04	; 4
    143c:	a6 95       	lsr	r26
    143e:	97 95       	ror	r25
    1440:	87 95       	ror	r24
    1442:	77 95       	ror	r23
    1444:	67 95       	ror	r22
    1446:	ba 95       	dec	r27
    1448:	c9 f7       	brne	.-14     	; 0x143c <__ultoa_invert+0x86>
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	61 05       	cpc	r22, r1
    144e:	71 05       	cpc	r23, r1
    1450:	08 95       	ret
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	0a 2e       	mov	r0, r26
    1458:	06 94       	lsr	r0
    145a:	57 95       	ror	r21
    145c:	47 95       	ror	r20
    145e:	37 95       	ror	r19
    1460:	27 95       	ror	r18
    1462:	ba 95       	dec	r27
    1464:	c9 f7       	brne	.-14     	; 0x1458 <__ultoa_invert+0xa2>
    1466:	62 0f       	add	r22, r18
    1468:	73 1f       	adc	r23, r19
    146a:	84 1f       	adc	r24, r20
    146c:	95 1f       	adc	r25, r21
    146e:	a0 1d       	adc	r26, r0
    1470:	08 95       	ret

00001472 <__prologue_saves__>:
    1472:	2f 92       	push	r2
    1474:	3f 92       	push	r3
    1476:	4f 92       	push	r4
    1478:	5f 92       	push	r5
    147a:	6f 92       	push	r6
    147c:	7f 92       	push	r7
    147e:	8f 92       	push	r8
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	ca 1b       	sub	r28, r26
    149c:	db 0b       	sbc	r29, r27
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	09 94       	ijmp

000014aa <__epilogue_restores__>:
    14aa:	2a 88       	ldd	r2, Y+18	; 0x12
    14ac:	39 88       	ldd	r3, Y+17	; 0x11
    14ae:	48 88       	ldd	r4, Y+16	; 0x10
    14b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    14b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    14b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    14b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    14b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    14ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    14bc:	b9 84       	ldd	r11, Y+9	; 0x09
    14be:	c8 84       	ldd	r12, Y+8	; 0x08
    14c0:	df 80       	ldd	r13, Y+7	; 0x07
    14c2:	ee 80       	ldd	r14, Y+6	; 0x06
    14c4:	fd 80       	ldd	r15, Y+5	; 0x05
    14c6:	0c 81       	ldd	r16, Y+4	; 0x04
    14c8:	1b 81       	ldd	r17, Y+3	; 0x03
    14ca:	aa 81       	ldd	r26, Y+2	; 0x02
    14cc:	b9 81       	ldd	r27, Y+1	; 0x01
    14ce:	ce 0f       	add	r28, r30
    14d0:	d1 1d       	adc	r29, r1
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	ed 01       	movw	r28, r26
    14de:	08 95       	ret

000014e0 <_exit>:
    14e0:	f8 94       	cli

000014e2 <__stop_program>:
    14e2:	ff cf       	rjmp	.-2      	; 0x14e2 <__stop_program>
