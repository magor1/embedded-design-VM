
DA7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00001b04  00001b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800172  00800172  00001c0a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001284  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061b  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000675  00000000  00000000  000036a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00003d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  0000412c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000124c  00000000  00000000  0000459f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000057eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
       4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      34:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_13>
      38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      50:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      54:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      58:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      5c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      60:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	6e 61       	ori	r22, 0x1E	; 30
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2177>:
      9a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      aa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ba:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ca:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      da:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      ea:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      fa:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     10a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     11a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     12a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     13a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     14a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     15a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     16a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     17a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     18a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000198 <__ctors_end>:
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf ef       	ldi	r28, 0xFF	; 255
     19e:	d8 e0       	ldi	r29, 0x08	; 8
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
     1a4:	11 e0       	ldi	r17, 0x01	; 1
     1a6:	a0 e0       	ldi	r26, 0x00	; 0
     1a8:	b1 e0       	ldi	r27, 0x01	; 1
     1aa:	e4 e0       	ldi	r30, 0x04	; 4
     1ac:	fb e1       	ldi	r31, 0x1B	; 27
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x10>
     1b0:	05 90       	lpm	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	a2 37       	cpi	r26, 0x72	; 114
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0xc>

000001ba <__do_clear_bss>:
     1ba:	21 e0       	ldi	r18, 0x01	; 1
     1bc:	a2 e7       	ldi	r26, 0x72	; 114
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
     1c4:	a6 37       	cpi	r26, 0x76	; 118
     1c6:	b2 07       	cpc	r27, r18
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
     1ca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <main>
     1ce:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <_exit>

000001d2 <__bad_interrupt>:
     1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     1d6:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     1da:	88 e4       	ldi	r24, 0x48	; 72
     1dc:	80 93 b8 00 	sts	0x00B8, r24
     1e0:	08 95       	ret

000001e2 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     1e2:	94 ea       	ldi	r25, 0xA4	; 164
     1e4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1e8:	ec eb       	ldi	r30, 0xBC	; 188
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	90 81       	ld	r25, Z
     1ee:	99 23       	and	r25, r25
     1f0:	ec f7       	brge	.-6      	; 0x1ec <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     1f2:	90 91 b9 00 	lds	r25, 0x00B9
     1f6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     1f8:	98 30       	cpi	r25, 0x08	; 8
     1fa:	11 f0       	breq	.+4      	; 0x200 <i2c_start+0x1e>
     1fc:	90 31       	cpi	r25, 0x10	; 16
     1fe:	a1 f4       	brne	.+40     	; 0x228 <i2c_start+0x46>

	// send device address
	TWDR = address;
     200:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     204:	84 e8       	ldi	r24, 0x84	; 132
     206:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     20a:	ec eb       	ldi	r30, 0xBC	; 188
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	88 23       	and	r24, r24
     212:	ec f7       	brge	.-6      	; 0x20e <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     214:	90 91 b9 00 	lds	r25, 0x00B9
     218:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     21a:	98 31       	cpi	r25, 0x18	; 24
     21c:	39 f0       	breq	.+14     	; 0x22c <i2c_start+0x4a>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 34       	cpi	r25, 0x40	; 64
     222:	29 f4       	brne	.+10     	; 0x22e <i2c_start+0x4c>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     22e:	08 95       	ret

00000230 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     230:	cf 93       	push	r28
     232:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     234:	ec eb       	ldi	r30, 0xBC	; 188
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     23a:	a9 eb       	ldi	r26, 0xB9	; 185
     23c:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     23e:	cb eb       	ldi	r28, 0xBB	; 187
     240:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     242:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     244:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     246:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     248:	90 81       	ld	r25, Z
     24a:	99 23       	and	r25, r25
     24c:	ec f7       	brge	.-6      	; 0x248 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     24e:	9c 91       	ld	r25, X
     250:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     252:	98 30       	cpi	r25, 0x08	; 8
     254:	11 f0       	breq	.+4      	; 0x25a <i2c_start_wait+0x2a>
     256:	90 31       	cpi	r25, 0x10	; 16
     258:	b1 f7       	brne	.-20     	; 0x246 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
     25a:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     25c:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     25e:	90 81       	ld	r25, Z
     260:	99 23       	and	r25, r25
     262:	ec f7       	brge	.-6      	; 0x25e <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     264:	9c 91       	ld	r25, X
     266:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     268:	90 32       	cpi	r25, 0x20	; 32
     26a:	11 f0       	breq	.+4      	; 0x270 <i2c_start_wait+0x40>
     26c:	98 35       	cpi	r25, 0x58	; 88
     26e:	29 f4       	brne	.+10     	; 0x27a <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     270:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     272:	90 81       	ld	r25, Z
     274:	94 fd       	sbrc	r25, 4
     276:	fd cf       	rjmp	.-6      	; 0x272 <i2c_start_wait+0x42>
     278:	e6 cf       	rjmp	.-52     	; 0x246 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     280:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <i2c_start>

}/* i2c_rep_start */
     284:	08 95       	ret

00000286 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     286:	84 e9       	ldi	r24, 0x94	; 148
     288:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     28c:	ec eb       	ldi	r30, 0xBC	; 188
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	84 fd       	sbrc	r24, 4
     294:	fd cf       	rjmp	.-6      	; 0x290 <i2c_stop+0xa>

}/* i2c_stop */
     296:	08 95       	ret

00000298 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     298:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     29c:	84 e8       	ldi	r24, 0x84	; 132
     29e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     2a2:	ec eb       	ldi	r30, 0xBC	; 188
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	88 23       	and	r24, r24
     2aa:	ec f7       	brge	.-6      	; 0x2a6 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     2ac:	90 91 b9 00 	lds	r25, 0x00B9
     2b0:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	98 32       	cpi	r25, 0x28	; 40
     2b6:	09 f4       	brne	.+2      	; 0x2ba <i2c_write+0x22>
     2b8:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     2ba:	08 95       	ret

000002bc <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     2bc:	84 e8       	ldi	r24, 0x84	; 132
     2be:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     2c2:	ec eb       	ldi	r30, 0xBC	; 188
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	88 23       	and	r24, r24
     2ca:	ec f7       	brge	.-6      	; 0x2c6 <i2c_readNak+0xa>
	
    return TWDR;
     2cc:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     2d0:	08 95       	ret

000002d2 <i2c_read_byte>:




// read one byte from dev, stored in value, return 1 for error
void i2c_read_byte(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data){
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	c8 2f       	mov	r28, r24
     2dc:	d6 2f       	mov	r29, r22
     2de:	8a 01       	movw	r16, r20

	i2c_start_wait(dev_addr+I2C_WRITE); 	//start i2c to write register address
     2e0:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start_wait>
	i2c_write(reg_addr);			//write address of register to read
     2e4:	8d 2f       	mov	r24, r29
     2e6:	0e 94 4c 01 	call	0x298	; 0x298 <i2c_write>
	i2c_rep_start(dev_addr+I2C_READ);	//restart i2c to start reading
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	8c 0f       	add	r24, r28
     2ee:	0e 94 40 01 	call	0x280	; 0x280 <i2c_rep_start>
	*data = i2c_readNak();
     2f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <i2c_readNak>
     2f6:	f8 01       	movw	r30, r16
     2f8:	80 83       	st	Z, r24
        i2c_stop();
     2fa:	0e 94 43 01 	call	0x286	; 0x286 <i2c_stop>

}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <i2c_write_byte>:



// write one byte to dev
void i2c_write_byte(uint8_t dev_addr, uint8_t reg_addr, uint8_t data){
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	d6 2f       	mov	r29, r22
     30e:	c4 2f       	mov	r28, r20
	
	i2c_start_wait(dev_addr+I2C_WRITE);
     310:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start_wait>
 	i2c_write(reg_addr);                     
     314:	8d 2f       	mov	r24, r29
     316:	0e 94 4c 01 	call	0x298	; 0x298 <i2c_write>
        i2c_write(data);
     31a:	8c 2f       	mov	r24, r28
     31c:	0e 94 4c 01 	call	0x298	; 0x298 <i2c_write>
	i2c_stop();
     320:	0e 94 43 01 	call	0x286	; 0x286 <i2c_stop>

}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <timer_setup>:

}//end of main


void timer_setup(){		//referenced from [2]
	TCCR1A = 0x00;
     32a:	10 92 80 00 	sts	0x0080, r1
	TIMSK1 |= _BV(TOIE1);
     32e:	ef e6       	ldi	r30, 0x6F	; 111
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	81 60       	ori	r24, 0x01	; 1
     336:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS11);
     338:	e1 e8       	ldi	r30, 0x81	; 129
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	82 60       	ori	r24, 0x02	; 2
     340:	80 83       	st	Z, r24
	TCCR1B &= ~( _BV(CS12)  | _BV(CS10)); // prescaler=8
     342:	80 81       	ld	r24, Z
     344:	8a 7f       	andi	r24, 0xFA	; 250
     346:	80 83       	st	Z, r24
     348:	08 95       	ret

0000034a <get_time>:

}

void get_time(double * dt){  //referenced from [2]
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	ec 01       	movw	r28, r24
	cli();
     360:	f8 94       	cli
	uint8_t l = TCNT1L;
     362:	40 91 84 00 	lds	r20, 0x0084
	uint8_t h = TCNT1H;
     366:	80 91 85 00 	lds	r24, 0x0085
	uint16_t step = h<<8 | l;
	*dt = (double)step*5e-7 + count*0.032768;
     36a:	c0 90 72 01 	lds	r12, 0x0172
     36e:	d0 90 73 01 	lds	r13, 0x0173
     372:	e0 90 74 01 	lds	r14, 0x0174
     376:	f0 90 75 01 	lds	r15, 0x0175

void get_time(double * dt){  //referenced from [2]
	cli();
	uint8_t l = TCNT1L;
	uint8_t h = TCNT1H;
	uint16_t step = h<<8 | l;
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	58 2b       	or	r21, r24
	*dt = (double)step*5e-7 + count*0.032768;
     37e:	ba 01       	movw	r22, r20
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 c2 06 	call	0xd84	; 0xd84 <__floatunsisf>
     388:	2d eb       	ldi	r18, 0xBD	; 189
     38a:	37 e3       	ldi	r19, 0x37	; 55
     38c:	46 e0       	ldi	r20, 0x06	; 6
     38e:	55 e3       	ldi	r21, 0x35	; 53
     390:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     394:	4b 01       	movw	r8, r22
     396:	5c 01       	movw	r10, r24
     398:	2d eb       	ldi	r18, 0xBD	; 189
     39a:	37 e3       	ldi	r19, 0x37	; 55
     39c:	46 e0       	ldi	r20, 0x06	; 6
     39e:	5d e3       	ldi	r21, 0x3D	; 61
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     3a8:	9b 01       	movw	r18, r22
     3aa:	ac 01       	movw	r20, r24
     3ac:	c5 01       	movw	r24, r10
     3ae:	b4 01       	movw	r22, r8
     3b0:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     3b4:	68 83       	st	Y, r22
     3b6:	79 83       	std	Y+1, r23	; 0x01
     3b8:	8a 83       	std	Y+2, r24	; 0x02
     3ba:	9b 83       	std	Y+3, r25	; 0x03
	count = 0;
     3bc:	10 92 72 01 	sts	0x0172, r1
     3c0:	10 92 73 01 	sts	0x0173, r1
     3c4:	10 92 74 01 	sts	0x0174, r1
     3c8:	10 92 75 01 	sts	0x0175, r1
	sei();
     3cc:	78 94       	sei
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	cf 90       	pop	r12
     3da:	bf 90       	pop	r11
     3dc:	af 90       	pop	r10
     3de:	9f 90       	pop	r9
     3e0:	8f 90       	pop	r8
     3e2:	08 95       	ret

000003e4 <main>:
void timer_setup();			// referenced from [2]
void get_time(double* dt);
volatile double count;
const double unit_t = 8/16000000;

int main(void){		//variable declarations and procedures referenced from [2]
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	a4 97       	sbiw	r28, 0x24	; 36
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61

	sei();
     3f8:	78 94       	sei
	uart_init();
     3fa:	0e 94 13 05 	call	0xa26	; 0xa26 <uart_init>
	i2c_init();
     3fe:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2c_init>

	DDRB |= _BV(5);
     402:	25 9a       	sbi	0x04, 5	; 4
	float roll_count = 0;
	int count_previous_x = 0;
	int count_previous_y = 0;

	// initialize & test MPU5060 availability
	ret = i2c_start(MPU6050_ADDRESS+I2C_WRITE);
     404:	80 ed       	ldi	r24, 0xD0	; 208
     406:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <i2c_start>
	if(~ret){
		PORTB |= _BV(5);
     40a:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     40c:	2f ef       	ldi	r18, 0xFF	; 255
     40e:	83 ec       	ldi	r24, 0xC3	; 195
     410:	99 e0       	ldi	r25, 0x09	; 9
     412:	21 50       	subi	r18, 0x01	; 1
     414:	80 40       	sbci	r24, 0x00	; 0
     416:	90 40       	sbci	r25, 0x00	; 0
     418:	e1 f7       	brne	.-8      	; 0x412 <main+0x2e>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <main+0x38>
     41c:	00 00       	nop
		_delay_ms(200);
		PORTB &= ~(_BV(5));
     41e:	2d 98       	cbi	0x05, 5	; 5
	}

	mpu6050_init();
     420:	0e 94 1c 04 	call	0x838	; 0x838 <mpu6050_init>
	timer_setup();
     424:	0e 94 95 01 	call	0x32a	; 0x32a <timer_setup>

	mpu6050_read_accel_ALL(accel_buff);
     428:	ce 01       	movw	r24, r28
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <mpu6050_read_accel_ALL>
	float roll;		//angle around y axis
	float pitch_accel, roll_accel;
	float pitch_count = 0;
	float roll_count = 0;
	int count_previous_x = 0;
	int count_previous_y = 0;
     430:	21 2c       	mov	r2, r1
     432:	31 2c       	mov	r3, r1
	float pitch;	//angle around x axis
	float roll;		//angle around y axis
	float pitch_accel, roll_accel;
	float pitch_count = 0;
	float roll_count = 0;
	int count_previous_x = 0;
     434:	1e 8a       	std	Y+22, r1	; 0x16
     436:	1d 8a       	std	Y+21, r1	; 0x15
	double dt;		
	float pitch;	//angle around x axis
	float roll;		//angle around y axis
	float pitch_accel, roll_accel;
	float pitch_count = 0;
	float roll_count = 0;
     438:	1d 8e       	std	Y+29, r1	; 0x1d
     43a:	1e 8e       	std	Y+30, r1	; 0x1e
     43c:	1f 8e       	std	Y+31, r1	; 0x1f
     43e:	18 a2       	std	Y+32, r1	; 0x20
	double gyroX, gyroY, gyroZ;
	double dt;		
	float pitch;	//angle around x axis
	float roll;		//angle around y axis
	float pitch_accel, roll_accel;
	float pitch_count = 0;
     440:	19 8e       	std	Y+25, r1	; 0x19
     442:	1a 8e       	std	Y+26, r1	; 0x1a
     444:	1b 8e       	std	Y+27, r1	; 0x1b
     446:	1c 8e       	std	Y+28, r1	; 0x1c
			{
				roll_count += 1;
				count_previous_y = 1;
			}
			
			else if(!(roll > 25 || roll <-25)) count_previous_y = 0;
     448:	38 8e       	std	Y+24, r3	; 0x18
     44a:	2f 8a       	std	Y+23, r2	; 0x17
	timer_setup();

	mpu6050_read_accel_ALL(accel_buff);

	while(1){
		get_time(&dt);
     44c:	ce 01       	movw	r24, r28
     44e:	0d 96       	adiw	r24, 0x0d	; 13
     450:	0e 94 a5 01 	call	0x34a	; 0x34a <get_time>
		mpu6050_read_accel_ALL(accel_buff);
     454:	ce 01       	movw	r24, r28
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	0e 94 dd 04 	call	0x9ba	; 0x9ba <mpu6050_read_accel_ALL>
		mpu6050_read_gyro_ALL(gyro_buff);
     45c:	ce 01       	movw	r24, r28
     45e:	07 96       	adiw	r24, 0x07	; 7
     460:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mpu6050_read_gyro_ALL>
		accelZ = accel_buff[2]*9.8*2/32768;
		
		// gyro rate (degrees/s)
		gyroX = gyro_buff[0]*(180/M_PI)*1000/32768;
		gyroY = gyro_buff[1]*(180/M_PI)*1000/32768;
		gyroZ = gyro_buff[2]*(180/M_PI)*1000/32768;
     464:	6b 85       	ldd	r22, Y+11	; 0x0b
     466:	7c 85       	ldd	r23, Y+12	; 0x0c
     468:	07 2e       	mov	r0, r23
     46a:	00 0c       	add	r0, r0
     46c:	88 0b       	sbc	r24, r24
     46e:	99 0b       	sbc	r25, r25
     470:	0e 94 c4 06 	call	0xd88	; 0xd88 <__floatsisf>
     474:	20 ee       	ldi	r18, 0xE0	; 224
     476:	3e e2       	ldi	r19, 0x2E	; 46
     478:	45 e6       	ldi	r20, 0x65	; 101
     47a:	52 e4       	ldi	r21, 0x42	; 66
     47c:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	4a e7       	ldi	r20, 0x7A	; 122
     486:	54 e4       	ldi	r21, 0x44	; 68
     488:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	58 e3       	ldi	r21, 0x38	; 56
     494:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     498:	69 8b       	std	Y+17, r22	; 0x11
     49a:	7a 8b       	std	Y+18, r23	; 0x12
     49c:	8b 8b       	std	Y+19, r24	; 0x13
     49e:	9c 8b       	std	Y+20, r25	; 0x14
/////////////////////////////////////////
// Complementary Filter referenced from [1]
/////////////////////////////////////////
		
		// Integrate the gyroscope data -> int(angularSpeed) = angle
		pitch = pitch + ((float)gyro_buff[0] / GYRO_SENSITIVITY) * dt;
     4a0:	8d 84       	ldd	r8, Y+13	; 0x0d
     4a2:	9e 84       	ldd	r9, Y+14	; 0x0e
     4a4:	af 84       	ldd	r10, Y+15	; 0x0f
     4a6:	b8 88       	ldd	r11, Y+16	; 0x10
     4a8:	6f 81       	ldd	r22, Y+7	; 0x07
     4aa:	78 85       	ldd	r23, Y+8	; 0x08
     4ac:	07 2e       	mov	r0, r23
     4ae:	00 0c       	add	r0, r0
     4b0:	88 0b       	sbc	r24, r24
     4b2:	99 0b       	sbc	r25, r25
     4b4:	0e 94 c4 06 	call	0xd88	; 0xd88 <__floatsisf>
     4b8:	2f e6       	ldi	r18, 0x6F	; 111
     4ba:	32 e1       	ldi	r19, 0x12	; 18
     4bc:	43 e8       	ldi	r20, 0x83	; 131
     4be:	52 e4       	ldi	r21, 0x42	; 66
     4c0:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
     4c4:	a5 01       	movw	r20, r10
     4c6:	94 01       	movw	r18, r8
     4c8:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     4cc:	9b 01       	movw	r18, r22
     4ce:	ac 01       	movw	r20, r24
     4d0:	c3 01       	movw	r24, r6
     4d2:	b2 01       	movw	r22, r4
     4d4:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     4d8:	2b 01       	movw	r4, r22
     4da:	3c 01       	movw	r6, r24
		roll = roll - ((float)gyro_buff[1] / GYRO_SENSITIVITY) * dt;
     4dc:	69 85       	ldd	r22, Y+9	; 0x09
     4de:	7a 85       	ldd	r23, Y+10	; 0x0a
     4e0:	07 2e       	mov	r0, r23
     4e2:	00 0c       	add	r0, r0
     4e4:	88 0b       	sbc	r24, r24
     4e6:	99 0b       	sbc	r25, r25
     4e8:	0e 94 c4 06 	call	0xd88	; 0xd88 <__floatsisf>
     4ec:	2f e6       	ldi	r18, 0x6F	; 111
     4ee:	32 e1       	ldi	r19, 0x12	; 18
     4f0:	43 e8       	ldi	r20, 0x83	; 131
     4f2:	52 e4       	ldi	r21, 0x42	; 66
     4f4:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
     4f8:	9b 01       	movw	r18, r22
     4fa:	ac 01       	movw	r20, r24
     4fc:	c5 01       	movw	r24, r10
     4fe:	b4 01       	movw	r22, r8
     500:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	c7 01       	movw	r24, r14
     50a:	b6 01       	movw	r22, r12
     50c:	0e 94 6c 05 	call	0xad8	; 0xad8 <__subsf3>
     510:	6b 01       	movw	r12, r22
     512:	7c 01       	movw	r14, r24
		
    // Compensate for drift with accelerometer data if !bull
    // Sensitivity = -2 to 2 G at 16Bit -> 2G = 32768 && 0.5G = 8192
		int approx_force_magnitude = abs(accel_buff[0]) + abs(accel_buff[1]) + abs(accel_buff[2]);
     514:	29 80       	ldd	r2, Y+1	; 0x01
     516:	3a 80       	ldd	r3, Y+2	; 0x02
     518:	0b 81       	ldd	r16, Y+3	; 0x03
     51a:	1c 81       	ldd	r17, Y+4	; 0x04
     51c:	6d 81       	ldd	r22, Y+5	; 0x05
     51e:	7e 81       	ldd	r23, Y+6	; 0x06
     520:	91 01       	movw	r18, r2
     522:	33 20       	and	r3, r3
     524:	24 f4       	brge	.+8      	; 0x52e <main+0x14a>
     526:	22 27       	eor	r18, r18
     528:	33 27       	eor	r19, r19
     52a:	22 19       	sub	r18, r2
     52c:	33 09       	sbc	r19, r3
     52e:	c8 01       	movw	r24, r16
     530:	11 23       	and	r17, r17
     532:	24 f4       	brge	.+8      	; 0x53c <main+0x158>
     534:	88 27       	eor	r24, r24
     536:	99 27       	eor	r25, r25
     538:	80 1b       	sub	r24, r16
     53a:	91 0b       	sbc	r25, r17
     53c:	28 0f       	add	r18, r24
     53e:	39 1f       	adc	r19, r25
     540:	cb 01       	movw	r24, r22
     542:	77 23       	and	r23, r23
     544:	24 f4       	brge	.+8      	; 0x54e <main+0x16a>
     546:	88 27       	eor	r24, r24
     548:	99 27       	eor	r25, r25
     54a:	86 1b       	sub	r24, r22
     54c:	97 0b       	sbc	r25, r23
     54e:	82 0f       	add	r24, r18
     550:	93 1f       	adc	r25, r19
		
		if(approx_force_magnitude > 8192 && approx_force_magnitude < 32768)
     552:	81 30       	cpi	r24, 0x01	; 1
     554:	90 42       	sbci	r25, 0x20	; 32
     556:	0c f4       	brge	.+2      	; 0x55a <main+0x176>
     558:	ee c0       	rjmp	.+476    	; 0x736 <main+0x352>
		{
			// Turning around the X axis results in a vector on the Y-axis
			// Also known as "Pitch"
			pitch_accel = atan2f((float)accel_buff[1], (float)accel_buff[2]) * 180 / M_PI; //in degrees
     55a:	07 2e       	mov	r0, r23
     55c:	00 0c       	add	r0, r0
     55e:	88 0b       	sbc	r24, r24
     560:	99 0b       	sbc	r25, r25
     562:	0e 94 c4 06 	call	0xd88	; 0xd88 <__floatsisf>
     566:	4b 01       	movw	r8, r22
     568:	5c 01       	movw	r10, r24
     56a:	b8 01       	movw	r22, r16
     56c:	11 0f       	add	r17, r17
     56e:	88 0b       	sbc	r24, r24
     570:	99 0b       	sbc	r25, r25
     572:	0e 94 c4 06 	call	0xd88	; 0xd88 <__floatsisf>
     576:	a5 01       	movw	r20, r10
     578:	94 01       	movw	r18, r8
     57a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <atan2>
     57e:	69 a3       	std	Y+33, r22	; 0x21
     580:	7a a3       	std	Y+34, r23	; 0x22
     582:	8b a3       	std	Y+35, r24	; 0x23
     584:	9c a3       	std	Y+36, r25	; 0x24
			pitch = pitch * 0.98 + pitch_accel * 0.02;
     586:	28 e4       	ldi	r18, 0x48	; 72
     588:	31 ee       	ldi	r19, 0xE1	; 225
     58a:	4a e7       	ldi	r20, 0x7A	; 122
     58c:	5f e3       	ldi	r21, 0x3F	; 63
     58e:	c3 01       	movw	r24, r6
     590:	b2 01       	movw	r22, r4
     592:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     596:	2b 01       	movw	r4, r22
     598:	3c 01       	movw	r6, r24
		
		if(approx_force_magnitude > 8192 && approx_force_magnitude < 32768)
		{
			// Turning around the X axis results in a vector on the Y-axis
			// Also known as "Pitch"
			pitch_accel = atan2f((float)accel_buff[1], (float)accel_buff[2]) * 180 / M_PI; //in degrees
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	44 e3       	ldi	r20, 0x34	; 52
     5a0:	53 e4       	ldi	r21, 0x43	; 67
     5a2:	69 a1       	ldd	r22, Y+33	; 0x21
     5a4:	7a a1       	ldd	r23, Y+34	; 0x22
     5a6:	8b a1       	ldd	r24, Y+35	; 0x23
     5a8:	9c a1       	ldd	r25, Y+36	; 0x24
     5aa:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     5ae:	2b ed       	ldi	r18, 0xDB	; 219
     5b0:	3f e0       	ldi	r19, 0x0F	; 15
     5b2:	49 e4       	ldi	r20, 0x49	; 73
     5b4:	50 e4       	ldi	r21, 0x40	; 64
     5b6:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
			pitch = pitch * 0.98 + pitch_accel * 0.02;
     5ba:	2a e0       	ldi	r18, 0x0A	; 10
     5bc:	37 ed       	ldi	r19, 0xD7	; 215
     5be:	43 ea       	ldi	r20, 0xA3	; 163
     5c0:	5c e3       	ldi	r21, 0x3C	; 60
     5c2:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     5c6:	9b 01       	movw	r18, r22
     5c8:	ac 01       	movw	r20, r24
     5ca:	c3 01       	movw	r24, r6
     5cc:	b2 01       	movw	r22, r4
     5ce:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     5d2:	2b 01       	movw	r4, r22
     5d4:	3c 01       	movw	r6, r24
			if((pitch > 25 || pitch <-25) && count_previous_x == 0)
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	48 ec       	ldi	r20, 0xC8	; 200
     5dc:	51 e4       	ldi	r21, 0x41	; 65
     5de:	0e 94 9b 07 	call	0xf36	; 0xf36 <__gesf2>
     5e2:	18 16       	cp	r1, r24
     5e4:	0c f4       	brge	.+2      	; 0x5e8 <main+0x204>
     5e6:	e4 c0       	rjmp	.+456    	; 0x7b0 <main+0x3cc>
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	48 ec       	ldi	r20, 0xC8	; 200
     5ee:	51 ec       	ldi	r21, 0xC1	; 193
     5f0:	c3 01       	movw	r24, r6
     5f2:	b2 01       	movw	r22, r4
     5f4:	0e 94 4b 06 	call	0xc96	; 0xc96 <__cmpsf2>
     5f8:	88 23       	and	r24, r24
     5fa:	b4 f4       	brge	.+44     	; 0x628 <main+0x244>
     5fc:	8d 89       	ldd	r24, Y+21	; 0x15
     5fe:	9e 89       	ldd	r25, Y+22	; 0x16
     600:	89 2b       	or	r24, r25
     602:	41 f5       	brne	.+80     	; 0x654 <main+0x270>
			{
				pitch_count += 1;
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 e8       	ldi	r20, 0x80	; 128
     60a:	5f e3       	ldi	r21, 0x3F	; 63
     60c:	69 8d       	ldd	r22, Y+25	; 0x19
     60e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     610:	8b 8d       	ldd	r24, Y+27	; 0x1b
     612:	9c 8d       	ldd	r25, Y+28	; 0x1c
     614:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     618:	69 8f       	std	Y+25, r22	; 0x19
     61a:	7a 8f       	std	Y+26, r23	; 0x1a
     61c:	8b 8f       	std	Y+27, r24	; 0x1b
     61e:	9c 8f       	std	Y+28, r25	; 0x1c
				count_previous_x = 1;
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	9d 8b       	std	Y+21, r25	; 0x15
     624:	1e 8a       	std	Y+22, r1	; 0x16
     626:	16 c0       	rjmp	.+44     	; 0x654 <main+0x270>
			}
			
			else if (!(pitch > 25 || pitch <-25)) count_previous_x = 0;
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	48 ec       	ldi	r20, 0xC8	; 200
     62e:	51 e4       	ldi	r21, 0x41	; 65
     630:	c3 01       	movw	r24, r6
     632:	b2 01       	movw	r22, r4
     634:	0e 94 9b 07 	call	0xf36	; 0xf36 <__gesf2>
     638:	18 16       	cp	r1, r24
     63a:	64 f0       	brlt	.+24     	; 0x654 <main+0x270>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	48 ec       	ldi	r20, 0xC8	; 200
     642:	51 ec       	ldi	r21, 0xC1	; 193
     644:	c3 01       	movw	r24, r6
     646:	b2 01       	movw	r22, r4
     648:	0e 94 4b 06 	call	0xc96	; 0xc96 <__cmpsf2>
     64c:	88 23       	and	r24, r24
     64e:	14 f0       	brlt	.+4      	; 0x654 <main+0x270>
     650:	1d 8a       	std	Y+21, r1	; 0x15
     652:	1e 8a       	std	Y+22, r1	; 0x16
			
			// Turning around the Y axis results in a vector on the X-axis
			// Also known as "Roll"
			roll_accel = atan2f((float)accel_buff[0], (float)accel_buff[2]) * 180 / M_PI; //in degrees
     654:	b1 01       	movw	r22, r2
     656:	33 0c       	add	r3, r3
     658:	88 0b       	sbc	r24, r24
     65a:	99 0b       	sbc	r25, r25
     65c:	0e 94 c4 06 	call	0xd88	; 0xd88 <__floatsisf>
     660:	a5 01       	movw	r20, r10
     662:	94 01       	movw	r18, r8
     664:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <atan2>
     668:	4b 01       	movw	r8, r22
     66a:	5c 01       	movw	r10, r24
			roll = roll * 0.98 + roll_accel * 0.02;
     66c:	28 e4       	ldi	r18, 0x48	; 72
     66e:	31 ee       	ldi	r19, 0xE1	; 225
     670:	4a e7       	ldi	r20, 0x7A	; 122
     672:	5f e3       	ldi	r21, 0x3F	; 63
     674:	c7 01       	movw	r24, r14
     676:	b6 01       	movw	r22, r12
     678:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     67c:	6b 01       	movw	r12, r22
     67e:	7c 01       	movw	r14, r24
			
			else if (!(pitch > 25 || pitch <-25)) count_previous_x = 0;
			
			// Turning around the Y axis results in a vector on the X-axis
			// Also known as "Roll"
			roll_accel = atan2f((float)accel_buff[0], (float)accel_buff[2]) * 180 / M_PI; //in degrees
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	44 e3       	ldi	r20, 0x34	; 52
     686:	53 e4       	ldi	r21, 0x43	; 67
     688:	c5 01       	movw	r24, r10
     68a:	b4 01       	movw	r22, r8
     68c:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     690:	2b ed       	ldi	r18, 0xDB	; 219
     692:	3f e0       	ldi	r19, 0x0F	; 15
     694:	49 e4       	ldi	r20, 0x49	; 73
     696:	50 e4       	ldi	r21, 0x40	; 64
     698:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
			roll = roll * 0.98 + roll_accel * 0.02;
     69c:	2a e0       	ldi	r18, 0x0A	; 10
     69e:	37 ed       	ldi	r19, 0xD7	; 215
     6a0:	43 ea       	ldi	r20, 0xA3	; 163
     6a2:	5c e3       	ldi	r21, 0x3C	; 60
     6a4:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     6a8:	9b 01       	movw	r18, r22
     6aa:	ac 01       	movw	r20, r24
     6ac:	c7 01       	movw	r24, r14
     6ae:	b6 01       	movw	r22, r12
     6b0:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     6b4:	6b 01       	movw	r12, r22
     6b6:	7c 01       	movw	r14, r24
			if((roll > 25 || roll <-25) && count_previous_y == 0)
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	48 ec       	ldi	r20, 0xC8	; 200
     6be:	51 e4       	ldi	r21, 0x41	; 65
     6c0:	0e 94 9b 07 	call	0xf36	; 0xf36 <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	0c f4       	brge	.+2      	; 0x6ca <main+0x2e6>
     6c8:	79 c0       	rjmp	.+242    	; 0x7bc <main+0x3d8>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	48 ec       	ldi	r20, 0xC8	; 200
     6d0:	51 ec       	ldi	r21, 0xC1	; 193
     6d2:	c7 01       	movw	r24, r14
     6d4:	b6 01       	movw	r22, r12
     6d6:	0e 94 4b 06 	call	0xc96	; 0xc96 <__cmpsf2>
     6da:	88 23       	and	r24, r24
     6dc:	b4 f4       	brge	.+44     	; 0x70a <main+0x326>
     6de:	8f 89       	ldd	r24, Y+23	; 0x17
     6e0:	98 8d       	ldd	r25, Y+24	; 0x18
     6e2:	89 2b       	or	r24, r25
     6e4:	41 f5       	brne	.+80     	; 0x736 <main+0x352>
			{
				roll_count += 1;
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e8       	ldi	r20, 0x80	; 128
     6ec:	5f e3       	ldi	r21, 0x3F	; 63
     6ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6f0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     6f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6f4:	98 a1       	ldd	r25, Y+32	; 0x20
     6f6:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     6fa:	6d 8f       	std	Y+29, r22	; 0x1d
     6fc:	7e 8f       	std	Y+30, r23	; 0x1e
     6fe:	8f 8f       	std	Y+31, r24	; 0x1f
     700:	98 a3       	std	Y+32, r25	; 0x20
				count_previous_y = 1;
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	9f 8b       	std	Y+23, r25	; 0x17
     706:	18 8e       	std	Y+24, r1	; 0x18
     708:	16 c0       	rjmp	.+44     	; 0x736 <main+0x352>
			}
			
			else if(!(roll > 25 || roll <-25)) count_previous_y = 0;
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	48 ec       	ldi	r20, 0xC8	; 200
     710:	51 e4       	ldi	r21, 0x41	; 65
     712:	c7 01       	movw	r24, r14
     714:	b6 01       	movw	r22, r12
     716:	0e 94 9b 07 	call	0xf36	; 0xf36 <__gesf2>
     71a:	18 16       	cp	r1, r24
     71c:	64 f0       	brlt	.+24     	; 0x736 <main+0x352>
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	48 ec       	ldi	r20, 0xC8	; 200
     724:	51 ec       	ldi	r21, 0xC1	; 193
     726:	c7 01       	movw	r24, r14
     728:	b6 01       	movw	r22, r12
     72a:	0e 94 4b 06 	call	0xc96	; 0xc96 <__cmpsf2>
     72e:	88 23       	and	r24, r24
     730:	14 f0       	brlt	.+4      	; 0x736 <main+0x352>
     732:	1f 8a       	std	Y+23, r1	; 0x17
     734:	18 8e       	std	Y+24, r1	; 0x18
     736:	8f e3       	ldi	r24, 0x3F	; 63
     738:	9c e9       	ldi	r25, 0x9C	; 156
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <main+0x356>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <main+0x35c>
     740:	00 00       	nop
		//The string output to the serial terminal must be in this form: 
		//"Eval1,val2,val3\n"
		//Where val1, val2, ... , are the value variables and are separated by commas.
		
		_delay_ms(10);
		uart_putstring("E");
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_putstring>
		uart_putdouble(gyroZ);
     74a:	69 89       	ldd	r22, Y+17	; 0x11
     74c:	7a 89       	ldd	r23, Y+18	; 0x12
     74e:	8b 89       	ldd	r24, Y+19	; 0x13
     750:	9c 89       	ldd	r25, Y+20	; 0x14
     752:	0e 94 3b 05 	call	0xa76	; 0xa76 <uart_putdouble>
		uart_putstring(",");
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_putstring>
		uart_putdouble(pitch);
     75e:	c3 01       	movw	r24, r6
     760:	b2 01       	movw	r22, r4
     762:	0e 94 3b 05 	call	0xa76	; 0xa76 <uart_putdouble>
		uart_putstring(",");
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_putstring>
		uart_putdouble(roll);
     76e:	c7 01       	movw	r24, r14
     770:	b6 01       	movw	r22, r12
     772:	0e 94 3b 05 	call	0xa76	; 0xa76 <uart_putdouble>
		uart_putstring("\n");
     776:	84 e0       	ldi	r24, 0x04	; 4
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_putstring>
		uart_putstring("                                                                  X-axis turns: ");
     77e:	86 e0       	ldi	r24, 0x06	; 6
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_putstring>
		uart_putdouble(pitch_count);
     786:	69 8d       	ldd	r22, Y+25	; 0x19
     788:	7a 8d       	ldd	r23, Y+26	; 0x1a
     78a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     78c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     78e:	0e 94 3b 05 	call	0xa76	; 0xa76 <uart_putdouble>
		uart_putstring("        Y-axis turns: ");
     792:	87 e5       	ldi	r24, 0x57	; 87
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_putstring>
		uart_putdouble(roll_count);
     79a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     79c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     79e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7a0:	98 a1       	ldd	r25, Y+32	; 0x20
     7a2:	0e 94 3b 05 	call	0xa76	; 0xa76 <uart_putdouble>
		uart_putstring("\n");
     7a6:	84 e0       	ldi	r24, 0x04	; 4
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_putstring>
		
	}
     7ae:	4e ce       	rjmp	.-868    	; 0x44c <main+0x68>
		{
			// Turning around the X axis results in a vector on the Y-axis
			// Also known as "Pitch"
			pitch_accel = atan2f((float)accel_buff[1], (float)accel_buff[2]) * 180 / M_PI; //in degrees
			pitch = pitch * 0.98 + pitch_accel * 0.02;
			if((pitch > 25 || pitch <-25) && count_previous_x == 0)
     7b0:	8d 89       	ldd	r24, Y+21	; 0x15
     7b2:	9e 89       	ldd	r25, Y+22	; 0x16
     7b4:	89 2b       	or	r24, r25
     7b6:	09 f4       	brne	.+2      	; 0x7ba <main+0x3d6>
     7b8:	25 cf       	rjmp	.-438    	; 0x604 <main+0x220>
     7ba:	4c cf       	rjmp	.-360    	; 0x654 <main+0x270>
			
			// Turning around the Y axis results in a vector on the X-axis
			// Also known as "Roll"
			roll_accel = atan2f((float)accel_buff[0], (float)accel_buff[2]) * 180 / M_PI; //in degrees
			roll = roll * 0.98 + roll_accel * 0.02;
			if((roll > 25 || roll <-25) && count_previous_y == 0)
     7bc:	8f 89       	ldd	r24, Y+23	; 0x17
     7be:	98 8d       	ldd	r25, Y+24	; 0x18
     7c0:	89 2b       	or	r24, r25
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <main+0x3e2>
     7c4:	90 cf       	rjmp	.-224    	; 0x6e6 <main+0x302>
     7c6:	b7 cf       	rjmp	.-146    	; 0x736 <main+0x352>

000007c8 <__vector_13>:
	count = 0;
	sei();
}

// timer 1 overflow interrupt handler
SIGNAL(TIMER1_OVF_vect){	//referenced from [2]
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
	count += 1;
     7ea:	60 91 72 01 	lds	r22, 0x0172
     7ee:	70 91 73 01 	lds	r23, 0x0173
     7f2:	80 91 74 01 	lds	r24, 0x0174
     7f6:	90 91 75 01 	lds	r25, 0x0175
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e8       	ldi	r20, 0x80	; 128
     800:	5f e3       	ldi	r21, 0x3F	; 63
     802:	0e 94 6d 05 	call	0xada	; 0xada <__addsf3>
     806:	60 93 72 01 	sts	0x0172, r22
     80a:	70 93 73 01 	sts	0x0173, r23
     80e:	80 93 74 01 	sts	0x0174, r24
     812:	90 93 75 01 	sts	0x0175, r25
	//TCNT1H = 0x00;
	//TCNT1L = 0x00;

}
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	bf 91       	pop	r27
     81c:	af 91       	pop	r26
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	7f 91       	pop	r23
     824:	6f 91       	pop	r22
     826:	5f 91       	pop	r21
     828:	4f 91       	pop	r20
     82a:	3f 91       	pop	r19
     82c:	2f 91       	pop	r18
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <mpu6050_init>:

//configure important settings in mpu6050
//subject to change app(ilcation) by app
void mpu6050_init(void){
	
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 0x00); //exit sleep mode
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	6b e6       	ldi	r22, 0x6B	; 107
     83c:	80 ed       	ldi	r24, 0xD0	; 208
     83e:	0e 94 84 01 	call	0x308	; 0x308 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_CONFIG, 0x01); // LPF, bandwidth = 184(accel) and 188(gyro)
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	6a e1       	ldi	r22, 0x1A	; 26
     846:	80 ed       	ldi	r24, 0xD0	; 208
     848:	0e 94 84 01 	call	0x308	; 0x308 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1<<4); // gyro ADC scale: 1000 deg/s
     84c:	40 e1       	ldi	r20, 0x10	; 16
     84e:	6b e1       	ldi	r22, 0x1B	; 27
     850:	80 ed       	ldi	r24, 0xD0	; 208
     852:	0e 94 84 01 	call	0x308	; 0x308 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 0x00); //accel ADC scale: 2 g
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	6c e1       	ldi	r22, 0x1C	; 28
     85a:	80 ed       	ldi	r24, 0xD0	; 208
     85c:	0e 94 84 01 	call	0x308	; 0x308 <i2c_write_byte>
	
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 0x00); //enable data ready interrupt
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	68 e3       	ldi	r22, 0x38	; 56
     864:	80 ed       	ldi	r24, 0xD0	; 208
     866:	0e 94 84 01 	call	0x308	; 0x308 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_SIGNAL_PATH_RESET, 0x00); //don't reset signal path
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	68 e6       	ldi	r22, 0x68	; 104
     86e:	80 ed       	ldi	r24, 0xD0	; 208
     870:	0e 94 84 01 	call	0x308	; 0x308 <i2c_write_byte>
     874:	08 95       	ret

00000876 <mpu6050_read_gyro_X>:

	
//read gyro X, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_gyro_X(uint8_t * buff){
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, buff);
     87c:	ac 01       	movw	r20, r24
     87e:	63 e4       	ldi	r22, 0x43	; 67
     880:	80 ed       	ldi	r24, 0xD0	; 208
     882:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, buff+1);
     886:	ae 01       	movw	r20, r28
     888:	4f 5f       	subi	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	64 e4       	ldi	r22, 0x44	; 68
     88e:	80 ed       	ldi	r24, 0xD0	; 208
     890:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <mpu6050_read_gyro_Y>:

//read gyro Y, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_gyro_Y(uint8_t * buff){
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, buff);
     8a0:	ac 01       	movw	r20, r24
     8a2:	65 e4       	ldi	r22, 0x45	; 69
     8a4:	80 ed       	ldi	r24, 0xD0	; 208
     8a6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, buff+1);
     8aa:	ae 01       	movw	r20, r28
     8ac:	4f 5f       	subi	r20, 0xFF	; 255
     8ae:	5f 4f       	sbci	r21, 0xFF	; 255
     8b0:	66 e4       	ldi	r22, 0x46	; 70
     8b2:	80 ed       	ldi	r24, 0xD0	; 208
     8b4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <mpu6050_read_gyro_Z>:

//read gyro Z, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_gyro_Z(uint8_t * buff){
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, buff);
     8c4:	ac 01       	movw	r20, r24
     8c6:	67 e4       	ldi	r22, 0x47	; 71
     8c8:	80 ed       	ldi	r24, 0xD0	; 208
     8ca:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, buff+1);
     8ce:	ae 01       	movw	r20, r28
     8d0:	4f 5f       	subi	r20, 0xFF	; 255
     8d2:	5f 4f       	sbci	r21, 0xFF	; 255
     8d4:	68 e4       	ldi	r22, 0x48	; 72
     8d6:	80 ed       	ldi	r24, 0xD0	; 208
     8d8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <mpu6050_read_gyro_ALL>:

// read gyro X, Y, Z all at once, high- & low-8-bits combined
// return int16_t (signed) in buff
//buff must have at least 3 available places
//no error handling for too small buff
void mpu6050_read_gyro_ALL(int16_t * buff){
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <mpu6050_read_gyro_ALL+0xa>
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	8c 01       	movw	r16, r24
	
	uint8_t tmp[2];

	mpu6050_read_gyro_X(tmp);
     8f2:	ce 01       	movw	r24, r28
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	0e 94 3b 04 	call	0x876	; 0x876 <mpu6050_read_gyro_X>
	buff[0] = (tmp[0]<<8)|(tmp[1]);
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	98 2f       	mov	r25, r24
     900:	88 27       	eor	r24, r24
     902:	2a 81       	ldd	r18, Y+2	; 0x02
     904:	82 2b       	or	r24, r18
     906:	f8 01       	movw	r30, r16
     908:	91 83       	std	Z+1, r25	; 0x01
     90a:	80 83       	st	Z, r24
	mpu6050_read_gyro_Y(tmp);
     90c:	ce 01       	movw	r24, r28
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	0e 94 4d 04 	call	0x89a	; 0x89a <mpu6050_read_gyro_Y>
	buff[1] = (tmp[0]<<8)|(tmp[1]);
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	98 2f       	mov	r25, r24
     91a:	88 27       	eor	r24, r24
     91c:	2a 81       	ldd	r18, Y+2	; 0x02
     91e:	82 2b       	or	r24, r18
     920:	f8 01       	movw	r30, r16
     922:	93 83       	std	Z+3, r25	; 0x03
     924:	82 83       	std	Z+2, r24	; 0x02
	mpu6050_read_gyro_Z(tmp);
     926:	ce 01       	movw	r24, r28
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	0e 94 5f 04 	call	0x8be	; 0x8be <mpu6050_read_gyro_Z>
	buff[2] = (tmp[0]<<8)|(tmp[1]);
     92e:	29 81       	ldd	r18, Y+1	; 0x01
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	32 2f       	mov	r19, r18
     934:	22 27       	eor	r18, r18
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	28 2b       	or	r18, r24
     93a:	f8 01       	movw	r30, r16
     93c:	35 83       	std	Z+5, r19	; 0x05
     93e:	24 83       	std	Z+4, r18	; 0x04
}
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <mpu6050_read_accel_X>:


//read accel X, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_X(uint8_t * buff){
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, buff);
     954:	ac 01       	movw	r20, r24
     956:	6b e3       	ldi	r22, 0x3B	; 59
     958:	80 ed       	ldi	r24, 0xD0	; 208
     95a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, buff+1);
     95e:	ae 01       	movw	r20, r28
     960:	4f 5f       	subi	r20, 0xFF	; 255
     962:	5f 4f       	sbci	r21, 0xFF	; 255
     964:	6c e3       	ldi	r22, 0x3C	; 60
     966:	80 ed       	ldi	r24, 0xD0	; 208
     968:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <mpu6050_read_accel_Y>:

//read accel Y, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_Y(uint8_t * buff){
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, buff);
     978:	ac 01       	movw	r20, r24
     97a:	6d e3       	ldi	r22, 0x3D	; 61
     97c:	80 ed       	ldi	r24, 0xD0	; 208
     97e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, buff+1);
     982:	ae 01       	movw	r20, r28
     984:	4f 5f       	subi	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	6e e3       	ldi	r22, 0x3E	; 62
     98a:	80 ed       	ldi	r24, 0xD0	; 208
     98c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <mpu6050_read_accel_Z>:

//read accel Z, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_Z(uint8_t * buff){
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, buff);
     99c:	ac 01       	movw	r20, r24
     99e:	6f e3       	ldi	r22, 0x3F	; 63
     9a0:	80 ed       	ldi	r24, 0xD0	; 208
     9a2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, buff+1);
     9a6:	ae 01       	movw	r20, r28
     9a8:	4f 5f       	subi	r20, 0xFF	; 255
     9aa:	5f 4f       	sbci	r21, 0xFF	; 255
     9ac:	60 e4       	ldi	r22, 0x40	; 64
     9ae:	80 ed       	ldi	r24, 0xD0	; 208
     9b0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_byte>
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <mpu6050_read_accel_ALL>:

// read accel X, Y, Z all at once, high- & low-8-bits combined
// return int16_t (signed) in buff
//buff must have at least 3 available places
//no error handling for too small buff
void mpu6050_read_accel_ALL(int16_t * buff){
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <mpu6050_read_accel_ALL+0xa>
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	8c 01       	movw	r16, r24
	
	uint8_t tmp[2];

	mpu6050_read_accel_X(tmp);
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	0e 94 a7 04 	call	0x94e	; 0x94e <mpu6050_read_accel_X>
	buff[0] = (tmp[0]<<8)|(tmp[1]);
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	98 2f       	mov	r25, r24
     9d8:	88 27       	eor	r24, r24
     9da:	2a 81       	ldd	r18, Y+2	; 0x02
     9dc:	82 2b       	or	r24, r18
     9de:	f8 01       	movw	r30, r16
     9e0:	91 83       	std	Z+1, r25	; 0x01
     9e2:	80 83       	st	Z, r24
	mpu6050_read_accel_Y(tmp);
     9e4:	ce 01       	movw	r24, r28
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	0e 94 b9 04 	call	0x972	; 0x972 <mpu6050_read_accel_Y>
	buff[1] = (tmp[0]<<8)|(tmp[1]);
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	98 2f       	mov	r25, r24
     9f2:	88 27       	eor	r24, r24
     9f4:	2a 81       	ldd	r18, Y+2	; 0x02
     9f6:	82 2b       	or	r24, r18
     9f8:	f8 01       	movw	r30, r16
     9fa:	93 83       	std	Z+3, r25	; 0x03
     9fc:	82 83       	std	Z+2, r24	; 0x02
	mpu6050_read_accel_Z(tmp);
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	0e 94 cb 04 	call	0x996	; 0x996 <mpu6050_read_accel_Z>
	buff[2] = (tmp[0]<<8)|(tmp[1]);
     a06:	29 81       	ldd	r18, Y+1	; 0x01
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	32 2f       	mov	r19, r18
     a0c:	22 27       	eor	r18, r18
     a0e:	8a 81       	ldd	r24, Y+2	; 0x02
     a10:	28 2b       	or	r18, r24
     a12:	f8 01       	movw	r30, r16
     a14:	35 83       	std	Z+5, r19	; 0x05
     a16:	24 83       	std	Z+4, r18	; 0x04
}
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <uart_init>:


// initialize UART
void uart_init() {
   
  UBRR0H = UBRRH_VALUE; //(uint8_t)(BAUD_PRESCALER >> 8);
     a26:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE; //(uint8_t)(BAUD_PRESCALER);
     a2a:	87 e6       	ldi	r24, 0x67	; 103
     a2c:	80 93 c4 00 	sts	0x00C4, r24

  UCSR0A &= ~(_BV(U2X0));
     a30:	e0 ec       	ldi	r30, 0xC0	; 192
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	8d 7f       	andi	r24, 0xFD	; 253
     a38:	80 83       	st	Z, r24

  UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8-bit data
     a3a:	86 e0       	ldi	r24, 0x06	; 6
     a3c:	80 93 c2 00 	sts	0x00C2, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);   // Enable RX and TX
     a40:	88 e9       	ldi	r24, 0x98	; 152
     a42:	80 93 c1 00 	sts	0x00C1, r24
     a46:	08 95       	ret

00000a48 <uart_putchar>:

  
}

void uart_putchar(char data) {
    while ( !( UCSR0A & (1<<UDRE0)) );
     a48:	e0 ec       	ldi	r30, 0xC0	; 192
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	90 81       	ld	r25, Z
     a4e:	95 ff       	sbrs	r25, 5
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <uart_putchar+0x4>
    UDR0 = data;
     a52:	80 93 c6 00 	sts	0x00C6, r24
     a56:	08 95       	ret

00000a58 <uart_putstring>:
char uart_getchar(void) {
    while ( !(UCSR0A & (1<<RXC0)) ) ;
    return UDR0;
}

void uart_putstring(char * s) {
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
  int i = 0;
  while(s[i]!='\0'){
     a5e:	88 81       	ld	r24, Y
     a60:	88 23       	and	r24, r24
     a62:	31 f0       	breq	.+12     	; 0xa70 <uart_putstring+0x18>
     a64:	21 96       	adiw	r28, 0x01	; 1
    uart_putchar(s[i]);
     a66:	0e 94 24 05 	call	0xa48	; 0xa48 <uart_putchar>
    return UDR0;
}

void uart_putstring(char * s) {
  int i = 0;
  while(s[i]!='\0'){
     a6a:	89 91       	ld	r24, Y+
     a6c:	81 11       	cpse	r24, r1
     a6e:	fb cf       	rjmp	.-10     	; 0xa66 <uart_putstring+0xe>
    uart_putchar(s[i]);
    ++i;
  };
  
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <uart_putdouble>:
	a = data >> 8;
	uart_putchar(a);
}


void uart_putdouble(double data){
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	2a 97       	sbiw	r28, 0x0a	; 10
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
	
	char datastring[10];
	snprintf(datastring, 10, "%f", data);
     a8e:	9f 93       	push	r25
     a90:	8f 93       	push	r24
     a92:	7f 93       	push	r23
     a94:	6f 93       	push	r22
     a96:	8e e6       	ldi	r24, 0x6E	; 110
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	1f 92       	push	r1
     aa0:	8a e0       	ldi	r24, 0x0A	; 10
     aa2:	8f 93       	push	r24
     aa4:	8e 01       	movw	r16, r28
     aa6:	0f 5f       	subi	r16, 0xFF	; 255
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	1f 93       	push	r17
     aac:	0f 93       	push	r16
     aae:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <snprintf>
	uart_putstring(datastring);
     ab2:	c8 01       	movw	r24, r16
     ab4:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_putstring>
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
	
}
     ac2:	2a 96       	adiw	r28, 0x0a	; 10
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <__subsf3>:
     ad8:	50 58       	subi	r21, 0x80	; 128

00000ada <__addsf3>:
     ada:	bb 27       	eor	r27, r27
     adc:	aa 27       	eor	r26, r26
     ade:	0e 94 84 05 	call	0xb08	; 0xb08 <__addsf3x>
     ae2:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_round>
     ae6:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_pscA>
     aea:	38 f0       	brcs	.+14     	; 0xafa <__addsf3+0x20>
     aec:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_pscB>
     af0:	20 f0       	brcs	.+8      	; 0xafa <__addsf3+0x20>
     af2:	39 f4       	brne	.+14     	; 0xb02 <__addsf3+0x28>
     af4:	9f 3f       	cpi	r25, 0xFF	; 255
     af6:	19 f4       	brne	.+6      	; 0xafe <__addsf3+0x24>
     af8:	26 f4       	brtc	.+8      	; 0xb02 <__addsf3+0x28>
     afa:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_nan>
     afe:	0e f4       	brtc	.+2      	; 0xb02 <__addsf3+0x28>
     b00:	e0 95       	com	r30
     b02:	e7 fb       	bst	r30, 7
     b04:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>

00000b08 <__addsf3x>:
     b08:	e9 2f       	mov	r30, r25
     b0a:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_split3>
     b0e:	58 f3       	brcs	.-42     	; 0xae6 <__addsf3+0xc>
     b10:	ba 17       	cp	r27, r26
     b12:	62 07       	cpc	r22, r18
     b14:	73 07       	cpc	r23, r19
     b16:	84 07       	cpc	r24, r20
     b18:	95 07       	cpc	r25, r21
     b1a:	20 f0       	brcs	.+8      	; 0xb24 <__addsf3x+0x1c>
     b1c:	79 f4       	brne	.+30     	; 0xb3c <__addsf3x+0x34>
     b1e:	a6 f5       	brtc	.+104    	; 0xb88 <__addsf3x+0x80>
     b20:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__fp_zero>
     b24:	0e f4       	brtc	.+2      	; 0xb28 <__addsf3x+0x20>
     b26:	e0 95       	com	r30
     b28:	0b 2e       	mov	r0, r27
     b2a:	ba 2f       	mov	r27, r26
     b2c:	a0 2d       	mov	r26, r0
     b2e:	0b 01       	movw	r0, r22
     b30:	b9 01       	movw	r22, r18
     b32:	90 01       	movw	r18, r0
     b34:	0c 01       	movw	r0, r24
     b36:	ca 01       	movw	r24, r20
     b38:	a0 01       	movw	r20, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	ff 27       	eor	r31, r31
     b3e:	59 1b       	sub	r21, r25
     b40:	99 f0       	breq	.+38     	; 0xb68 <__addsf3x+0x60>
     b42:	59 3f       	cpi	r21, 0xF9	; 249
     b44:	50 f4       	brcc	.+20     	; 0xb5a <__addsf3x+0x52>
     b46:	50 3e       	cpi	r21, 0xE0	; 224
     b48:	68 f1       	brcs	.+90     	; 0xba4 <__addsf3x+0x9c>
     b4a:	1a 16       	cp	r1, r26
     b4c:	f0 40       	sbci	r31, 0x00	; 0
     b4e:	a2 2f       	mov	r26, r18
     b50:	23 2f       	mov	r18, r19
     b52:	34 2f       	mov	r19, r20
     b54:	44 27       	eor	r20, r20
     b56:	58 5f       	subi	r21, 0xF8	; 248
     b58:	f3 cf       	rjmp	.-26     	; 0xb40 <__addsf3x+0x38>
     b5a:	46 95       	lsr	r20
     b5c:	37 95       	ror	r19
     b5e:	27 95       	ror	r18
     b60:	a7 95       	ror	r26
     b62:	f0 40       	sbci	r31, 0x00	; 0
     b64:	53 95       	inc	r21
     b66:	c9 f7       	brne	.-14     	; 0xb5a <__addsf3x+0x52>
     b68:	7e f4       	brtc	.+30     	; 0xb88 <__addsf3x+0x80>
     b6a:	1f 16       	cp	r1, r31
     b6c:	ba 0b       	sbc	r27, r26
     b6e:	62 0b       	sbc	r22, r18
     b70:	73 0b       	sbc	r23, r19
     b72:	84 0b       	sbc	r24, r20
     b74:	ba f0       	brmi	.+46     	; 0xba4 <__addsf3x+0x9c>
     b76:	91 50       	subi	r25, 0x01	; 1
     b78:	a1 f0       	breq	.+40     	; 0xba2 <__addsf3x+0x9a>
     b7a:	ff 0f       	add	r31, r31
     b7c:	bb 1f       	adc	r27, r27
     b7e:	66 1f       	adc	r22, r22
     b80:	77 1f       	adc	r23, r23
     b82:	88 1f       	adc	r24, r24
     b84:	c2 f7       	brpl	.-16     	; 0xb76 <__addsf3x+0x6e>
     b86:	0e c0       	rjmp	.+28     	; 0xba4 <__addsf3x+0x9c>
     b88:	ba 0f       	add	r27, r26
     b8a:	62 1f       	adc	r22, r18
     b8c:	73 1f       	adc	r23, r19
     b8e:	84 1f       	adc	r24, r20
     b90:	48 f4       	brcc	.+18     	; 0xba4 <__addsf3x+0x9c>
     b92:	87 95       	ror	r24
     b94:	77 95       	ror	r23
     b96:	67 95       	ror	r22
     b98:	b7 95       	ror	r27
     b9a:	f7 95       	ror	r31
     b9c:	9e 3f       	cpi	r25, 0xFE	; 254
     b9e:	08 f0       	brcs	.+2      	; 0xba2 <__addsf3x+0x9a>
     ba0:	b0 cf       	rjmp	.-160    	; 0xb02 <__addsf3+0x28>
     ba2:	93 95       	inc	r25
     ba4:	88 0f       	add	r24, r24
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <__addsf3x+0xa2>
     ba8:	99 27       	eor	r25, r25
     baa:	ee 0f       	add	r30, r30
     bac:	97 95       	ror	r25
     bae:	87 95       	ror	r24
     bb0:	08 95       	ret
     bb2:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_pscA>
     bb6:	60 f0       	brcs	.+24     	; 0xbd0 <__addsf3x+0xc8>
     bb8:	80 e8       	ldi	r24, 0x80	; 128
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <__addsf3x+0xb8>
     bbe:	9e ef       	ldi	r25, 0xFE	; 254
     bc0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_pscB>
     bc4:	28 f0       	brcs	.+10     	; 0xbd0 <__addsf3x+0xc8>
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	51 e0       	ldi	r21, 0x01	; 1
     bca:	71 f4       	brne	.+28     	; 0xbe8 <atan2+0x10>
     bcc:	5e ef       	ldi	r21, 0xFE	; 254
     bce:	0c c0       	rjmp	.+24     	; 0xbe8 <atan2+0x10>
     bd0:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_nan>
     bd4:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__fp_zero>

00000bd8 <atan2>:
     bd8:	e9 2f       	mov	r30, r25
     bda:	e0 78       	andi	r30, 0x80	; 128
     bdc:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_split3>
     be0:	40 f3       	brcs	.-48     	; 0xbb2 <__addsf3x+0xaa>
     be2:	09 2e       	mov	r0, r25
     be4:	05 2a       	or	r0, r21
     be6:	b1 f3       	breq	.-20     	; 0xbd4 <__addsf3x+0xcc>
     be8:	26 17       	cp	r18, r22
     bea:	37 07       	cpc	r19, r23
     bec:	48 07       	cpc	r20, r24
     bee:	59 07       	cpc	r21, r25
     bf0:	38 f0       	brcs	.+14     	; 0xc00 <atan2+0x28>
     bf2:	0e 2e       	mov	r0, r30
     bf4:	07 f8       	bld	r0, 7
     bf6:	e0 25       	eor	r30, r0
     bf8:	69 f0       	breq	.+26     	; 0xc14 <atan2+0x3c>
     bfa:	e0 25       	eor	r30, r0
     bfc:	e0 64       	ori	r30, 0x40	; 64
     bfe:	0a c0       	rjmp	.+20     	; 0xc14 <atan2+0x3c>
     c00:	ef 63       	ori	r30, 0x3F	; 63
     c02:	07 f8       	bld	r0, 7
     c04:	00 94       	com	r0
     c06:	07 fa       	bst	r0, 7
     c08:	db 01       	movw	r26, r22
     c0a:	b9 01       	movw	r22, r18
     c0c:	9d 01       	movw	r18, r26
     c0e:	dc 01       	movw	r26, r24
     c10:	ca 01       	movw	r24, r20
     c12:	ad 01       	movw	r20, r26
     c14:	ef 93       	push	r30
     c16:	0e 94 67 06 	call	0xcce	; 0xcce <__divsf3_pse>
     c1a:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_round>
     c1e:	0e 94 1c 06 	call	0xc38	; 0xc38 <atan>
     c22:	5f 91       	pop	r21
     c24:	55 23       	and	r21, r21
     c26:	39 f0       	breq	.+14     	; 0xc36 <atan2+0x5e>
     c28:	2b ed       	ldi	r18, 0xDB	; 219
     c2a:	3f e0       	ldi	r19, 0x0F	; 15
     c2c:	49 e4       	ldi	r20, 0x49	; 73
     c2e:	50 fd       	sbrc	r21, 0
     c30:	49 ec       	ldi	r20, 0xC9	; 201
     c32:	0c 94 6d 05 	jmp	0xada	; 0xada <__addsf3>
     c36:	08 95       	ret

00000c38 <atan>:
     c38:	df 93       	push	r29
     c3a:	dd 27       	eor	r29, r29
     c3c:	b9 2f       	mov	r27, r25
     c3e:	bf 77       	andi	r27, 0x7F	; 127
     c40:	40 e8       	ldi	r20, 0x80	; 128
     c42:	5f e3       	ldi	r21, 0x3F	; 63
     c44:	16 16       	cp	r1, r22
     c46:	17 06       	cpc	r1, r23
     c48:	48 07       	cpc	r20, r24
     c4a:	5b 07       	cpc	r21, r27
     c4c:	18 f4       	brcc	.+6      	; 0xc54 <atan+0x1c>
     c4e:	d9 2f       	mov	r29, r25
     c50:	0e 94 a0 07 	call	0xf40	; 0xf40 <inverse>
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	7f 93       	push	r23
     c5a:	6f 93       	push	r22
     c5c:	0e 94 15 08 	call	0x102a	; 0x102a <square>
     c60:	e8 e6       	ldi	r30, 0x68	; 104
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_powser>
     c68:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_round>
     c6c:	2f 91       	pop	r18
     c6e:	3f 91       	pop	r19
     c70:	4f 91       	pop	r20
     c72:	5f 91       	pop	r21
     c74:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3x>
     c78:	dd 23       	and	r29, r29
     c7a:	51 f0       	breq	.+20     	; 0xc90 <atan+0x58>
     c7c:	90 58       	subi	r25, 0x80	; 128
     c7e:	a2 ea       	ldi	r26, 0xA2	; 162
     c80:	2a ed       	ldi	r18, 0xDA	; 218
     c82:	3f e0       	ldi	r19, 0x0F	; 15
     c84:	49 ec       	ldi	r20, 0xC9	; 201
     c86:	5f e3       	ldi	r21, 0x3F	; 63
     c88:	d0 78       	andi	r29, 0x80	; 128
     c8a:	5d 27       	eor	r21, r29
     c8c:	0e 94 84 05 	call	0xb08	; 0xb08 <__addsf3x>
     c90:	df 91       	pop	r29
     c92:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_round>

00000c96 <__cmpsf2>:
     c96:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_cmp>
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <__cmpsf2+0x8>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	08 95       	ret

00000ca0 <__divsf3>:
     ca0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__divsf3x>
     ca4:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_round>
     ca8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_pscB>
     cac:	58 f0       	brcs	.+22     	; 0xcc4 <__divsf3+0x24>
     cae:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_pscA>
     cb2:	40 f0       	brcs	.+16     	; 0xcc4 <__divsf3+0x24>
     cb4:	29 f4       	brne	.+10     	; 0xcc0 <__divsf3+0x20>
     cb6:	5f 3f       	cpi	r21, 0xFF	; 255
     cb8:	29 f0       	breq	.+10     	; 0xcc4 <__divsf3+0x24>
     cba:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>
     cbe:	51 11       	cpse	r21, r1
     cc0:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_szero>
     cc4:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_nan>

00000cc8 <__divsf3x>:
     cc8:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_split3>
     ccc:	68 f3       	brcs	.-38     	; 0xca8 <__divsf3+0x8>

00000cce <__divsf3_pse>:
     cce:	99 23       	and	r25, r25
     cd0:	b1 f3       	breq	.-20     	; 0xcbe <__divsf3+0x1e>
     cd2:	55 23       	and	r21, r21
     cd4:	91 f3       	breq	.-28     	; 0xcba <__divsf3+0x1a>
     cd6:	95 1b       	sub	r25, r21
     cd8:	55 0b       	sbc	r21, r21
     cda:	bb 27       	eor	r27, r27
     cdc:	aa 27       	eor	r26, r26
     cde:	62 17       	cp	r22, r18
     ce0:	73 07       	cpc	r23, r19
     ce2:	84 07       	cpc	r24, r20
     ce4:	38 f0       	brcs	.+14     	; 0xcf4 <__divsf3_pse+0x26>
     ce6:	9f 5f       	subi	r25, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	44 1f       	adc	r20, r20
     cf0:	aa 1f       	adc	r26, r26
     cf2:	a9 f3       	breq	.-22     	; 0xcde <__divsf3_pse+0x10>
     cf4:	35 d0       	rcall	.+106    	; 0xd60 <__divsf3_pse+0x92>
     cf6:	0e 2e       	mov	r0, r30
     cf8:	3a f0       	brmi	.+14     	; 0xd08 <__divsf3_pse+0x3a>
     cfa:	e0 e8       	ldi	r30, 0x80	; 128
     cfc:	32 d0       	rcall	.+100    	; 0xd62 <__divsf3_pse+0x94>
     cfe:	91 50       	subi	r25, 0x01	; 1
     d00:	50 40       	sbci	r21, 0x00	; 0
     d02:	e6 95       	lsr	r30
     d04:	00 1c       	adc	r0, r0
     d06:	ca f7       	brpl	.-14     	; 0xcfa <__divsf3_pse+0x2c>
     d08:	2b d0       	rcall	.+86     	; 0xd60 <__divsf3_pse+0x92>
     d0a:	fe 2f       	mov	r31, r30
     d0c:	29 d0       	rcall	.+82     	; 0xd60 <__divsf3_pse+0x92>
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	88 1f       	adc	r24, r24
     d14:	bb 1f       	adc	r27, r27
     d16:	26 17       	cp	r18, r22
     d18:	37 07       	cpc	r19, r23
     d1a:	48 07       	cpc	r20, r24
     d1c:	ab 07       	cpc	r26, r27
     d1e:	b0 e8       	ldi	r27, 0x80	; 128
     d20:	09 f0       	breq	.+2      	; 0xd24 <__divsf3_pse+0x56>
     d22:	bb 0b       	sbc	r27, r27
     d24:	80 2d       	mov	r24, r0
     d26:	bf 01       	movw	r22, r30
     d28:	ff 27       	eor	r31, r31
     d2a:	93 58       	subi	r25, 0x83	; 131
     d2c:	5f 4f       	sbci	r21, 0xFF	; 255
     d2e:	3a f0       	brmi	.+14     	; 0xd3e <__divsf3_pse+0x70>
     d30:	9e 3f       	cpi	r25, 0xFE	; 254
     d32:	51 05       	cpc	r21, r1
     d34:	78 f0       	brcs	.+30     	; 0xd54 <__divsf3_pse+0x86>
     d36:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>
     d3a:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_szero>
     d3e:	5f 3f       	cpi	r21, 0xFF	; 255
     d40:	e4 f3       	brlt	.-8      	; 0xd3a <__divsf3_pse+0x6c>
     d42:	98 3e       	cpi	r25, 0xE8	; 232
     d44:	d4 f3       	brlt	.-12     	; 0xd3a <__divsf3_pse+0x6c>
     d46:	86 95       	lsr	r24
     d48:	77 95       	ror	r23
     d4a:	67 95       	ror	r22
     d4c:	b7 95       	ror	r27
     d4e:	f7 95       	ror	r31
     d50:	9f 5f       	subi	r25, 0xFF	; 255
     d52:	c9 f7       	brne	.-14     	; 0xd46 <__divsf3_pse+0x78>
     d54:	88 0f       	add	r24, r24
     d56:	91 1d       	adc	r25, r1
     d58:	96 95       	lsr	r25
     d5a:	87 95       	ror	r24
     d5c:	97 f9       	bld	r25, 7
     d5e:	08 95       	ret
     d60:	e1 e0       	ldi	r30, 0x01	; 1
     d62:	66 0f       	add	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	88 1f       	adc	r24, r24
     d68:	bb 1f       	adc	r27, r27
     d6a:	62 17       	cp	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	ba 07       	cpc	r27, r26
     d72:	20 f0       	brcs	.+8      	; 0xd7c <__divsf3_pse+0xae>
     d74:	62 1b       	sub	r22, r18
     d76:	73 0b       	sbc	r23, r19
     d78:	84 0b       	sbc	r24, r20
     d7a:	ba 0b       	sbc	r27, r26
     d7c:	ee 1f       	adc	r30, r30
     d7e:	88 f7       	brcc	.-30     	; 0xd62 <__divsf3_pse+0x94>
     d80:	e0 95       	com	r30
     d82:	08 95       	ret

00000d84 <__floatunsisf>:
     d84:	e8 94       	clt
     d86:	09 c0       	rjmp	.+18     	; 0xd9a <__floatsisf+0x12>

00000d88 <__floatsisf>:
     d88:	97 fb       	bst	r25, 7
     d8a:	3e f4       	brtc	.+14     	; 0xd9a <__floatsisf+0x12>
     d8c:	90 95       	com	r25
     d8e:	80 95       	com	r24
     d90:	70 95       	com	r23
     d92:	61 95       	neg	r22
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f 4f       	sbci	r24, 0xFF	; 255
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	99 23       	and	r25, r25
     d9c:	a9 f0       	breq	.+42     	; 0xdc8 <__floatsisf+0x40>
     d9e:	f9 2f       	mov	r31, r25
     da0:	96 e9       	ldi	r25, 0x96	; 150
     da2:	bb 27       	eor	r27, r27
     da4:	93 95       	inc	r25
     da6:	f6 95       	lsr	r31
     da8:	87 95       	ror	r24
     daa:	77 95       	ror	r23
     dac:	67 95       	ror	r22
     dae:	b7 95       	ror	r27
     db0:	f1 11       	cpse	r31, r1
     db2:	f8 cf       	rjmp	.-16     	; 0xda4 <__floatsisf+0x1c>
     db4:	fa f4       	brpl	.+62     	; 0xdf4 <__floatsisf+0x6c>
     db6:	bb 0f       	add	r27, r27
     db8:	11 f4       	brne	.+4      	; 0xdbe <__floatsisf+0x36>
     dba:	60 ff       	sbrs	r22, 0
     dbc:	1b c0       	rjmp	.+54     	; 0xdf4 <__floatsisf+0x6c>
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	16 c0       	rjmp	.+44     	; 0xdf4 <__floatsisf+0x6c>
     dc8:	88 23       	and	r24, r24
     dca:	11 f0       	breq	.+4      	; 0xdd0 <__floatsisf+0x48>
     dcc:	96 e9       	ldi	r25, 0x96	; 150
     dce:	11 c0       	rjmp	.+34     	; 0xdf2 <__floatsisf+0x6a>
     dd0:	77 23       	and	r23, r23
     dd2:	21 f0       	breq	.+8      	; 0xddc <__floatsisf+0x54>
     dd4:	9e e8       	ldi	r25, 0x8E	; 142
     dd6:	87 2f       	mov	r24, r23
     dd8:	76 2f       	mov	r23, r22
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <__floatsisf+0x5e>
     ddc:	66 23       	and	r22, r22
     dde:	71 f0       	breq	.+28     	; 0xdfc <__floatsisf+0x74>
     de0:	96 e8       	ldi	r25, 0x86	; 134
     de2:	86 2f       	mov	r24, r22
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	2a f0       	brmi	.+10     	; 0xdf4 <__floatsisf+0x6c>
     dea:	9a 95       	dec	r25
     dec:	66 0f       	add	r22, r22
     dee:	77 1f       	adc	r23, r23
     df0:	88 1f       	adc	r24, r24
     df2:	da f7       	brpl	.-10     	; 0xdea <__floatsisf+0x62>
     df4:	88 0f       	add	r24, r24
     df6:	96 95       	lsr	r25
     df8:	87 95       	ror	r24
     dfa:	97 f9       	bld	r25, 7
     dfc:	08 95       	ret

00000dfe <__fp_cmp>:
     dfe:	99 0f       	add	r25, r25
     e00:	00 08       	sbc	r0, r0
     e02:	55 0f       	add	r21, r21
     e04:	aa 0b       	sbc	r26, r26
     e06:	e0 e8       	ldi	r30, 0x80	; 128
     e08:	fe ef       	ldi	r31, 0xFE	; 254
     e0a:	16 16       	cp	r1, r22
     e0c:	17 06       	cpc	r1, r23
     e0e:	e8 07       	cpc	r30, r24
     e10:	f9 07       	cpc	r31, r25
     e12:	c0 f0       	brcs	.+48     	; 0xe44 <__fp_cmp+0x46>
     e14:	12 16       	cp	r1, r18
     e16:	13 06       	cpc	r1, r19
     e18:	e4 07       	cpc	r30, r20
     e1a:	f5 07       	cpc	r31, r21
     e1c:	98 f0       	brcs	.+38     	; 0xe44 <__fp_cmp+0x46>
     e1e:	62 1b       	sub	r22, r18
     e20:	73 0b       	sbc	r23, r19
     e22:	84 0b       	sbc	r24, r20
     e24:	95 0b       	sbc	r25, r21
     e26:	39 f4       	brne	.+14     	; 0xe36 <__fp_cmp+0x38>
     e28:	0a 26       	eor	r0, r26
     e2a:	61 f0       	breq	.+24     	; 0xe44 <__fp_cmp+0x46>
     e2c:	23 2b       	or	r18, r19
     e2e:	24 2b       	or	r18, r20
     e30:	25 2b       	or	r18, r21
     e32:	21 f4       	brne	.+8      	; 0xe3c <__fp_cmp+0x3e>
     e34:	08 95       	ret
     e36:	0a 26       	eor	r0, r26
     e38:	09 f4       	brne	.+2      	; 0xe3c <__fp_cmp+0x3e>
     e3a:	a1 40       	sbci	r26, 0x01	; 1
     e3c:	a6 95       	lsr	r26
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	81 1d       	adc	r24, r1
     e42:	81 1d       	adc	r24, r1
     e44:	08 95       	ret

00000e46 <__fp_inf>:
     e46:	97 f9       	bld	r25, 7
     e48:	9f 67       	ori	r25, 0x7F	; 127
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	08 95       	ret

00000e52 <__fp_nan>:
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	80 ec       	ldi	r24, 0xC0	; 192
     e56:	08 95       	ret

00000e58 <__fp_powser>:
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	1f 93       	push	r17
     e5e:	0f 93       	push	r16
     e60:	ff 92       	push	r15
     e62:	ef 92       	push	r14
     e64:	df 92       	push	r13
     e66:	7b 01       	movw	r14, r22
     e68:	8c 01       	movw	r16, r24
     e6a:	68 94       	set
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <__fp_powser+0x22>
     e6e:	da 2e       	mov	r13, r26
     e70:	ef 01       	movw	r28, r30
     e72:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3x>
     e76:	fe 01       	movw	r30, r28
     e78:	e8 94       	clt
     e7a:	a5 91       	lpm	r26, Z+
     e7c:	25 91       	lpm	r18, Z+
     e7e:	35 91       	lpm	r19, Z+
     e80:	45 91       	lpm	r20, Z+
     e82:	55 91       	lpm	r21, Z+
     e84:	a6 f3       	brts	.-24     	; 0xe6e <__fp_powser+0x16>
     e86:	ef 01       	movw	r28, r30
     e88:	0e 94 84 05 	call	0xb08	; 0xb08 <__addsf3x>
     e8c:	fe 01       	movw	r30, r28
     e8e:	97 01       	movw	r18, r14
     e90:	a8 01       	movw	r20, r16
     e92:	da 94       	dec	r13
     e94:	69 f7       	brne	.-38     	; 0xe70 <__fp_powser+0x18>
     e96:	df 90       	pop	r13
     e98:	ef 90       	pop	r14
     e9a:	ff 90       	pop	r15
     e9c:	0f 91       	pop	r16
     e9e:	1f 91       	pop	r17
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <__fp_pscA>:
     ea6:	00 24       	eor	r0, r0
     ea8:	0a 94       	dec	r0
     eaa:	16 16       	cp	r1, r22
     eac:	17 06       	cpc	r1, r23
     eae:	18 06       	cpc	r1, r24
     eb0:	09 06       	cpc	r0, r25
     eb2:	08 95       	ret

00000eb4 <__fp_pscB>:
     eb4:	00 24       	eor	r0, r0
     eb6:	0a 94       	dec	r0
     eb8:	12 16       	cp	r1, r18
     eba:	13 06       	cpc	r1, r19
     ebc:	14 06       	cpc	r1, r20
     ebe:	05 06       	cpc	r0, r21
     ec0:	08 95       	ret

00000ec2 <__fp_round>:
     ec2:	09 2e       	mov	r0, r25
     ec4:	03 94       	inc	r0
     ec6:	00 0c       	add	r0, r0
     ec8:	11 f4       	brne	.+4      	; 0xece <__fp_round+0xc>
     eca:	88 23       	and	r24, r24
     ecc:	52 f0       	brmi	.+20     	; 0xee2 <__fp_round+0x20>
     ece:	bb 0f       	add	r27, r27
     ed0:	40 f4       	brcc	.+16     	; 0xee2 <__fp_round+0x20>
     ed2:	bf 2b       	or	r27, r31
     ed4:	11 f4       	brne	.+4      	; 0xeda <__fp_round+0x18>
     ed6:	60 ff       	sbrs	r22, 0
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <__fp_round+0x20>
     eda:	6f 5f       	subi	r22, 0xFF	; 255
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	8f 4f       	sbci	r24, 0xFF	; 255
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	08 95       	ret

00000ee4 <__fp_split3>:
     ee4:	57 fd       	sbrc	r21, 7
     ee6:	90 58       	subi	r25, 0x80	; 128
     ee8:	44 0f       	add	r20, r20
     eea:	55 1f       	adc	r21, r21
     eec:	59 f0       	breq	.+22     	; 0xf04 <__fp_splitA+0x10>
     eee:	5f 3f       	cpi	r21, 0xFF	; 255
     ef0:	71 f0       	breq	.+28     	; 0xf0e <__fp_splitA+0x1a>
     ef2:	47 95       	ror	r20

00000ef4 <__fp_splitA>:
     ef4:	88 0f       	add	r24, r24
     ef6:	97 fb       	bst	r25, 7
     ef8:	99 1f       	adc	r25, r25
     efa:	61 f0       	breq	.+24     	; 0xf14 <__fp_splitA+0x20>
     efc:	9f 3f       	cpi	r25, 0xFF	; 255
     efe:	79 f0       	breq	.+30     	; 0xf1e <__fp_splitA+0x2a>
     f00:	87 95       	ror	r24
     f02:	08 95       	ret
     f04:	12 16       	cp	r1, r18
     f06:	13 06       	cpc	r1, r19
     f08:	14 06       	cpc	r1, r20
     f0a:	55 1f       	adc	r21, r21
     f0c:	f2 cf       	rjmp	.-28     	; 0xef2 <__fp_split3+0xe>
     f0e:	46 95       	lsr	r20
     f10:	f1 df       	rcall	.-30     	; 0xef4 <__fp_splitA>
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <__fp_splitA+0x30>
     f14:	16 16       	cp	r1, r22
     f16:	17 06       	cpc	r1, r23
     f18:	18 06       	cpc	r1, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	f1 cf       	rjmp	.-30     	; 0xf00 <__fp_splitA+0xc>
     f1e:	86 95       	lsr	r24
     f20:	71 05       	cpc	r23, r1
     f22:	61 05       	cpc	r22, r1
     f24:	08 94       	sec
     f26:	08 95       	ret

00000f28 <__fp_zero>:
     f28:	e8 94       	clt

00000f2a <__fp_szero>:
     f2a:	bb 27       	eor	r27, r27
     f2c:	66 27       	eor	r22, r22
     f2e:	77 27       	eor	r23, r23
     f30:	cb 01       	movw	r24, r22
     f32:	97 f9       	bld	r25, 7
     f34:	08 95       	ret

00000f36 <__gesf2>:
     f36:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_cmp>
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <__gesf2+0x8>
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	08 95       	ret

00000f40 <inverse>:
     f40:	9b 01       	movw	r18, r22
     f42:	ac 01       	movw	r20, r24
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	80 e8       	ldi	r24, 0x80	; 128
     f4a:	9f e3       	ldi	r25, 0x3F	; 63
     f4c:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__divsf3>

00000f50 <__mulsf3>:
     f50:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3x>
     f54:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__fp_round>
     f58:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_pscA>
     f5c:	38 f0       	brcs	.+14     	; 0xf6c <__mulsf3+0x1c>
     f5e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_pscB>
     f62:	20 f0       	brcs	.+8      	; 0xf6c <__mulsf3+0x1c>
     f64:	95 23       	and	r25, r21
     f66:	11 f0       	breq	.+4      	; 0xf6c <__mulsf3+0x1c>
     f68:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>
     f6c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_nan>
     f70:	11 24       	eor	r1, r1
     f72:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_szero>

00000f76 <__mulsf3x>:
     f76:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_split3>
     f7a:	70 f3       	brcs	.-36     	; 0xf58 <__mulsf3+0x8>

00000f7c <__mulsf3_pse>:
     f7c:	95 9f       	mul	r25, r21
     f7e:	c1 f3       	breq	.-16     	; 0xf70 <__mulsf3+0x20>
     f80:	95 0f       	add	r25, r21
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	55 1f       	adc	r21, r21
     f86:	62 9f       	mul	r22, r18
     f88:	f0 01       	movw	r30, r0
     f8a:	72 9f       	mul	r23, r18
     f8c:	bb 27       	eor	r27, r27
     f8e:	f0 0d       	add	r31, r0
     f90:	b1 1d       	adc	r27, r1
     f92:	63 9f       	mul	r22, r19
     f94:	aa 27       	eor	r26, r26
     f96:	f0 0d       	add	r31, r0
     f98:	b1 1d       	adc	r27, r1
     f9a:	aa 1f       	adc	r26, r26
     f9c:	64 9f       	mul	r22, r20
     f9e:	66 27       	eor	r22, r22
     fa0:	b0 0d       	add	r27, r0
     fa2:	a1 1d       	adc	r26, r1
     fa4:	66 1f       	adc	r22, r22
     fa6:	82 9f       	mul	r24, r18
     fa8:	22 27       	eor	r18, r18
     faa:	b0 0d       	add	r27, r0
     fac:	a1 1d       	adc	r26, r1
     fae:	62 1f       	adc	r22, r18
     fb0:	73 9f       	mul	r23, r19
     fb2:	b0 0d       	add	r27, r0
     fb4:	a1 1d       	adc	r26, r1
     fb6:	62 1f       	adc	r22, r18
     fb8:	83 9f       	mul	r24, r19
     fba:	a0 0d       	add	r26, r0
     fbc:	61 1d       	adc	r22, r1
     fbe:	22 1f       	adc	r18, r18
     fc0:	74 9f       	mul	r23, r20
     fc2:	33 27       	eor	r19, r19
     fc4:	a0 0d       	add	r26, r0
     fc6:	61 1d       	adc	r22, r1
     fc8:	23 1f       	adc	r18, r19
     fca:	84 9f       	mul	r24, r20
     fcc:	60 0d       	add	r22, r0
     fce:	21 1d       	adc	r18, r1
     fd0:	82 2f       	mov	r24, r18
     fd2:	76 2f       	mov	r23, r22
     fd4:	6a 2f       	mov	r22, r26
     fd6:	11 24       	eor	r1, r1
     fd8:	9f 57       	subi	r25, 0x7F	; 127
     fda:	50 40       	sbci	r21, 0x00	; 0
     fdc:	9a f0       	brmi	.+38     	; 0x1004 <__mulsf3_pse+0x88>
     fde:	f1 f0       	breq	.+60     	; 0x101c <__mulsf3_pse+0xa0>
     fe0:	88 23       	and	r24, r24
     fe2:	4a f0       	brmi	.+18     	; 0xff6 <__mulsf3_pse+0x7a>
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	bb 1f       	adc	r27, r27
     fea:	66 1f       	adc	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	91 50       	subi	r25, 0x01	; 1
     ff2:	50 40       	sbci	r21, 0x00	; 0
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <__mulsf3_pse+0x64>
     ff6:	9e 3f       	cpi	r25, 0xFE	; 254
     ff8:	51 05       	cpc	r21, r1
     ffa:	80 f0       	brcs	.+32     	; 0x101c <__mulsf3_pse+0xa0>
     ffc:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__fp_inf>
    1000:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_szero>
    1004:	5f 3f       	cpi	r21, 0xFF	; 255
    1006:	e4 f3       	brlt	.-8      	; 0x1000 <__mulsf3_pse+0x84>
    1008:	98 3e       	cpi	r25, 0xE8	; 232
    100a:	d4 f3       	brlt	.-12     	; 0x1000 <__mulsf3_pse+0x84>
    100c:	86 95       	lsr	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	b7 95       	ror	r27
    1014:	f7 95       	ror	r31
    1016:	e7 95       	ror	r30
    1018:	9f 5f       	subi	r25, 0xFF	; 255
    101a:	c1 f7       	brne	.-16     	; 0x100c <__mulsf3_pse+0x90>
    101c:	fe 2b       	or	r31, r30
    101e:	88 0f       	add	r24, r24
    1020:	91 1d       	adc	r25, r1
    1022:	96 95       	lsr	r25
    1024:	87 95       	ror	r24
    1026:	97 f9       	bld	r25, 7
    1028:	08 95       	ret

0000102a <square>:
    102a:	9b 01       	movw	r18, r22
    102c:	ac 01       	movw	r20, r24
    102e:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__mulsf3>

00001032 <vfprintf>:
    1032:	a3 e1       	ldi	r26, 0x13	; 19
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ef e1       	ldi	r30, 0x1F	; 31
    1038:	f8 e0       	ldi	r31, 0x08	; 8
    103a:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__prologue_saves__>
    103e:	6c 01       	movw	r12, r24
    1040:	4b 01       	movw	r8, r22
    1042:	2a 01       	movw	r4, r20
    1044:	fc 01       	movw	r30, r24
    1046:	17 82       	std	Z+7, r1	; 0x07
    1048:	16 82       	std	Z+6, r1	; 0x06
    104a:	83 81       	ldd	r24, Z+3	; 0x03
    104c:	81 ff       	sbrs	r24, 1
    104e:	43 c3       	rjmp	.+1670   	; 0x16d6 <vfprintf+0x6a4>
    1050:	ae 01       	movw	r20, r28
    1052:	4f 5f       	subi	r20, 0xFF	; 255
    1054:	5f 4f       	sbci	r21, 0xFF	; 255
    1056:	3a 01       	movw	r6, r20
    1058:	f6 01       	movw	r30, r12
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	f4 01       	movw	r30, r8
    105e:	93 fd       	sbrc	r25, 3
    1060:	85 91       	lpm	r24, Z+
    1062:	93 ff       	sbrs	r25, 3
    1064:	81 91       	ld	r24, Z+
    1066:	4f 01       	movw	r8, r30
    1068:	88 23       	and	r24, r24
    106a:	09 f4       	brne	.+2      	; 0x106e <vfprintf+0x3c>
    106c:	30 c3       	rjmp	.+1632   	; 0x16ce <vfprintf+0x69c>
    106e:	85 32       	cpi	r24, 0x25	; 37
    1070:	39 f4       	brne	.+14     	; 0x1080 <vfprintf+0x4e>
    1072:	93 fd       	sbrc	r25, 3
    1074:	85 91       	lpm	r24, Z+
    1076:	93 ff       	sbrs	r25, 3
    1078:	81 91       	ld	r24, Z+
    107a:	4f 01       	movw	r8, r30
    107c:	85 32       	cpi	r24, 0x25	; 37
    107e:	39 f4       	brne	.+14     	; 0x108e <vfprintf+0x5c>
    1080:	b6 01       	movw	r22, r12
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1088:	52 01       	movw	r10, r4
    108a:	25 01       	movw	r4, r10
    108c:	e5 cf       	rjmp	.-54     	; 0x1058 <vfprintf+0x26>
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	f1 2c       	mov	r15, r1
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	20 32       	cpi	r18, 0x20	; 32
    1096:	a0 f4       	brcc	.+40     	; 0x10c0 <vfprintf+0x8e>
    1098:	8b 32       	cpi	r24, 0x2B	; 43
    109a:	69 f0       	breq	.+26     	; 0x10b6 <vfprintf+0x84>
    109c:	30 f4       	brcc	.+12     	; 0x10aa <vfprintf+0x78>
    109e:	80 32       	cpi	r24, 0x20	; 32
    10a0:	59 f0       	breq	.+22     	; 0x10b8 <vfprintf+0x86>
    10a2:	83 32       	cpi	r24, 0x23	; 35
    10a4:	69 f4       	brne	.+26     	; 0x10c0 <vfprintf+0x8e>
    10a6:	20 61       	ori	r18, 0x10	; 16
    10a8:	2c c0       	rjmp	.+88     	; 0x1102 <vfprintf+0xd0>
    10aa:	8d 32       	cpi	r24, 0x2D	; 45
    10ac:	39 f0       	breq	.+14     	; 0x10bc <vfprintf+0x8a>
    10ae:	80 33       	cpi	r24, 0x30	; 48
    10b0:	39 f4       	brne	.+14     	; 0x10c0 <vfprintf+0x8e>
    10b2:	21 60       	ori	r18, 0x01	; 1
    10b4:	26 c0       	rjmp	.+76     	; 0x1102 <vfprintf+0xd0>
    10b6:	22 60       	ori	r18, 0x02	; 2
    10b8:	24 60       	ori	r18, 0x04	; 4
    10ba:	23 c0       	rjmp	.+70     	; 0x1102 <vfprintf+0xd0>
    10bc:	28 60       	ori	r18, 0x08	; 8
    10be:	21 c0       	rjmp	.+66     	; 0x1102 <vfprintf+0xd0>
    10c0:	27 fd       	sbrc	r18, 7
    10c2:	27 c0       	rjmp	.+78     	; 0x1112 <vfprintf+0xe0>
    10c4:	30 ed       	ldi	r19, 0xD0	; 208
    10c6:	38 0f       	add	r19, r24
    10c8:	3a 30       	cpi	r19, 0x0A	; 10
    10ca:	78 f4       	brcc	.+30     	; 0x10ea <vfprintf+0xb8>
    10cc:	26 ff       	sbrs	r18, 6
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <vfprintf+0xaa>
    10d0:	fa e0       	ldi	r31, 0x0A	; 10
    10d2:	1f 9f       	mul	r17, r31
    10d4:	30 0d       	add	r19, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	13 2f       	mov	r17, r19
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <vfprintf+0xd0>
    10dc:	4a e0       	ldi	r20, 0x0A	; 10
    10de:	f4 9e       	mul	r15, r20
    10e0:	30 0d       	add	r19, r0
    10e2:	11 24       	eor	r1, r1
    10e4:	f3 2e       	mov	r15, r19
    10e6:	20 62       	ori	r18, 0x20	; 32
    10e8:	0c c0       	rjmp	.+24     	; 0x1102 <vfprintf+0xd0>
    10ea:	8e 32       	cpi	r24, 0x2E	; 46
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <vfprintf+0xc4>
    10ee:	26 fd       	sbrc	r18, 6
    10f0:	ee c2       	rjmp	.+1500   	; 0x16ce <vfprintf+0x69c>
    10f2:	20 64       	ori	r18, 0x40	; 64
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <vfprintf+0xd0>
    10f6:	8c 36       	cpi	r24, 0x6C	; 108
    10f8:	11 f4       	brne	.+4      	; 0x10fe <vfprintf+0xcc>
    10fa:	20 68       	ori	r18, 0x80	; 128
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <vfprintf+0xd0>
    10fe:	88 36       	cpi	r24, 0x68	; 104
    1100:	41 f4       	brne	.+16     	; 0x1112 <vfprintf+0xe0>
    1102:	f4 01       	movw	r30, r8
    1104:	93 fd       	sbrc	r25, 3
    1106:	85 91       	lpm	r24, Z+
    1108:	93 ff       	sbrs	r25, 3
    110a:	81 91       	ld	r24, Z+
    110c:	4f 01       	movw	r8, r30
    110e:	81 11       	cpse	r24, r1
    1110:	c1 cf       	rjmp	.-126    	; 0x1094 <vfprintf+0x62>
    1112:	9b eb       	ldi	r25, 0xBB	; 187
    1114:	98 0f       	add	r25, r24
    1116:	93 30       	cpi	r25, 0x03	; 3
    1118:	18 f4       	brcc	.+6      	; 0x1120 <vfprintf+0xee>
    111a:	20 61       	ori	r18, 0x10	; 16
    111c:	80 5e       	subi	r24, 0xE0	; 224
    111e:	06 c0       	rjmp	.+12     	; 0x112c <vfprintf+0xfa>
    1120:	9b e9       	ldi	r25, 0x9B	; 155
    1122:	98 0f       	add	r25, r24
    1124:	93 30       	cpi	r25, 0x03	; 3
    1126:	08 f0       	brcs	.+2      	; 0x112a <vfprintf+0xf8>
    1128:	71 c1       	rjmp	.+738    	; 0x140c <vfprintf+0x3da>
    112a:	2f 7e       	andi	r18, 0xEF	; 239
    112c:	26 ff       	sbrs	r18, 6
    112e:	16 e0       	ldi	r17, 0x06	; 6
    1130:	2f 73       	andi	r18, 0x3F	; 63
    1132:	32 2e       	mov	r3, r18
    1134:	85 36       	cpi	r24, 0x65	; 101
    1136:	19 f4       	brne	.+6      	; 0x113e <vfprintf+0x10c>
    1138:	20 64       	ori	r18, 0x40	; 64
    113a:	32 2e       	mov	r3, r18
    113c:	08 c0       	rjmp	.+16     	; 0x114e <vfprintf+0x11c>
    113e:	86 36       	cpi	r24, 0x66	; 102
    1140:	21 f4       	brne	.+8      	; 0x114a <vfprintf+0x118>
    1142:	f2 2f       	mov	r31, r18
    1144:	f0 68       	ori	r31, 0x80	; 128
    1146:	3f 2e       	mov	r3, r31
    1148:	02 c0       	rjmp	.+4      	; 0x114e <vfprintf+0x11c>
    114a:	11 11       	cpse	r17, r1
    114c:	11 50       	subi	r17, 0x01	; 1
    114e:	37 fe       	sbrs	r3, 7
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <vfprintf+0x12e>
    1152:	1c 33       	cpi	r17, 0x3C	; 60
    1154:	50 f4       	brcc	.+20     	; 0x116a <vfprintf+0x138>
    1156:	ee 24       	eor	r14, r14
    1158:	e3 94       	inc	r14
    115a:	e1 0e       	add	r14, r17
    115c:	27 e0       	ldi	r18, 0x07	; 7
    115e:	0b c0       	rjmp	.+22     	; 0x1176 <vfprintf+0x144>
    1160:	18 30       	cpi	r17, 0x08	; 8
    1162:	38 f0       	brcs	.+14     	; 0x1172 <vfprintf+0x140>
    1164:	27 e0       	ldi	r18, 0x07	; 7
    1166:	17 e0       	ldi	r17, 0x07	; 7
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <vfprintf+0x142>
    116a:	27 e0       	ldi	r18, 0x07	; 7
    116c:	4c e3       	ldi	r20, 0x3C	; 60
    116e:	e4 2e       	mov	r14, r20
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <vfprintf+0x144>
    1172:	21 2f       	mov	r18, r17
    1174:	e1 2c       	mov	r14, r1
    1176:	52 01       	movw	r10, r4
    1178:	44 e0       	ldi	r20, 0x04	; 4
    117a:	a4 0e       	add	r10, r20
    117c:	b1 1c       	adc	r11, r1
    117e:	f2 01       	movw	r30, r4
    1180:	60 81       	ld	r22, Z
    1182:	71 81       	ldd	r23, Z+1	; 0x01
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	93 81       	ldd	r25, Z+3	; 0x03
    1188:	0e 2d       	mov	r16, r14
    118a:	a3 01       	movw	r20, r6
    118c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__ftoa_engine>
    1190:	2c 01       	movw	r4, r24
    1192:	09 81       	ldd	r16, Y+1	; 0x01
    1194:	00 ff       	sbrs	r16, 0
    1196:	02 c0       	rjmp	.+4      	; 0x119c <vfprintf+0x16a>
    1198:	03 ff       	sbrs	r16, 3
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <vfprintf+0x178>
    119c:	31 fc       	sbrc	r3, 1
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <vfprintf+0x17e>
    11a0:	32 fe       	sbrs	r3, 2
    11a2:	09 c0       	rjmp	.+18     	; 0x11b6 <vfprintf+0x184>
    11a4:	30 e2       	ldi	r19, 0x20	; 32
    11a6:	23 2e       	mov	r2, r19
    11a8:	07 c0       	rjmp	.+14     	; 0x11b8 <vfprintf+0x186>
    11aa:	2d e2       	ldi	r18, 0x2D	; 45
    11ac:	22 2e       	mov	r2, r18
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <vfprintf+0x186>
    11b0:	9b e2       	ldi	r25, 0x2B	; 43
    11b2:	29 2e       	mov	r2, r25
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <vfprintf+0x186>
    11b6:	21 2c       	mov	r2, r1
    11b8:	80 2f       	mov	r24, r16
    11ba:	8c 70       	andi	r24, 0x0C	; 12
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <vfprintf+0x192>
    11be:	21 10       	cpse	r2, r1
    11c0:	68 c2       	rjmp	.+1232   	; 0x1692 <vfprintf+0x660>
    11c2:	a8 c2       	rjmp	.+1360   	; 0x1714 <vfprintf+0x6e2>
    11c4:	37 fe       	sbrs	r3, 7
    11c6:	0f c0       	rjmp	.+30     	; 0x11e6 <vfprintf+0x1b4>
    11c8:	e4 0c       	add	r14, r4
    11ca:	04 ff       	sbrs	r16, 4
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <vfprintf+0x1a4>
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	81 33       	cpi	r24, 0x31	; 49
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <vfprintf+0x1a4>
    11d4:	ea 94       	dec	r14
    11d6:	1e 14       	cp	r1, r14
    11d8:	74 f5       	brge	.+92     	; 0x1236 <vfprintf+0x204>
    11da:	f8 e0       	ldi	r31, 0x08	; 8
    11dc:	fe 15       	cp	r31, r14
    11de:	78 f5       	brcc	.+94     	; 0x123e <vfprintf+0x20c>
    11e0:	88 e0       	ldi	r24, 0x08	; 8
    11e2:	e8 2e       	mov	r14, r24
    11e4:	2c c0       	rjmp	.+88     	; 0x123e <vfprintf+0x20c>
    11e6:	36 fc       	sbrc	r3, 6
    11e8:	2a c0       	rjmp	.+84     	; 0x123e <vfprintf+0x20c>
    11ea:	81 2f       	mov	r24, r17
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	84 15       	cp	r24, r4
    11f0:	95 05       	cpc	r25, r5
    11f2:	9c f0       	brlt	.+38     	; 0x121a <vfprintf+0x1e8>
    11f4:	2c ef       	ldi	r18, 0xFC	; 252
    11f6:	42 16       	cp	r4, r18
    11f8:	2f ef       	ldi	r18, 0xFF	; 255
    11fa:	52 06       	cpc	r5, r18
    11fc:	74 f0       	brlt	.+28     	; 0x121a <vfprintf+0x1e8>
    11fe:	43 2d       	mov	r20, r3
    1200:	40 68       	ori	r20, 0x80	; 128
    1202:	34 2e       	mov	r3, r20
    1204:	0a c0       	rjmp	.+20     	; 0x121a <vfprintf+0x1e8>
    1206:	e2 e0       	ldi	r30, 0x02	; 2
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	ec 0f       	add	r30, r28
    120c:	fd 1f       	adc	r31, r29
    120e:	e1 0f       	add	r30, r17
    1210:	f1 1d       	adc	r31, r1
    1212:	80 81       	ld	r24, Z
    1214:	80 33       	cpi	r24, 0x30	; 48
    1216:	19 f4       	brne	.+6      	; 0x121e <vfprintf+0x1ec>
    1218:	11 50       	subi	r17, 0x01	; 1
    121a:	11 11       	cpse	r17, r1
    121c:	f4 cf       	rjmp	.-24     	; 0x1206 <vfprintf+0x1d4>
    121e:	37 fe       	sbrs	r3, 7
    1220:	0e c0       	rjmp	.+28     	; 0x123e <vfprintf+0x20c>
    1222:	ee 24       	eor	r14, r14
    1224:	e3 94       	inc	r14
    1226:	e1 0e       	add	r14, r17
    1228:	81 2f       	mov	r24, r17
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	48 16       	cp	r4, r24
    122e:	59 06       	cpc	r5, r25
    1230:	2c f4       	brge	.+10     	; 0x123c <vfprintf+0x20a>
    1232:	14 19       	sub	r17, r4
    1234:	04 c0       	rjmp	.+8      	; 0x123e <vfprintf+0x20c>
    1236:	ee 24       	eor	r14, r14
    1238:	e3 94       	inc	r14
    123a:	01 c0       	rjmp	.+2      	; 0x123e <vfprintf+0x20c>
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	37 fe       	sbrs	r3, 7
    1240:	06 c0       	rjmp	.+12     	; 0x124e <vfprintf+0x21c>
    1242:	14 14       	cp	r1, r4
    1244:	15 04       	cpc	r1, r5
    1246:	34 f4       	brge	.+12     	; 0x1254 <vfprintf+0x222>
    1248:	c2 01       	movw	r24, r4
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <vfprintf+0x226>
    124e:	85 e0       	ldi	r24, 0x05	; 5
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <vfprintf+0x226>
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	21 10       	cpse	r2, r1
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	11 23       	and	r17, r17
    125e:	31 f0       	breq	.+12     	; 0x126c <vfprintf+0x23a>
    1260:	21 2f       	mov	r18, r17
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	2f 5f       	subi	r18, 0xFF	; 255
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	82 0f       	add	r24, r18
    126a:	93 1f       	adc	r25, r19
    126c:	2f 2d       	mov	r18, r15
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	82 17       	cp	r24, r18
    1272:	93 07       	cpc	r25, r19
    1274:	14 f4       	brge	.+4      	; 0x127a <vfprintf+0x248>
    1276:	f8 1a       	sub	r15, r24
    1278:	01 c0       	rjmp	.+2      	; 0x127c <vfprintf+0x24a>
    127a:	f1 2c       	mov	r15, r1
    127c:	83 2d       	mov	r24, r3
    127e:	89 70       	andi	r24, 0x09	; 9
    1280:	49 f4       	brne	.+18     	; 0x1294 <vfprintf+0x262>
    1282:	ff 20       	and	r15, r15
    1284:	39 f0       	breq	.+14     	; 0x1294 <vfprintf+0x262>
    1286:	b6 01       	movw	r22, r12
    1288:	80 e2       	ldi	r24, 0x20	; 32
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1290:	fa 94       	dec	r15
    1292:	f7 cf       	rjmp	.-18     	; 0x1282 <vfprintf+0x250>
    1294:	22 20       	and	r2, r2
    1296:	29 f0       	breq	.+10     	; 0x12a2 <vfprintf+0x270>
    1298:	b6 01       	movw	r22, r12
    129a:	82 2d       	mov	r24, r2
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    12a2:	33 fc       	sbrc	r3, 3
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <vfprintf+0x286>
    12a6:	ff 20       	and	r15, r15
    12a8:	39 f0       	breq	.+14     	; 0x12b8 <vfprintf+0x286>
    12aa:	b6 01       	movw	r22, r12
    12ac:	80 e3       	ldi	r24, 0x30	; 48
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    12b4:	fa 94       	dec	r15
    12b6:	f7 cf       	rjmp	.-18     	; 0x12a6 <vfprintf+0x274>
    12b8:	37 fe       	sbrs	r3, 7
    12ba:	5a c0       	rjmp	.+180    	; 0x1370 <vfprintf+0x33e>
    12bc:	94 2d       	mov	r25, r4
    12be:	85 2d       	mov	r24, r5
    12c0:	57 fe       	sbrs	r5, 7
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <vfprintf+0x296>
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	29 2e       	mov	r2, r25
    12ca:	38 2e       	mov	r3, r24
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	a2 01       	movw	r20, r4
    12d2:	4e 19       	sub	r20, r14
    12d4:	51 09       	sbc	r21, r1
    12d6:	5d 87       	std	Y+13, r21	; 0x0d
    12d8:	4c 87       	std	Y+12, r20	; 0x0c
    12da:	a2 01       	movw	r20, r4
    12dc:	42 19       	sub	r20, r2
    12de:	53 09       	sbc	r21, r3
    12e0:	5f 87       	std	Y+15, r21	; 0x0f
    12e2:	4e 87       	std	Y+14, r20	; 0x0e
    12e4:	61 2f       	mov	r22, r17
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	44 27       	eor	r20, r20
    12ea:	55 27       	eor	r21, r21
    12ec:	46 1b       	sub	r20, r22
    12ee:	57 0b       	sbc	r21, r23
    12f0:	59 8b       	std	Y+17, r21	; 0x11
    12f2:	48 8b       	std	Y+16, r20	; 0x10
    12f4:	5f ef       	ldi	r21, 0xFF	; 255
    12f6:	25 16       	cp	r2, r21
    12f8:	35 06       	cpc	r3, r21
    12fa:	49 f4       	brne	.+18     	; 0x130e <vfprintf+0x2dc>
    12fc:	b6 01       	movw	r22, r12
    12fe:	8e e2       	ldi	r24, 0x2E	; 46
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	2a 8b       	std	Y+18, r18	; 0x12
    1304:	3b 8b       	std	Y+19, r19	; 0x13
    1306:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    130a:	3b 89       	ldd	r19, Y+19	; 0x13
    130c:	2a 89       	ldd	r18, Y+18	; 0x12
    130e:	42 14       	cp	r4, r2
    1310:	53 04       	cpc	r5, r3
    1312:	6c f0       	brlt	.+26     	; 0x132e <vfprintf+0x2fc>
    1314:	4c 85       	ldd	r20, Y+12	; 0x0c
    1316:	5d 85       	ldd	r21, Y+13	; 0x0d
    1318:	42 15       	cp	r20, r2
    131a:	53 05       	cpc	r21, r3
    131c:	44 f4       	brge	.+16     	; 0x132e <vfprintf+0x2fc>
    131e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1320:	ff 85       	ldd	r31, Y+15	; 0x0f
    1322:	e2 0f       	add	r30, r18
    1324:	f3 1f       	adc	r31, r19
    1326:	e6 0d       	add	r30, r6
    1328:	f7 1d       	adc	r31, r7
    132a:	81 81       	ldd	r24, Z+1	; 0x01
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <vfprintf+0x2fe>
    132e:	80 e3       	ldi	r24, 0x30	; 48
    1330:	51 e0       	ldi	r21, 0x01	; 1
    1332:	25 1a       	sub	r2, r21
    1334:	31 08       	sbc	r3, r1
    1336:	2f 5f       	subi	r18, 0xFF	; 255
    1338:	3f 4f       	sbci	r19, 0xFF	; 255
    133a:	48 89       	ldd	r20, Y+16	; 0x10
    133c:	59 89       	ldd	r21, Y+17	; 0x11
    133e:	24 16       	cp	r2, r20
    1340:	35 06       	cpc	r3, r21
    1342:	4c f0       	brlt	.+18     	; 0x1356 <vfprintf+0x324>
    1344:	b6 01       	movw	r22, r12
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	2a 8b       	std	Y+18, r18	; 0x12
    134a:	3b 8b       	std	Y+19, r19	; 0x13
    134c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1350:	2a 89       	ldd	r18, Y+18	; 0x12
    1352:	3b 89       	ldd	r19, Y+19	; 0x13
    1354:	cf cf       	rjmp	.-98     	; 0x12f4 <vfprintf+0x2c2>
    1356:	24 14       	cp	r2, r4
    1358:	35 04       	cpc	r3, r5
    135a:	39 f4       	brne	.+14     	; 0x136a <vfprintf+0x338>
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	96 33       	cpi	r25, 0x36	; 54
    1360:	18 f4       	brcc	.+6      	; 0x1368 <vfprintf+0x336>
    1362:	95 33       	cpi	r25, 0x35	; 53
    1364:	11 f4       	brne	.+4      	; 0x136a <vfprintf+0x338>
    1366:	04 ff       	sbrs	r16, 4
    1368:	81 e3       	ldi	r24, 0x31	; 49
    136a:	b6 01       	movw	r22, r12
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	4b c0       	rjmp	.+150    	; 0x1406 <vfprintf+0x3d4>
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	81 33       	cpi	r24, 0x31	; 49
    1374:	09 f0       	breq	.+2      	; 0x1378 <vfprintf+0x346>
    1376:	0f 7e       	andi	r16, 0xEF	; 239
    1378:	b6 01       	movw	r22, r12
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1380:	11 11       	cpse	r17, r1
    1382:	05 c0       	rjmp	.+10     	; 0x138e <vfprintf+0x35c>
    1384:	34 fc       	sbrc	r3, 4
    1386:	18 c0       	rjmp	.+48     	; 0x13b8 <vfprintf+0x386>
    1388:	85 e6       	ldi	r24, 0x65	; 101
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	17 c0       	rjmp	.+46     	; 0x13bc <vfprintf+0x38a>
    138e:	b6 01       	movw	r22, r12
    1390:	8e e2       	ldi	r24, 0x2E	; 46
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	ee 24       	eor	r14, r14
    139c:	e3 94       	inc	r14
    139e:	e8 0e       	add	r14, r24
    13a0:	f3 01       	movw	r30, r6
    13a2:	e8 0f       	add	r30, r24
    13a4:	f1 1d       	adc	r31, r1
    13a6:	80 81       	ld	r24, Z
    13a8:	b6 01       	movw	r22, r12
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    13b0:	11 50       	subi	r17, 0x01	; 1
    13b2:	8e 2d       	mov	r24, r14
    13b4:	91 f7       	brne	.-28     	; 0x139a <vfprintf+0x368>
    13b6:	e6 cf       	rjmp	.-52     	; 0x1384 <vfprintf+0x352>
    13b8:	85 e4       	ldi	r24, 0x45	; 69
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	b6 01       	movw	r22, r12
    13be:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    13c2:	57 fc       	sbrc	r5, 7
    13c4:	05 c0       	rjmp	.+10     	; 0x13d0 <vfprintf+0x39e>
    13c6:	41 14       	cp	r4, r1
    13c8:	51 04       	cpc	r5, r1
    13ca:	39 f4       	brne	.+14     	; 0x13da <vfprintf+0x3a8>
    13cc:	04 ff       	sbrs	r16, 4
    13ce:	05 c0       	rjmp	.+10     	; 0x13da <vfprintf+0x3a8>
    13d0:	51 94       	neg	r5
    13d2:	41 94       	neg	r4
    13d4:	51 08       	sbc	r5, r1
    13d6:	8d e2       	ldi	r24, 0x2D	; 45
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <vfprintf+0x3aa>
    13da:	8b e2       	ldi	r24, 0x2B	; 43
    13dc:	b6 01       	movw	r22, r12
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    13e4:	80 e3       	ldi	r24, 0x30	; 48
    13e6:	9a e0       	ldi	r25, 0x0A	; 10
    13e8:	49 16       	cp	r4, r25
    13ea:	51 04       	cpc	r5, r1
    13ec:	2c f0       	brlt	.+10     	; 0x13f8 <vfprintf+0x3c6>
    13ee:	8f 5f       	subi	r24, 0xFF	; 255
    13f0:	5a e0       	ldi	r21, 0x0A	; 10
    13f2:	45 1a       	sub	r4, r21
    13f4:	51 08       	sbc	r5, r1
    13f6:	f7 cf       	rjmp	.-18     	; 0x13e6 <vfprintf+0x3b4>
    13f8:	b6 01       	movw	r22, r12
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1400:	b6 01       	movw	r22, r12
    1402:	c2 01       	movw	r24, r4
    1404:	c0 96       	adiw	r24, 0x30	; 48
    1406:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    140a:	57 c1       	rjmp	.+686    	; 0x16ba <vfprintf+0x688>
    140c:	83 36       	cpi	r24, 0x63	; 99
    140e:	31 f0       	breq	.+12     	; 0x141c <vfprintf+0x3ea>
    1410:	83 37       	cpi	r24, 0x73	; 115
    1412:	79 f0       	breq	.+30     	; 0x1432 <vfprintf+0x400>
    1414:	83 35       	cpi	r24, 0x53	; 83
    1416:	09 f0       	breq	.+2      	; 0x141a <vfprintf+0x3e8>
    1418:	58 c0       	rjmp	.+176    	; 0x14ca <vfprintf+0x498>
    141a:	21 c0       	rjmp	.+66     	; 0x145e <vfprintf+0x42c>
    141c:	52 01       	movw	r10, r4
    141e:	e2 e0       	ldi	r30, 0x02	; 2
    1420:	ae 0e       	add	r10, r30
    1422:	b1 1c       	adc	r11, r1
    1424:	f2 01       	movw	r30, r4
    1426:	80 81       	ld	r24, Z
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	01 e0       	ldi	r16, 0x01	; 1
    142c:	10 e0       	ldi	r17, 0x00	; 0
    142e:	23 01       	movw	r4, r6
    1430:	14 c0       	rjmp	.+40     	; 0x145a <vfprintf+0x428>
    1432:	52 01       	movw	r10, r4
    1434:	f2 e0       	ldi	r31, 0x02	; 2
    1436:	af 0e       	add	r10, r31
    1438:	b1 1c       	adc	r11, r1
    143a:	f2 01       	movw	r30, r4
    143c:	40 80       	ld	r4, Z
    143e:	51 80       	ldd	r5, Z+1	; 0x01
    1440:	26 ff       	sbrs	r18, 6
    1442:	03 c0       	rjmp	.+6      	; 0x144a <vfprintf+0x418>
    1444:	61 2f       	mov	r22, r17
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	02 c0       	rjmp	.+4      	; 0x144e <vfprintf+0x41c>
    144a:	6f ef       	ldi	r22, 0xFF	; 255
    144c:	7f ef       	ldi	r23, 0xFF	; 255
    144e:	c2 01       	movw	r24, r4
    1450:	2a 8b       	std	Y+18, r18	; 0x12
    1452:	0e 94 af 0c 	call	0x195e	; 0x195e <strnlen>
    1456:	8c 01       	movw	r16, r24
    1458:	2a 89       	ldd	r18, Y+18	; 0x12
    145a:	2f 77       	andi	r18, 0x7F	; 127
    145c:	15 c0       	rjmp	.+42     	; 0x1488 <vfprintf+0x456>
    145e:	52 01       	movw	r10, r4
    1460:	f2 e0       	ldi	r31, 0x02	; 2
    1462:	af 0e       	add	r10, r31
    1464:	b1 1c       	adc	r11, r1
    1466:	f2 01       	movw	r30, r4
    1468:	40 80       	ld	r4, Z
    146a:	51 80       	ldd	r5, Z+1	; 0x01
    146c:	26 ff       	sbrs	r18, 6
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <vfprintf+0x444>
    1470:	61 2f       	mov	r22, r17
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <vfprintf+0x448>
    1476:	6f ef       	ldi	r22, 0xFF	; 255
    1478:	7f ef       	ldi	r23, 0xFF	; 255
    147a:	c2 01       	movw	r24, r4
    147c:	2a 8b       	std	Y+18, r18	; 0x12
    147e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <strnlen_P>
    1482:	8c 01       	movw	r16, r24
    1484:	2a 89       	ldd	r18, Y+18	; 0x12
    1486:	20 68       	ori	r18, 0x80	; 128
    1488:	32 2e       	mov	r3, r18
    148a:	23 fd       	sbrc	r18, 3
    148c:	1a c0       	rjmp	.+52     	; 0x14c2 <vfprintf+0x490>
    148e:	8f 2d       	mov	r24, r15
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	08 17       	cp	r16, r24
    1494:	19 07       	cpc	r17, r25
    1496:	a8 f4       	brcc	.+42     	; 0x14c2 <vfprintf+0x490>
    1498:	b6 01       	movw	r22, r12
    149a:	80 e2       	ldi	r24, 0x20	; 32
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    14a2:	fa 94       	dec	r15
    14a4:	f4 cf       	rjmp	.-24     	; 0x148e <vfprintf+0x45c>
    14a6:	f2 01       	movw	r30, r4
    14a8:	37 fc       	sbrc	r3, 7
    14aa:	85 91       	lpm	r24, Z+
    14ac:	37 fe       	sbrs	r3, 7
    14ae:	81 91       	ld	r24, Z+
    14b0:	2f 01       	movw	r4, r30
    14b2:	b6 01       	movw	r22, r12
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    14ba:	f1 10       	cpse	r15, r1
    14bc:	fa 94       	dec	r15
    14be:	01 50       	subi	r16, 0x01	; 1
    14c0:	11 09       	sbc	r17, r1
    14c2:	01 15       	cp	r16, r1
    14c4:	11 05       	cpc	r17, r1
    14c6:	79 f7       	brne	.-34     	; 0x14a6 <vfprintf+0x474>
    14c8:	f8 c0       	rjmp	.+496    	; 0x16ba <vfprintf+0x688>
    14ca:	84 36       	cpi	r24, 0x64	; 100
    14cc:	11 f0       	breq	.+4      	; 0x14d2 <vfprintf+0x4a0>
    14ce:	89 36       	cpi	r24, 0x69	; 105
    14d0:	59 f5       	brne	.+86     	; 0x1528 <vfprintf+0x4f6>
    14d2:	52 01       	movw	r10, r4
    14d4:	27 ff       	sbrs	r18, 7
    14d6:	09 c0       	rjmp	.+18     	; 0x14ea <vfprintf+0x4b8>
    14d8:	f4 e0       	ldi	r31, 0x04	; 4
    14da:	af 0e       	add	r10, r31
    14dc:	b1 1c       	adc	r11, r1
    14de:	f2 01       	movw	r30, r4
    14e0:	60 81       	ld	r22, Z
    14e2:	71 81       	ldd	r23, Z+1	; 0x01
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	0a c0       	rjmp	.+20     	; 0x14fe <vfprintf+0x4cc>
    14ea:	f2 e0       	ldi	r31, 0x02	; 2
    14ec:	af 0e       	add	r10, r31
    14ee:	b1 1c       	adc	r11, r1
    14f0:	f2 01       	movw	r30, r4
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	07 2e       	mov	r0, r23
    14f8:	00 0c       	add	r0, r0
    14fa:	88 0b       	sbc	r24, r24
    14fc:	99 0b       	sbc	r25, r25
    14fe:	2f 76       	andi	r18, 0x6F	; 111
    1500:	32 2e       	mov	r3, r18
    1502:	97 ff       	sbrs	r25, 7
    1504:	09 c0       	rjmp	.+18     	; 0x1518 <vfprintf+0x4e6>
    1506:	90 95       	com	r25
    1508:	80 95       	com	r24
    150a:	70 95       	com	r23
    150c:	61 95       	neg	r22
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	8f 4f       	sbci	r24, 0xFF	; 255
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	20 68       	ori	r18, 0x80	; 128
    1516:	32 2e       	mov	r3, r18
    1518:	2a e0       	ldi	r18, 0x0A	; 10
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	a3 01       	movw	r20, r6
    151e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__ultoa_invert>
    1522:	e8 2e       	mov	r14, r24
    1524:	e6 18       	sub	r14, r6
    1526:	3f c0       	rjmp	.+126    	; 0x15a6 <vfprintf+0x574>
    1528:	02 2f       	mov	r16, r18
    152a:	85 37       	cpi	r24, 0x75	; 117
    152c:	21 f4       	brne	.+8      	; 0x1536 <vfprintf+0x504>
    152e:	0f 7e       	andi	r16, 0xEF	; 239
    1530:	2a e0       	ldi	r18, 0x0A	; 10
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	1d c0       	rjmp	.+58     	; 0x1570 <vfprintf+0x53e>
    1536:	09 7f       	andi	r16, 0xF9	; 249
    1538:	8f 36       	cpi	r24, 0x6F	; 111
    153a:	91 f0       	breq	.+36     	; 0x1560 <vfprintf+0x52e>
    153c:	18 f4       	brcc	.+6      	; 0x1544 <vfprintf+0x512>
    153e:	88 35       	cpi	r24, 0x58	; 88
    1540:	59 f0       	breq	.+22     	; 0x1558 <vfprintf+0x526>
    1542:	c5 c0       	rjmp	.+394    	; 0x16ce <vfprintf+0x69c>
    1544:	80 37       	cpi	r24, 0x70	; 112
    1546:	19 f0       	breq	.+6      	; 0x154e <vfprintf+0x51c>
    1548:	88 37       	cpi	r24, 0x78	; 120
    154a:	11 f0       	breq	.+4      	; 0x1550 <vfprintf+0x51e>
    154c:	c0 c0       	rjmp	.+384    	; 0x16ce <vfprintf+0x69c>
    154e:	00 61       	ori	r16, 0x10	; 16
    1550:	04 ff       	sbrs	r16, 4
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <vfprintf+0x534>
    1554:	04 60       	ori	r16, 0x04	; 4
    1556:	07 c0       	rjmp	.+14     	; 0x1566 <vfprintf+0x534>
    1558:	24 ff       	sbrs	r18, 4
    155a:	08 c0       	rjmp	.+16     	; 0x156c <vfprintf+0x53a>
    155c:	06 60       	ori	r16, 0x06	; 6
    155e:	06 c0       	rjmp	.+12     	; 0x156c <vfprintf+0x53a>
    1560:	28 e0       	ldi	r18, 0x08	; 8
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <vfprintf+0x53e>
    1566:	20 e1       	ldi	r18, 0x10	; 16
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <vfprintf+0x53e>
    156c:	20 e1       	ldi	r18, 0x10	; 16
    156e:	32 e0       	ldi	r19, 0x02	; 2
    1570:	52 01       	movw	r10, r4
    1572:	07 ff       	sbrs	r16, 7
    1574:	09 c0       	rjmp	.+18     	; 0x1588 <vfprintf+0x556>
    1576:	f4 e0       	ldi	r31, 0x04	; 4
    1578:	af 0e       	add	r10, r31
    157a:	b1 1c       	adc	r11, r1
    157c:	f2 01       	movw	r30, r4
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	08 c0       	rjmp	.+16     	; 0x1598 <vfprintf+0x566>
    1588:	f2 e0       	ldi	r31, 0x02	; 2
    158a:	af 0e       	add	r10, r31
    158c:	b1 1c       	adc	r11, r1
    158e:	f2 01       	movw	r30, r4
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a3 01       	movw	r20, r6
    159a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__ultoa_invert>
    159e:	e8 2e       	mov	r14, r24
    15a0:	e6 18       	sub	r14, r6
    15a2:	0f 77       	andi	r16, 0x7F	; 127
    15a4:	30 2e       	mov	r3, r16
    15a6:	36 fe       	sbrs	r3, 6
    15a8:	0b c0       	rjmp	.+22     	; 0x15c0 <vfprintf+0x58e>
    15aa:	33 2d       	mov	r19, r3
    15ac:	3e 7f       	andi	r19, 0xFE	; 254
    15ae:	e1 16       	cp	r14, r17
    15b0:	50 f4       	brcc	.+20     	; 0x15c6 <vfprintf+0x594>
    15b2:	34 fe       	sbrs	r3, 4
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <vfprintf+0x598>
    15b6:	32 fc       	sbrc	r3, 2
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <vfprintf+0x598>
    15ba:	33 2d       	mov	r19, r3
    15bc:	3e 7e       	andi	r19, 0xEE	; 238
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <vfprintf+0x598>
    15c0:	0e 2d       	mov	r16, r14
    15c2:	33 2d       	mov	r19, r3
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <vfprintf+0x59a>
    15c6:	0e 2d       	mov	r16, r14
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <vfprintf+0x59a>
    15ca:	01 2f       	mov	r16, r17
    15cc:	34 ff       	sbrs	r19, 4
    15ce:	0c c0       	rjmp	.+24     	; 0x15e8 <vfprintf+0x5b6>
    15d0:	fe 01       	movw	r30, r28
    15d2:	ee 0d       	add	r30, r14
    15d4:	f1 1d       	adc	r31, r1
    15d6:	80 81       	ld	r24, Z
    15d8:	80 33       	cpi	r24, 0x30	; 48
    15da:	11 f4       	brne	.+4      	; 0x15e0 <vfprintf+0x5ae>
    15dc:	39 7e       	andi	r19, 0xE9	; 233
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <vfprintf+0x5be>
    15e0:	32 ff       	sbrs	r19, 2
    15e2:	05 c0       	rjmp	.+10     	; 0x15ee <vfprintf+0x5bc>
    15e4:	0e 5f       	subi	r16, 0xFE	; 254
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <vfprintf+0x5be>
    15e8:	83 2f       	mov	r24, r19
    15ea:	86 78       	andi	r24, 0x86	; 134
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <vfprintf+0x5be>
    15ee:	0f 5f       	subi	r16, 0xFF	; 255
    15f0:	33 fd       	sbrc	r19, 3
    15f2:	13 c0       	rjmp	.+38     	; 0x161a <vfprintf+0x5e8>
    15f4:	30 ff       	sbrs	r19, 0
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <vfprintf+0x5d2>
    15f8:	1e 2d       	mov	r17, r14
    15fa:	0f 15       	cp	r16, r15
    15fc:	18 f4       	brcc	.+6      	; 0x1604 <vfprintf+0x5d2>
    15fe:	1f 0d       	add	r17, r15
    1600:	10 1b       	sub	r17, r16
    1602:	0f 2d       	mov	r16, r15
    1604:	0f 15       	cp	r16, r15
    1606:	68 f4       	brcc	.+26     	; 0x1622 <vfprintf+0x5f0>
    1608:	b6 01       	movw	r22, r12
    160a:	80 e2       	ldi	r24, 0x20	; 32
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	3b 8b       	std	Y+19, r19	; 0x13
    1610:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1614:	0f 5f       	subi	r16, 0xFF	; 255
    1616:	3b 89       	ldd	r19, Y+19	; 0x13
    1618:	f5 cf       	rjmp	.-22     	; 0x1604 <vfprintf+0x5d2>
    161a:	0f 15       	cp	r16, r15
    161c:	10 f4       	brcc	.+4      	; 0x1622 <vfprintf+0x5f0>
    161e:	f0 1a       	sub	r15, r16
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <vfprintf+0x5f2>
    1622:	f1 2c       	mov	r15, r1
    1624:	34 ff       	sbrs	r19, 4
    1626:	12 c0       	rjmp	.+36     	; 0x164c <vfprintf+0x61a>
    1628:	b6 01       	movw	r22, r12
    162a:	80 e3       	ldi	r24, 0x30	; 48
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	3b 8b       	std	Y+19, r19	; 0x13
    1630:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1634:	3b 89       	ldd	r19, Y+19	; 0x13
    1636:	32 ff       	sbrs	r19, 2
    1638:	17 c0       	rjmp	.+46     	; 0x1668 <vfprintf+0x636>
    163a:	31 fd       	sbrc	r19, 1
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <vfprintf+0x612>
    163e:	88 e7       	ldi	r24, 0x78	; 120
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x616>
    1644:	88 e5       	ldi	r24, 0x58	; 88
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	b6 01       	movw	r22, r12
    164a:	0c c0       	rjmp	.+24     	; 0x1664 <vfprintf+0x632>
    164c:	83 2f       	mov	r24, r19
    164e:	86 78       	andi	r24, 0x86	; 134
    1650:	59 f0       	breq	.+22     	; 0x1668 <vfprintf+0x636>
    1652:	31 ff       	sbrs	r19, 1
    1654:	02 c0       	rjmp	.+4      	; 0x165a <vfprintf+0x628>
    1656:	8b e2       	ldi	r24, 0x2B	; 43
    1658:	01 c0       	rjmp	.+2      	; 0x165c <vfprintf+0x62a>
    165a:	80 e2       	ldi	r24, 0x20	; 32
    165c:	37 fd       	sbrc	r19, 7
    165e:	8d e2       	ldi	r24, 0x2D	; 45
    1660:	b6 01       	movw	r22, r12
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1668:	e1 16       	cp	r14, r17
    166a:	38 f4       	brcc	.+14     	; 0x167a <vfprintf+0x648>
    166c:	b6 01       	movw	r22, r12
    166e:	80 e3       	ldi	r24, 0x30	; 48
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1676:	11 50       	subi	r17, 0x01	; 1
    1678:	f7 cf       	rjmp	.-18     	; 0x1668 <vfprintf+0x636>
    167a:	ea 94       	dec	r14
    167c:	f3 01       	movw	r30, r6
    167e:	ee 0d       	add	r30, r14
    1680:	f1 1d       	adc	r31, r1
    1682:	80 81       	ld	r24, Z
    1684:	b6 01       	movw	r22, r12
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    168c:	e1 10       	cpse	r14, r1
    168e:	f5 cf       	rjmp	.-22     	; 0x167a <vfprintf+0x648>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <vfprintf+0x688>
    1692:	f4 e0       	ldi	r31, 0x04	; 4
    1694:	ff 15       	cp	r31, r15
    1696:	58 f5       	brcc	.+86     	; 0x16ee <vfprintf+0x6bc>
    1698:	84 e0       	ldi	r24, 0x04	; 4
    169a:	f8 1a       	sub	r15, r24
    169c:	33 fe       	sbrs	r3, 3
    169e:	1e c0       	rjmp	.+60     	; 0x16dc <vfprintf+0x6aa>
    16a0:	21 10       	cpse	r2, r1
    16a2:	26 c0       	rjmp	.+76     	; 0x16f0 <vfprintf+0x6be>
    16a4:	03 ff       	sbrs	r16, 3
    16a6:	2a c0       	rjmp	.+84     	; 0x16fc <vfprintf+0x6ca>
    16a8:	06 e9       	ldi	r16, 0x96	; 150
    16aa:	10 e0       	ldi	r17, 0x00	; 0
    16ac:	f3 2d       	mov	r31, r3
    16ae:	f0 71       	andi	r31, 0x10	; 16
    16b0:	3f 2e       	mov	r3, r31
    16b2:	f8 01       	movw	r30, r16
    16b4:	84 91       	lpm	r24, Z
    16b6:	81 11       	cpse	r24, r1
    16b8:	24 c0       	rjmp	.+72     	; 0x1702 <vfprintf+0x6d0>
    16ba:	ff 20       	and	r15, r15
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <vfprintf+0x68e>
    16be:	e5 cc       	rjmp	.-1590   	; 0x108a <vfprintf+0x58>
    16c0:	b6 01       	movw	r22, r12
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    16ca:	fa 94       	dec	r15
    16cc:	f6 cf       	rjmp	.-20     	; 0x16ba <vfprintf+0x688>
    16ce:	f6 01       	movw	r30, r12
    16d0:	86 81       	ldd	r24, Z+6	; 0x06
    16d2:	97 81       	ldd	r25, Z+7	; 0x07
    16d4:	26 c0       	rjmp	.+76     	; 0x1722 <vfprintf+0x6f0>
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	9f ef       	ldi	r25, 0xFF	; 255
    16da:	23 c0       	rjmp	.+70     	; 0x1722 <vfprintf+0x6f0>
    16dc:	b6 01       	movw	r22, r12
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    16e6:	fa 94       	dec	r15
    16e8:	f1 10       	cpse	r15, r1
    16ea:	f8 cf       	rjmp	.-16     	; 0x16dc <vfprintf+0x6aa>
    16ec:	d9 cf       	rjmp	.-78     	; 0x16a0 <vfprintf+0x66e>
    16ee:	f1 2c       	mov	r15, r1
    16f0:	b6 01       	movw	r22, r12
    16f2:	82 2d       	mov	r24, r2
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    16fa:	d4 cf       	rjmp	.-88     	; 0x16a4 <vfprintf+0x672>
    16fc:	0a e9       	ldi	r16, 0x9A	; 154
    16fe:	10 e0       	ldi	r17, 0x00	; 0
    1700:	d5 cf       	rjmp	.-86     	; 0x16ac <vfprintf+0x67a>
    1702:	31 10       	cpse	r3, r1
    1704:	80 52       	subi	r24, 0x20	; 32
    1706:	b6 01       	movw	r22, r12
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    170e:	0f 5f       	subi	r16, 0xFF	; 255
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	cf cf       	rjmp	.-98     	; 0x16b2 <vfprintf+0x680>
    1714:	23 e0       	ldi	r18, 0x03	; 3
    1716:	2f 15       	cp	r18, r15
    1718:	10 f4       	brcc	.+4      	; 0x171e <vfprintf+0x6ec>
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	be cf       	rjmp	.-132    	; 0x169a <vfprintf+0x668>
    171e:	f1 2c       	mov	r15, r1
    1720:	c1 cf       	rjmp	.-126    	; 0x16a4 <vfprintf+0x672>
    1722:	63 96       	adiw	r28, 0x13	; 19
    1724:	e2 e1       	ldi	r30, 0x12	; 18
    1726:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__epilogue_restores__>

0000172a <__prologue_saves__>:
    172a:	2f 92       	push	r2
    172c:	3f 92       	push	r3
    172e:	4f 92       	push	r4
    1730:	5f 92       	push	r5
    1732:	6f 92       	push	r6
    1734:	7f 92       	push	r7
    1736:	8f 92       	push	r8
    1738:	9f 92       	push	r9
    173a:	af 92       	push	r10
    173c:	bf 92       	push	r11
    173e:	cf 92       	push	r12
    1740:	df 92       	push	r13
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	ca 1b       	sub	r28, r26
    1754:	db 0b       	sbc	r29, r27
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	09 94       	ijmp

00001762 <__epilogue_restores__>:
    1762:	2a 88       	ldd	r2, Y+18	; 0x12
    1764:	39 88       	ldd	r3, Y+17	; 0x11
    1766:	48 88       	ldd	r4, Y+16	; 0x10
    1768:	5f 84       	ldd	r5, Y+15	; 0x0f
    176a:	6e 84       	ldd	r6, Y+14	; 0x0e
    176c:	7d 84       	ldd	r7, Y+13	; 0x0d
    176e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1770:	9b 84       	ldd	r9, Y+11	; 0x0b
    1772:	aa 84       	ldd	r10, Y+10	; 0x0a
    1774:	b9 84       	ldd	r11, Y+9	; 0x09
    1776:	c8 84       	ldd	r12, Y+8	; 0x08
    1778:	df 80       	ldd	r13, Y+7	; 0x07
    177a:	ee 80       	ldd	r14, Y+6	; 0x06
    177c:	fd 80       	ldd	r15, Y+5	; 0x05
    177e:	0c 81       	ldd	r16, Y+4	; 0x04
    1780:	1b 81       	ldd	r17, Y+3	; 0x03
    1782:	aa 81       	ldd	r26, Y+2	; 0x02
    1784:	b9 81       	ldd	r27, Y+1	; 0x01
    1786:	ce 0f       	add	r28, r30
    1788:	d1 1d       	adc	r29, r1
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	ed 01       	movw	r28, r26
    1796:	08 95       	ret

00001798 <__ftoa_engine>:
    1798:	28 30       	cpi	r18, 0x08	; 8
    179a:	08 f0       	brcs	.+2      	; 0x179e <__ftoa_engine+0x6>
    179c:	27 e0       	ldi	r18, 0x07	; 7
    179e:	33 27       	eor	r19, r19
    17a0:	da 01       	movw	r26, r20
    17a2:	99 0f       	add	r25, r25
    17a4:	31 1d       	adc	r19, r1
    17a6:	87 fd       	sbrc	r24, 7
    17a8:	91 60       	ori	r25, 0x01	; 1
    17aa:	00 96       	adiw	r24, 0x00	; 0
    17ac:	61 05       	cpc	r22, r1
    17ae:	71 05       	cpc	r23, r1
    17b0:	39 f4       	brne	.+14     	; 0x17c0 <__ftoa_engine+0x28>
    17b2:	32 60       	ori	r19, 0x02	; 2
    17b4:	2e 5f       	subi	r18, 0xFE	; 254
    17b6:	3d 93       	st	X+, r19
    17b8:	30 e3       	ldi	r19, 0x30	; 48
    17ba:	2a 95       	dec	r18
    17bc:	e1 f7       	brne	.-8      	; 0x17b6 <__ftoa_engine+0x1e>
    17be:	08 95       	ret
    17c0:	9f 3f       	cpi	r25, 0xFF	; 255
    17c2:	30 f0       	brcs	.+12     	; 0x17d0 <__ftoa_engine+0x38>
    17c4:	80 38       	cpi	r24, 0x80	; 128
    17c6:	71 05       	cpc	r23, r1
    17c8:	61 05       	cpc	r22, r1
    17ca:	09 f0       	breq	.+2      	; 0x17ce <__ftoa_engine+0x36>
    17cc:	3c 5f       	subi	r19, 0xFC	; 252
    17ce:	3c 5f       	subi	r19, 0xFC	; 252
    17d0:	3d 93       	st	X+, r19
    17d2:	91 30       	cpi	r25, 0x01	; 1
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <__ftoa_engine+0x40>
    17d6:	80 68       	ori	r24, 0x80	; 128
    17d8:	91 1d       	adc	r25, r1
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	1f 93       	push	r17
    17e0:	0f 93       	push	r16
    17e2:	ff 92       	push	r15
    17e4:	ef 92       	push	r14
    17e6:	19 2f       	mov	r17, r25
    17e8:	98 7f       	andi	r25, 0xF8	; 248
    17ea:	96 95       	lsr	r25
    17ec:	e9 2f       	mov	r30, r25
    17ee:	96 95       	lsr	r25
    17f0:	96 95       	lsr	r25
    17f2:	e9 0f       	add	r30, r25
    17f4:	ff 27       	eor	r31, r31
    17f6:	e8 50       	subi	r30, 0x08	; 8
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	99 27       	eor	r25, r25
    17fc:	33 27       	eor	r19, r19
    17fe:	ee 24       	eor	r14, r14
    1800:	ff 24       	eor	r15, r15
    1802:	a7 01       	movw	r20, r14
    1804:	e7 01       	movw	r28, r14
    1806:	05 90       	lpm	r0, Z+
    1808:	08 94       	sec
    180a:	07 94       	ror	r0
    180c:	28 f4       	brcc	.+10     	; 0x1818 <__ftoa_engine+0x80>
    180e:	36 0f       	add	r19, r22
    1810:	e7 1e       	adc	r14, r23
    1812:	f8 1e       	adc	r15, r24
    1814:	49 1f       	adc	r20, r25
    1816:	51 1d       	adc	r21, r1
    1818:	66 0f       	add	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	06 94       	lsr	r0
    1822:	a1 f7       	brne	.-24     	; 0x180c <__ftoa_engine+0x74>
    1824:	05 90       	lpm	r0, Z+
    1826:	07 94       	ror	r0
    1828:	28 f4       	brcc	.+10     	; 0x1834 <__ftoa_engine+0x9c>
    182a:	e7 0e       	add	r14, r23
    182c:	f8 1e       	adc	r15, r24
    182e:	49 1f       	adc	r20, r25
    1830:	56 1f       	adc	r21, r22
    1832:	c1 1d       	adc	r28, r1
    1834:	77 0f       	add	r23, r23
    1836:	88 1f       	adc	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	66 1f       	adc	r22, r22
    183c:	06 94       	lsr	r0
    183e:	a1 f7       	brne	.-24     	; 0x1828 <__ftoa_engine+0x90>
    1840:	05 90       	lpm	r0, Z+
    1842:	07 94       	ror	r0
    1844:	28 f4       	brcc	.+10     	; 0x1850 <__ftoa_engine+0xb8>
    1846:	f8 0e       	add	r15, r24
    1848:	49 1f       	adc	r20, r25
    184a:	56 1f       	adc	r21, r22
    184c:	c7 1f       	adc	r28, r23
    184e:	d1 1d       	adc	r29, r1
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	66 1f       	adc	r22, r22
    1856:	77 1f       	adc	r23, r23
    1858:	06 94       	lsr	r0
    185a:	a1 f7       	brne	.-24     	; 0x1844 <__ftoa_engine+0xac>
    185c:	05 90       	lpm	r0, Z+
    185e:	07 94       	ror	r0
    1860:	20 f4       	brcc	.+8      	; 0x186a <__ftoa_engine+0xd2>
    1862:	49 0f       	add	r20, r25
    1864:	56 1f       	adc	r21, r22
    1866:	c7 1f       	adc	r28, r23
    1868:	d8 1f       	adc	r29, r24
    186a:	99 0f       	add	r25, r25
    186c:	66 1f       	adc	r22, r22
    186e:	77 1f       	adc	r23, r23
    1870:	88 1f       	adc	r24, r24
    1872:	06 94       	lsr	r0
    1874:	a9 f7       	brne	.-22     	; 0x1860 <__ftoa_engine+0xc8>
    1876:	84 91       	lpm	r24, Z
    1878:	10 95       	com	r17
    187a:	17 70       	andi	r17, 0x07	; 7
    187c:	41 f0       	breq	.+16     	; 0x188e <__ftoa_engine+0xf6>
    187e:	d6 95       	lsr	r29
    1880:	c7 95       	ror	r28
    1882:	57 95       	ror	r21
    1884:	47 95       	ror	r20
    1886:	f7 94       	ror	r15
    1888:	e7 94       	ror	r14
    188a:	1a 95       	dec	r17
    188c:	c1 f7       	brne	.-16     	; 0x187e <__ftoa_engine+0xe6>
    188e:	ee e9       	ldi	r30, 0x9E	; 158
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	68 94       	set
    1894:	15 90       	lpm	r1, Z+
    1896:	15 91       	lpm	r17, Z+
    1898:	35 91       	lpm	r19, Z+
    189a:	65 91       	lpm	r22, Z+
    189c:	95 91       	lpm	r25, Z+
    189e:	05 90       	lpm	r0, Z+
    18a0:	7f e2       	ldi	r23, 0x2F	; 47
    18a2:	73 95       	inc	r23
    18a4:	e1 18       	sub	r14, r1
    18a6:	f1 0a       	sbc	r15, r17
    18a8:	43 0b       	sbc	r20, r19
    18aa:	56 0b       	sbc	r21, r22
    18ac:	c9 0b       	sbc	r28, r25
    18ae:	d0 09       	sbc	r29, r0
    18b0:	c0 f7       	brcc	.-16     	; 0x18a2 <__ftoa_engine+0x10a>
    18b2:	e1 0c       	add	r14, r1
    18b4:	f1 1e       	adc	r15, r17
    18b6:	43 1f       	adc	r20, r19
    18b8:	56 1f       	adc	r21, r22
    18ba:	c9 1f       	adc	r28, r25
    18bc:	d0 1d       	adc	r29, r0
    18be:	7e f4       	brtc	.+30     	; 0x18de <__ftoa_engine+0x146>
    18c0:	70 33       	cpi	r23, 0x30	; 48
    18c2:	11 f4       	brne	.+4      	; 0x18c8 <__ftoa_engine+0x130>
    18c4:	8a 95       	dec	r24
    18c6:	e6 cf       	rjmp	.-52     	; 0x1894 <__ftoa_engine+0xfc>
    18c8:	e8 94       	clt
    18ca:	01 50       	subi	r16, 0x01	; 1
    18cc:	30 f0       	brcs	.+12     	; 0x18da <__ftoa_engine+0x142>
    18ce:	08 0f       	add	r16, r24
    18d0:	0a f4       	brpl	.+2      	; 0x18d4 <__ftoa_engine+0x13c>
    18d2:	00 27       	eor	r16, r16
    18d4:	02 17       	cp	r16, r18
    18d6:	08 f4       	brcc	.+2      	; 0x18da <__ftoa_engine+0x142>
    18d8:	20 2f       	mov	r18, r16
    18da:	23 95       	inc	r18
    18dc:	02 2f       	mov	r16, r18
    18de:	7a 33       	cpi	r23, 0x3A	; 58
    18e0:	28 f0       	brcs	.+10     	; 0x18ec <__ftoa_engine+0x154>
    18e2:	79 e3       	ldi	r23, 0x39	; 57
    18e4:	7d 93       	st	X+, r23
    18e6:	2a 95       	dec	r18
    18e8:	e9 f7       	brne	.-6      	; 0x18e4 <__ftoa_engine+0x14c>
    18ea:	10 c0       	rjmp	.+32     	; 0x190c <__ftoa_engine+0x174>
    18ec:	7d 93       	st	X+, r23
    18ee:	2a 95       	dec	r18
    18f0:	89 f6       	brne	.-94     	; 0x1894 <__ftoa_engine+0xfc>
    18f2:	06 94       	lsr	r0
    18f4:	97 95       	ror	r25
    18f6:	67 95       	ror	r22
    18f8:	37 95       	ror	r19
    18fa:	17 95       	ror	r17
    18fc:	17 94       	ror	r1
    18fe:	e1 18       	sub	r14, r1
    1900:	f1 0a       	sbc	r15, r17
    1902:	43 0b       	sbc	r20, r19
    1904:	56 0b       	sbc	r21, r22
    1906:	c9 0b       	sbc	r28, r25
    1908:	d0 09       	sbc	r29, r0
    190a:	98 f0       	brcs	.+38     	; 0x1932 <__ftoa_engine+0x19a>
    190c:	23 95       	inc	r18
    190e:	7e 91       	ld	r23, -X
    1910:	73 95       	inc	r23
    1912:	7a 33       	cpi	r23, 0x3A	; 58
    1914:	08 f0       	brcs	.+2      	; 0x1918 <__ftoa_engine+0x180>
    1916:	70 e3       	ldi	r23, 0x30	; 48
    1918:	7c 93       	st	X, r23
    191a:	20 13       	cpse	r18, r16
    191c:	b8 f7       	brcc	.-18     	; 0x190c <__ftoa_engine+0x174>
    191e:	7e 91       	ld	r23, -X
    1920:	70 61       	ori	r23, 0x10	; 16
    1922:	7d 93       	st	X+, r23
    1924:	30 f0       	brcs	.+12     	; 0x1932 <__ftoa_engine+0x19a>
    1926:	83 95       	inc	r24
    1928:	71 e3       	ldi	r23, 0x31	; 49
    192a:	7d 93       	st	X+, r23
    192c:	70 e3       	ldi	r23, 0x30	; 48
    192e:	2a 95       	dec	r18
    1930:	e1 f7       	brne	.-8      	; 0x192a <__ftoa_engine+0x192>
    1932:	11 24       	eor	r1, r1
    1934:	ef 90       	pop	r14
    1936:	ff 90       	pop	r15
    1938:	0f 91       	pop	r16
    193a:	1f 91       	pop	r17
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	99 27       	eor	r25, r25
    1942:	87 fd       	sbrc	r24, 7
    1944:	90 95       	com	r25
    1946:	08 95       	ret

00001948 <strnlen_P>:
    1948:	fc 01       	movw	r30, r24
    194a:	05 90       	lpm	r0, Z+
    194c:	61 50       	subi	r22, 0x01	; 1
    194e:	70 40       	sbci	r23, 0x00	; 0
    1950:	01 10       	cpse	r0, r1
    1952:	d8 f7       	brcc	.-10     	; 0x194a <strnlen_P+0x2>
    1954:	80 95       	com	r24
    1956:	90 95       	com	r25
    1958:	8e 0f       	add	r24, r30
    195a:	9f 1f       	adc	r25, r31
    195c:	08 95       	ret

0000195e <strnlen>:
    195e:	fc 01       	movw	r30, r24
    1960:	61 50       	subi	r22, 0x01	; 1
    1962:	70 40       	sbci	r23, 0x00	; 0
    1964:	01 90       	ld	r0, Z+
    1966:	01 10       	cpse	r0, r1
    1968:	d8 f7       	brcc	.-10     	; 0x1960 <strnlen+0x2>
    196a:	80 95       	com	r24
    196c:	90 95       	com	r25
    196e:	8e 0f       	add	r24, r30
    1970:	9f 1f       	adc	r25, r31
    1972:	08 95       	ret

00001974 <fputc>:
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	fb 01       	movw	r30, r22
    197e:	23 81       	ldd	r18, Z+3	; 0x03
    1980:	21 fd       	sbrc	r18, 1
    1982:	03 c0       	rjmp	.+6      	; 0x198a <fputc+0x16>
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	9f ef       	ldi	r25, 0xFF	; 255
    1988:	28 c0       	rjmp	.+80     	; 0x19da <fputc+0x66>
    198a:	22 ff       	sbrs	r18, 2
    198c:	16 c0       	rjmp	.+44     	; 0x19ba <fputc+0x46>
    198e:	46 81       	ldd	r20, Z+6	; 0x06
    1990:	57 81       	ldd	r21, Z+7	; 0x07
    1992:	24 81       	ldd	r18, Z+4	; 0x04
    1994:	35 81       	ldd	r19, Z+5	; 0x05
    1996:	42 17       	cp	r20, r18
    1998:	53 07       	cpc	r21, r19
    199a:	44 f4       	brge	.+16     	; 0x19ac <fputc+0x38>
    199c:	a0 81       	ld	r26, Z
    199e:	b1 81       	ldd	r27, Z+1	; 0x01
    19a0:	9d 01       	movw	r18, r26
    19a2:	2f 5f       	subi	r18, 0xFF	; 255
    19a4:	3f 4f       	sbci	r19, 0xFF	; 255
    19a6:	31 83       	std	Z+1, r19	; 0x01
    19a8:	20 83       	st	Z, r18
    19aa:	8c 93       	st	X, r24
    19ac:	26 81       	ldd	r18, Z+6	; 0x06
    19ae:	37 81       	ldd	r19, Z+7	; 0x07
    19b0:	2f 5f       	subi	r18, 0xFF	; 255
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	37 83       	std	Z+7, r19	; 0x07
    19b6:	26 83       	std	Z+6, r18	; 0x06
    19b8:	10 c0       	rjmp	.+32     	; 0x19da <fputc+0x66>
    19ba:	eb 01       	movw	r28, r22
    19bc:	09 2f       	mov	r16, r25
    19be:	18 2f       	mov	r17, r24
    19c0:	00 84       	ldd	r0, Z+8	; 0x08
    19c2:	f1 85       	ldd	r31, Z+9	; 0x09
    19c4:	e0 2d       	mov	r30, r0
    19c6:	09 95       	icall
    19c8:	89 2b       	or	r24, r25
    19ca:	e1 f6       	brne	.-72     	; 0x1984 <fputc+0x10>
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	9f 83       	std	Y+7, r25	; 0x07
    19d4:	8e 83       	std	Y+6, r24	; 0x06
    19d6:	81 2f       	mov	r24, r17
    19d8:	90 2f       	mov	r25, r16
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <snprintf>:
    19e4:	ae e0       	ldi	r26, 0x0E	; 14
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 ef       	ldi	r30, 0xF8	; 248
    19ea:	fc e0       	ldi	r31, 0x0C	; 12
    19ec:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__prologue_saves__+0x1c>
    19f0:	0d 89       	ldd	r16, Y+21	; 0x15
    19f2:	1e 89       	ldd	r17, Y+22	; 0x16
    19f4:	8f 89       	ldd	r24, Y+23	; 0x17
    19f6:	98 8d       	ldd	r25, Y+24	; 0x18
    19f8:	26 e0       	ldi	r18, 0x06	; 6
    19fa:	2c 83       	std	Y+4, r18	; 0x04
    19fc:	1a 83       	std	Y+2, r17	; 0x02
    19fe:	09 83       	std	Y+1, r16	; 0x01
    1a00:	97 ff       	sbrs	r25, 7
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <snprintf+0x24>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e8       	ldi	r25, 0x80	; 128
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	ae 01       	movw	r20, r28
    1a10:	45 5e       	subi	r20, 0xE5	; 229
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	69 8d       	ldd	r22, Y+25	; 0x19
    1a16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a18:	ce 01       	movw	r24, r28
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	0e 94 19 08 	call	0x1032	; 0x1032 <vfprintf>
    1a20:	4d 81       	ldd	r20, Y+5	; 0x05
    1a22:	5e 81       	ldd	r21, Y+6	; 0x06
    1a24:	57 fd       	sbrc	r21, 7
    1a26:	0a c0       	rjmp	.+20     	; 0x1a3c <snprintf+0x58>
    1a28:	2f 81       	ldd	r18, Y+7	; 0x07
    1a2a:	38 85       	ldd	r19, Y+8	; 0x08
    1a2c:	42 17       	cp	r20, r18
    1a2e:	53 07       	cpc	r21, r19
    1a30:	0c f4       	brge	.+2      	; 0x1a34 <snprintf+0x50>
    1a32:	9a 01       	movw	r18, r20
    1a34:	f8 01       	movw	r30, r16
    1a36:	e2 0f       	add	r30, r18
    1a38:	f3 1f       	adc	r31, r19
    1a3a:	10 82       	st	Z, r1
    1a3c:	2e 96       	adiw	r28, 0x0e	; 14
    1a3e:	e4 e0       	ldi	r30, 0x04	; 4
    1a40:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__epilogue_restores__+0x1c>

00001a44 <__ultoa_invert>:
    1a44:	fa 01       	movw	r30, r20
    1a46:	aa 27       	eor	r26, r26
    1a48:	28 30       	cpi	r18, 0x08	; 8
    1a4a:	51 f1       	breq	.+84     	; 0x1aa0 <__ultoa_invert+0x5c>
    1a4c:	20 31       	cpi	r18, 0x10	; 16
    1a4e:	81 f1       	breq	.+96     	; 0x1ab0 <__ultoa_invert+0x6c>
    1a50:	e8 94       	clt
    1a52:	6f 93       	push	r22
    1a54:	6e 7f       	andi	r22, 0xFE	; 254
    1a56:	6e 5f       	subi	r22, 0xFE	; 254
    1a58:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5e:	af 4f       	sbci	r26, 0xFF	; 255
    1a60:	b1 e0       	ldi	r27, 0x01	; 1
    1a62:	3e d0       	rcall	.+124    	; 0x1ae0 <__ultoa_invert+0x9c>
    1a64:	b4 e0       	ldi	r27, 0x04	; 4
    1a66:	3c d0       	rcall	.+120    	; 0x1ae0 <__ultoa_invert+0x9c>
    1a68:	67 0f       	add	r22, r23
    1a6a:	78 1f       	adc	r23, r24
    1a6c:	89 1f       	adc	r24, r25
    1a6e:	9a 1f       	adc	r25, r26
    1a70:	a1 1d       	adc	r26, r1
    1a72:	68 0f       	add	r22, r24
    1a74:	79 1f       	adc	r23, r25
    1a76:	8a 1f       	adc	r24, r26
    1a78:	91 1d       	adc	r25, r1
    1a7a:	a1 1d       	adc	r26, r1
    1a7c:	6a 0f       	add	r22, r26
    1a7e:	71 1d       	adc	r23, r1
    1a80:	81 1d       	adc	r24, r1
    1a82:	91 1d       	adc	r25, r1
    1a84:	a1 1d       	adc	r26, r1
    1a86:	20 d0       	rcall	.+64     	; 0x1ac8 <__ultoa_invert+0x84>
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <__ultoa_invert+0x48>
    1a8a:	68 94       	set
    1a8c:	3f 91       	pop	r19
    1a8e:	2a e0       	ldi	r18, 0x0A	; 10
    1a90:	26 9f       	mul	r18, r22
    1a92:	11 24       	eor	r1, r1
    1a94:	30 19       	sub	r19, r0
    1a96:	30 5d       	subi	r19, 0xD0	; 208
    1a98:	31 93       	st	Z+, r19
    1a9a:	de f6       	brtc	.-74     	; 0x1a52 <__ultoa_invert+0xe>
    1a9c:	cf 01       	movw	r24, r30
    1a9e:	08 95       	ret
    1aa0:	46 2f       	mov	r20, r22
    1aa2:	47 70       	andi	r20, 0x07	; 7
    1aa4:	40 5d       	subi	r20, 0xD0	; 208
    1aa6:	41 93       	st	Z+, r20
    1aa8:	b3 e0       	ldi	r27, 0x03	; 3
    1aaa:	0f d0       	rcall	.+30     	; 0x1aca <__ultoa_invert+0x86>
    1aac:	c9 f7       	brne	.-14     	; 0x1aa0 <__ultoa_invert+0x5c>
    1aae:	f6 cf       	rjmp	.-20     	; 0x1a9c <__ultoa_invert+0x58>
    1ab0:	46 2f       	mov	r20, r22
    1ab2:	4f 70       	andi	r20, 0x0F	; 15
    1ab4:	40 5d       	subi	r20, 0xD0	; 208
    1ab6:	4a 33       	cpi	r20, 0x3A	; 58
    1ab8:	18 f0       	brcs	.+6      	; 0x1ac0 <__ultoa_invert+0x7c>
    1aba:	49 5d       	subi	r20, 0xD9	; 217
    1abc:	31 fd       	sbrc	r19, 1
    1abe:	40 52       	subi	r20, 0x20	; 32
    1ac0:	41 93       	st	Z+, r20
    1ac2:	02 d0       	rcall	.+4      	; 0x1ac8 <__ultoa_invert+0x84>
    1ac4:	a9 f7       	brne	.-22     	; 0x1ab0 <__ultoa_invert+0x6c>
    1ac6:	ea cf       	rjmp	.-44     	; 0x1a9c <__ultoa_invert+0x58>
    1ac8:	b4 e0       	ldi	r27, 0x04	; 4
    1aca:	a6 95       	lsr	r26
    1acc:	97 95       	ror	r25
    1ace:	87 95       	ror	r24
    1ad0:	77 95       	ror	r23
    1ad2:	67 95       	ror	r22
    1ad4:	ba 95       	dec	r27
    1ad6:	c9 f7       	brne	.-14     	; 0x1aca <__ultoa_invert+0x86>
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	61 05       	cpc	r22, r1
    1adc:	71 05       	cpc	r23, r1
    1ade:	08 95       	ret
    1ae0:	9b 01       	movw	r18, r22
    1ae2:	ac 01       	movw	r20, r24
    1ae4:	0a 2e       	mov	r0, r26
    1ae6:	06 94       	lsr	r0
    1ae8:	57 95       	ror	r21
    1aea:	47 95       	ror	r20
    1aec:	37 95       	ror	r19
    1aee:	27 95       	ror	r18
    1af0:	ba 95       	dec	r27
    1af2:	c9 f7       	brne	.-14     	; 0x1ae6 <__ultoa_invert+0xa2>
    1af4:	62 0f       	add	r22, r18
    1af6:	73 1f       	adc	r23, r19
    1af8:	84 1f       	adc	r24, r20
    1afa:	95 1f       	adc	r25, r21
    1afc:	a0 1d       	adc	r26, r0
    1afe:	08 95       	ret

00001b00 <_exit>:
    1b00:	f8 94       	cli

00001b02 <__stop_program>:
    1b02:	ff cf       	rjmp	.-2      	; 0x1b02 <__stop_program>
