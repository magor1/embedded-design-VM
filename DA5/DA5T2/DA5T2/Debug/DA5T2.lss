
DA5T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001b4  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012d  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013a  00000000  00000000  00000779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000195  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a9  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delayms>:


void delayms(int n) //delay function
{
	int i;
	for(i=0; i<n; i++) //loop for n milliseconds
  80:	18 16       	cp	r1, r24
  82:	19 06       	cpc	r1, r25
  84:	6c f4       	brge	.+26     	; 0xa0 <delayms+0x20>
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	ef e9       	ldi	r30, 0x9F	; 159
  8c:	ff e0       	ldi	r31, 0x0F	; 15
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <delayms+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <delayms+0x14>
  94:	00 00       	nop
  96:	2f 5f       	subi	r18, 0xFF	; 255
  98:	3f 4f       	sbci	r19, 0xFF	; 255
  9a:	28 17       	cp	r18, r24
  9c:	39 07       	cpc	r19, r25
  9e:	a9 f7       	brne	.-22     	; 0x8a <delayms+0xa>
  a0:	08 95       	ret

000000a2 <main>:
void delayms(int); //delay function


int main()
{
	DDRD = 0x0F; //set lower nibble of PORTD as output
  a2:	8f e0       	ldi	r24, 0x0F	; 15
  a4:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1<<PC0); //potentiometer analog input
  a6:	38 98       	cbi	0x07, 0	; 7
	
	//configure ADC
	ADCSRA = 0x87;	//ADC enable, no interrupts, div factor 128
  a8:	87 e8       	ldi	r24, 0x87	; 135
  aa:	80 93 7a 00 	sts	0x007A, r24
	ADMUX = 0x60;	//Reference voltage = AVCC with external capacitor at AREF pin, left justified
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	80 93 7c 00 	sts	0x007C, r24
	uint8_t pot;	//holds value of pot from analog channel
	float motor_speed; //used to determine delays
	
	while(1)
	{
		ADCSRA |= (1<<ADSC); //start conversion
  b4:	ca e7       	ldi	r28, 0x7A	; 122
  b6:	d0 e0       	ldi	r29, 0x00	; 0
		while((ADCSRA &(1<<ADIF)) == 0); //wait for conversion to finish
		pot = ADCH;			//take value from upper byte of ADC
  b8:	09 e7       	ldi	r16, 0x79	; 121
  ba:	10 e0       	ldi	r17, 0x00	; 0
		
		motor_speed =  pot * 5.0 / 1024.0;	//scale the potentiometer value
		
		//sequence for stepper motor
		PORTD = 0X66;
  bc:	0f 2e       	mov	r0, r31
  be:	f6 e6       	ldi	r31, 0x66	; 102
  c0:	8f 2e       	mov	r8, r31
  c2:	f0 2d       	mov	r31, r0
		delayms(motor_speed * 200);	//delay is proportional to pot value
		
		PORTD = 0x33;
  c4:	0f 2e       	mov	r0, r31
  c6:	f3 e3       	ldi	r31, 0x33	; 51
  c8:	9f 2e       	mov	r9, r31
  ca:	f0 2d       	mov	r31, r0
		delayms(motor_speed * 200); //delay is proportional to pot value
		
		PORTD = 0x99;
  cc:	0f 2e       	mov	r0, r31
  ce:	f9 e9       	ldi	r31, 0x99	; 153
  d0:	af 2e       	mov	r10, r31
  d2:	f0 2d       	mov	r31, r0
		delayms(motor_speed * 200); //delay is proportional to pot value
		
		PORTD = 0xCC;
  d4:	0f 2e       	mov	r0, r31
  d6:	fc ec       	ldi	r31, 0xCC	; 204
  d8:	bf 2e       	mov	r11, r31
  da:	f0 2d       	mov	r31, r0
	uint8_t pot;	//holds value of pot from analog channel
	float motor_speed; //used to determine delays
	
	while(1)
	{
		ADCSRA |= (1<<ADSC); //start conversion
  dc:	88 81       	ld	r24, Y
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	88 83       	st	Y, r24
		while((ADCSRA &(1<<ADIF)) == 0); //wait for conversion to finish
  e2:	88 81       	ld	r24, Y
  e4:	84 ff       	sbrs	r24, 4
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <main+0x40>
		pot = ADCH;			//take value from upper byte of ADC
  e8:	f8 01       	movw	r30, r16
  ea:	60 81       	ld	r22, Z
		
		motor_speed =  pot * 5.0 / 1024.0;	//scale the potentiometer value
		
		//sequence for stepper motor
		PORTD = 0X66;
  ec:	8b b8       	out	0x0b, r8	; 11
	{
		ADCSRA |= (1<<ADSC); //start conversion
		while((ADCSRA &(1<<ADIF)) == 0); //wait for conversion to finish
		pot = ADCH;			//take value from upper byte of ADC
		
		motor_speed =  pot * 5.0 / 1024.0;	//scale the potentiometer value
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__floatsisf>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 ea       	ldi	r20, 0xA0	; 160
  fe:	50 e4       	ldi	r21, 0x40	; 64
 100:	0e 94 3e 01 	call	0x27c	; 0x27c <__mulsf3>
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e8       	ldi	r20, 0x80	; 128
 10a:	5a e3       	ldi	r21, 0x3A	; 58
 10c:	0e 94 3e 01 	call	0x27c	; 0x27c <__mulsf3>
		
		//sequence for stepper motor
		PORTD = 0X66;
		delayms(motor_speed * 200);	//delay is proportional to pot value
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	48 e4       	ldi	r20, 0x48	; 72
 116:	53 e4       	ldi	r21, 0x43	; 67
 118:	0e 94 3e 01 	call	0x27c	; 0x27c <__mulsf3>
 11c:	0e 94 a2 00 	call	0x144	; 0x144 <__fixsfsi>
 120:	6b 01       	movw	r12, r22
 122:	7c 01       	movw	r14, r24
 124:	cb 01       	movw	r24, r22
 126:	0e 94 40 00 	call	0x80	; 0x80 <delayms>
		
		PORTD = 0x33;
 12a:	9b b8       	out	0x0b, r9	; 11
		delayms(motor_speed * 200); //delay is proportional to pot value
 12c:	c6 01       	movw	r24, r12
 12e:	0e 94 40 00 	call	0x80	; 0x80 <delayms>
		
		PORTD = 0x99;
 132:	ab b8       	out	0x0b, r10	; 11
		delayms(motor_speed * 200); //delay is proportional to pot value
 134:	c6 01       	movw	r24, r12
 136:	0e 94 40 00 	call	0x80	; 0x80 <delayms>
		
		PORTD = 0xCC;
 13a:	bb b8       	out	0x0b, r11	; 11
		delayms(motor_speed * 200); //delay is proportional to pot value
 13c:	c6 01       	movw	r24, r12
 13e:	0e 94 40 00 	call	0x80	; 0x80 <delayms>
	}
 142:	cc cf       	rjmp	.-104    	; 0xdc <main+0x3a>

00000144 <__fixsfsi>:
 144:	0e 94 a9 00 	call	0x152	; 0x152 <__fixunssfsi>
 148:	68 94       	set
 14a:	b1 11       	cpse	r27, r1
 14c:	0c 94 38 01 	jmp	0x270	; 0x270 <__fp_szero>
 150:	08 95       	ret

00000152 <__fixunssfsi>:
 152:	0e 94 1d 01 	call	0x23a	; 0x23a <__fp_splitA>
 156:	88 f0       	brcs	.+34     	; 0x17a <__fixunssfsi+0x28>
 158:	9f 57       	subi	r25, 0x7F	; 127
 15a:	98 f0       	brcs	.+38     	; 0x182 <__fixunssfsi+0x30>
 15c:	b9 2f       	mov	r27, r25
 15e:	99 27       	eor	r25, r25
 160:	b7 51       	subi	r27, 0x17	; 23
 162:	b0 f0       	brcs	.+44     	; 0x190 <__fixunssfsi+0x3e>
 164:	e1 f0       	breq	.+56     	; 0x19e <__fixunssfsi+0x4c>
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	88 1f       	adc	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	1a f0       	brmi	.+6      	; 0x176 <__fixunssfsi+0x24>
 170:	ba 95       	dec	r27
 172:	c9 f7       	brne	.-14     	; 0x166 <__fixunssfsi+0x14>
 174:	14 c0       	rjmp	.+40     	; 0x19e <__fixunssfsi+0x4c>
 176:	b1 30       	cpi	r27, 0x01	; 1
 178:	91 f0       	breq	.+36     	; 0x19e <__fixunssfsi+0x4c>
 17a:	0e 94 37 01 	call	0x26e	; 0x26e <__fp_zero>
 17e:	b1 e0       	ldi	r27, 0x01	; 1
 180:	08 95       	ret
 182:	0c 94 37 01 	jmp	0x26e	; 0x26e <__fp_zero>
 186:	67 2f       	mov	r22, r23
 188:	78 2f       	mov	r23, r24
 18a:	88 27       	eor	r24, r24
 18c:	b8 5f       	subi	r27, 0xF8	; 248
 18e:	39 f0       	breq	.+14     	; 0x19e <__fixunssfsi+0x4c>
 190:	b9 3f       	cpi	r27, 0xF9	; 249
 192:	cc f3       	brlt	.-14     	; 0x186 <__fixunssfsi+0x34>
 194:	86 95       	lsr	r24
 196:	77 95       	ror	r23
 198:	67 95       	ror	r22
 19a:	b3 95       	inc	r27
 19c:	d9 f7       	brne	.-10     	; 0x194 <__fixunssfsi+0x42>
 19e:	3e f4       	brtc	.+14     	; 0x1ae <__fixunssfsi+0x5c>
 1a0:	90 95       	com	r25
 1a2:	80 95       	com	r24
 1a4:	70 95       	com	r23
 1a6:	61 95       	neg	r22
 1a8:	7f 4f       	sbci	r23, 0xFF	; 255
 1aa:	8f 4f       	sbci	r24, 0xFF	; 255
 1ac:	9f 4f       	sbci	r25, 0xFF	; 255
 1ae:	08 95       	ret

000001b0 <__floatunsisf>:
 1b0:	e8 94       	clt
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <__floatsisf+0x12>

000001b4 <__floatsisf>:
 1b4:	97 fb       	bst	r25, 7
 1b6:	3e f4       	brtc	.+14     	; 0x1c6 <__floatsisf+0x12>
 1b8:	90 95       	com	r25
 1ba:	80 95       	com	r24
 1bc:	70 95       	com	r23
 1be:	61 95       	neg	r22
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	8f 4f       	sbci	r24, 0xFF	; 255
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	99 23       	and	r25, r25
 1c8:	a9 f0       	breq	.+42     	; 0x1f4 <__floatsisf+0x40>
 1ca:	f9 2f       	mov	r31, r25
 1cc:	96 e9       	ldi	r25, 0x96	; 150
 1ce:	bb 27       	eor	r27, r27
 1d0:	93 95       	inc	r25
 1d2:	f6 95       	lsr	r31
 1d4:	87 95       	ror	r24
 1d6:	77 95       	ror	r23
 1d8:	67 95       	ror	r22
 1da:	b7 95       	ror	r27
 1dc:	f1 11       	cpse	r31, r1
 1de:	f8 cf       	rjmp	.-16     	; 0x1d0 <__floatsisf+0x1c>
 1e0:	fa f4       	brpl	.+62     	; 0x220 <__floatsisf+0x6c>
 1e2:	bb 0f       	add	r27, r27
 1e4:	11 f4       	brne	.+4      	; 0x1ea <__floatsisf+0x36>
 1e6:	60 ff       	sbrs	r22, 0
 1e8:	1b c0       	rjmp	.+54     	; 0x220 <__floatsisf+0x6c>
 1ea:	6f 5f       	subi	r22, 0xFF	; 255
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	8f 4f       	sbci	r24, 0xFF	; 255
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	16 c0       	rjmp	.+44     	; 0x220 <__floatsisf+0x6c>
 1f4:	88 23       	and	r24, r24
 1f6:	11 f0       	breq	.+4      	; 0x1fc <__floatsisf+0x48>
 1f8:	96 e9       	ldi	r25, 0x96	; 150
 1fa:	11 c0       	rjmp	.+34     	; 0x21e <__floatsisf+0x6a>
 1fc:	77 23       	and	r23, r23
 1fe:	21 f0       	breq	.+8      	; 0x208 <__floatsisf+0x54>
 200:	9e e8       	ldi	r25, 0x8E	; 142
 202:	87 2f       	mov	r24, r23
 204:	76 2f       	mov	r23, r22
 206:	05 c0       	rjmp	.+10     	; 0x212 <__floatsisf+0x5e>
 208:	66 23       	and	r22, r22
 20a:	71 f0       	breq	.+28     	; 0x228 <__floatsisf+0x74>
 20c:	96 e8       	ldi	r25, 0x86	; 134
 20e:	86 2f       	mov	r24, r22
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	2a f0       	brmi	.+10     	; 0x220 <__floatsisf+0x6c>
 216:	9a 95       	dec	r25
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	88 1f       	adc	r24, r24
 21e:	da f7       	brpl	.-10     	; 0x216 <__floatsisf+0x62>
 220:	88 0f       	add	r24, r24
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
 226:	97 f9       	bld	r25, 7
 228:	08 95       	ret

0000022a <__fp_split3>:
 22a:	57 fd       	sbrc	r21, 7
 22c:	90 58       	subi	r25, 0x80	; 128
 22e:	44 0f       	add	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	59 f0       	breq	.+22     	; 0x24a <__fp_splitA+0x10>
 234:	5f 3f       	cpi	r21, 0xFF	; 255
 236:	71 f0       	breq	.+28     	; 0x254 <__fp_splitA+0x1a>
 238:	47 95       	ror	r20

0000023a <__fp_splitA>:
 23a:	88 0f       	add	r24, r24
 23c:	97 fb       	bst	r25, 7
 23e:	99 1f       	adc	r25, r25
 240:	61 f0       	breq	.+24     	; 0x25a <__fp_splitA+0x20>
 242:	9f 3f       	cpi	r25, 0xFF	; 255
 244:	79 f0       	breq	.+30     	; 0x264 <__fp_splitA+0x2a>
 246:	87 95       	ror	r24
 248:	08 95       	ret
 24a:	12 16       	cp	r1, r18
 24c:	13 06       	cpc	r1, r19
 24e:	14 06       	cpc	r1, r20
 250:	55 1f       	adc	r21, r21
 252:	f2 cf       	rjmp	.-28     	; 0x238 <__fp_split3+0xe>
 254:	46 95       	lsr	r20
 256:	f1 df       	rcall	.-30     	; 0x23a <__fp_splitA>
 258:	08 c0       	rjmp	.+16     	; 0x26a <__fp_splitA+0x30>
 25a:	16 16       	cp	r1, r22
 25c:	17 06       	cpc	r1, r23
 25e:	18 06       	cpc	r1, r24
 260:	99 1f       	adc	r25, r25
 262:	f1 cf       	rjmp	.-30     	; 0x246 <__fp_splitA+0xc>
 264:	86 95       	lsr	r24
 266:	71 05       	cpc	r23, r1
 268:	61 05       	cpc	r22, r1
 26a:	08 94       	sec
 26c:	08 95       	ret

0000026e <__fp_zero>:
 26e:	e8 94       	clt

00000270 <__fp_szero>:
 270:	bb 27       	eor	r27, r27
 272:	66 27       	eor	r22, r22
 274:	77 27       	eor	r23, r23
 276:	cb 01       	movw	r24, r22
 278:	97 f9       	bld	r25, 7
 27a:	08 95       	ret

0000027c <__mulsf3>:
 27c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__mulsf3x>
 280:	0c 94 c2 01 	jmp	0x384	; 0x384 <__fp_round>
 284:	0e 94 b4 01 	call	0x368	; 0x368 <__fp_pscA>
 288:	38 f0       	brcs	.+14     	; 0x298 <__mulsf3+0x1c>
 28a:	0e 94 bb 01 	call	0x376	; 0x376 <__fp_pscB>
 28e:	20 f0       	brcs	.+8      	; 0x298 <__mulsf3+0x1c>
 290:	95 23       	and	r25, r21
 292:	11 f0       	breq	.+4      	; 0x298 <__mulsf3+0x1c>
 294:	0c 94 ab 01 	jmp	0x356	; 0x356 <__fp_inf>
 298:	0c 94 b1 01 	jmp	0x362	; 0x362 <__fp_nan>
 29c:	11 24       	eor	r1, r1
 29e:	0c 94 38 01 	jmp	0x270	; 0x270 <__fp_szero>

000002a2 <__mulsf3x>:
 2a2:	0e 94 15 01 	call	0x22a	; 0x22a <__fp_split3>
 2a6:	70 f3       	brcs	.-36     	; 0x284 <__mulsf3+0x8>

000002a8 <__mulsf3_pse>:
 2a8:	95 9f       	mul	r25, r21
 2aa:	c1 f3       	breq	.-16     	; 0x29c <__mulsf3+0x20>
 2ac:	95 0f       	add	r25, r21
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	55 1f       	adc	r21, r21
 2b2:	62 9f       	mul	r22, r18
 2b4:	f0 01       	movw	r30, r0
 2b6:	72 9f       	mul	r23, r18
 2b8:	bb 27       	eor	r27, r27
 2ba:	f0 0d       	add	r31, r0
 2bc:	b1 1d       	adc	r27, r1
 2be:	63 9f       	mul	r22, r19
 2c0:	aa 27       	eor	r26, r26
 2c2:	f0 0d       	add	r31, r0
 2c4:	b1 1d       	adc	r27, r1
 2c6:	aa 1f       	adc	r26, r26
 2c8:	64 9f       	mul	r22, r20
 2ca:	66 27       	eor	r22, r22
 2cc:	b0 0d       	add	r27, r0
 2ce:	a1 1d       	adc	r26, r1
 2d0:	66 1f       	adc	r22, r22
 2d2:	82 9f       	mul	r24, r18
 2d4:	22 27       	eor	r18, r18
 2d6:	b0 0d       	add	r27, r0
 2d8:	a1 1d       	adc	r26, r1
 2da:	62 1f       	adc	r22, r18
 2dc:	73 9f       	mul	r23, r19
 2de:	b0 0d       	add	r27, r0
 2e0:	a1 1d       	adc	r26, r1
 2e2:	62 1f       	adc	r22, r18
 2e4:	83 9f       	mul	r24, r19
 2e6:	a0 0d       	add	r26, r0
 2e8:	61 1d       	adc	r22, r1
 2ea:	22 1f       	adc	r18, r18
 2ec:	74 9f       	mul	r23, r20
 2ee:	33 27       	eor	r19, r19
 2f0:	a0 0d       	add	r26, r0
 2f2:	61 1d       	adc	r22, r1
 2f4:	23 1f       	adc	r18, r19
 2f6:	84 9f       	mul	r24, r20
 2f8:	60 0d       	add	r22, r0
 2fa:	21 1d       	adc	r18, r1
 2fc:	82 2f       	mov	r24, r18
 2fe:	76 2f       	mov	r23, r22
 300:	6a 2f       	mov	r22, r26
 302:	11 24       	eor	r1, r1
 304:	9f 57       	subi	r25, 0x7F	; 127
 306:	50 40       	sbci	r21, 0x00	; 0
 308:	9a f0       	brmi	.+38     	; 0x330 <__mulsf3_pse+0x88>
 30a:	f1 f0       	breq	.+60     	; 0x348 <__mulsf3_pse+0xa0>
 30c:	88 23       	and	r24, r24
 30e:	4a f0       	brmi	.+18     	; 0x322 <__mulsf3_pse+0x7a>
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	bb 1f       	adc	r27, r27
 316:	66 1f       	adc	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	88 1f       	adc	r24, r24
 31c:	91 50       	subi	r25, 0x01	; 1
 31e:	50 40       	sbci	r21, 0x00	; 0
 320:	a9 f7       	brne	.-22     	; 0x30c <__mulsf3_pse+0x64>
 322:	9e 3f       	cpi	r25, 0xFE	; 254
 324:	51 05       	cpc	r21, r1
 326:	80 f0       	brcs	.+32     	; 0x348 <__mulsf3_pse+0xa0>
 328:	0c 94 ab 01 	jmp	0x356	; 0x356 <__fp_inf>
 32c:	0c 94 38 01 	jmp	0x270	; 0x270 <__fp_szero>
 330:	5f 3f       	cpi	r21, 0xFF	; 255
 332:	e4 f3       	brlt	.-8      	; 0x32c <__mulsf3_pse+0x84>
 334:	98 3e       	cpi	r25, 0xE8	; 232
 336:	d4 f3       	brlt	.-12     	; 0x32c <__mulsf3_pse+0x84>
 338:	86 95       	lsr	r24
 33a:	77 95       	ror	r23
 33c:	67 95       	ror	r22
 33e:	b7 95       	ror	r27
 340:	f7 95       	ror	r31
 342:	e7 95       	ror	r30
 344:	9f 5f       	subi	r25, 0xFF	; 255
 346:	c1 f7       	brne	.-16     	; 0x338 <__mulsf3_pse+0x90>
 348:	fe 2b       	or	r31, r30
 34a:	88 0f       	add	r24, r24
 34c:	91 1d       	adc	r25, r1
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
 352:	97 f9       	bld	r25, 7
 354:	08 95       	ret

00000356 <__fp_inf>:
 356:	97 f9       	bld	r25, 7
 358:	9f 67       	ori	r25, 0x7F	; 127
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	08 95       	ret

00000362 <__fp_nan>:
 362:	9f ef       	ldi	r25, 0xFF	; 255
 364:	80 ec       	ldi	r24, 0xC0	; 192
 366:	08 95       	ret

00000368 <__fp_pscA>:
 368:	00 24       	eor	r0, r0
 36a:	0a 94       	dec	r0
 36c:	16 16       	cp	r1, r22
 36e:	17 06       	cpc	r1, r23
 370:	18 06       	cpc	r1, r24
 372:	09 06       	cpc	r0, r25
 374:	08 95       	ret

00000376 <__fp_pscB>:
 376:	00 24       	eor	r0, r0
 378:	0a 94       	dec	r0
 37a:	12 16       	cp	r1, r18
 37c:	13 06       	cpc	r1, r19
 37e:	14 06       	cpc	r1, r20
 380:	05 06       	cpc	r0, r21
 382:	08 95       	ret

00000384 <__fp_round>:
 384:	09 2e       	mov	r0, r25
 386:	03 94       	inc	r0
 388:	00 0c       	add	r0, r0
 38a:	11 f4       	brne	.+4      	; 0x390 <__fp_round+0xc>
 38c:	88 23       	and	r24, r24
 38e:	52 f0       	brmi	.+20     	; 0x3a4 <__fp_round+0x20>
 390:	bb 0f       	add	r27, r27
 392:	40 f4       	brcc	.+16     	; 0x3a4 <__fp_round+0x20>
 394:	bf 2b       	or	r27, r31
 396:	11 f4       	brne	.+4      	; 0x39c <__fp_round+0x18>
 398:	60 ff       	sbrs	r22, 0
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <__fp_round+0x20>
 39c:	6f 5f       	subi	r22, 0xFF	; 255
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	8f 4f       	sbci	r24, 0xFF	; 255
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
 3a4:	08 95       	ret

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
