
DA6T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000010ac  00001140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  0080010a  0080010a  0000114a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000114a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df4  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000361  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000527  00000000  00000000  000023d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  000028fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c5  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011dc  00000000  00000000  00002f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000040e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__ctors_end>
       4:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
       8:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
       c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      10:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      14:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      18:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      1c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      20:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      24:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      28:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      2c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      30:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      34:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      38:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      3c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      40:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      44:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      48:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      4c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      50:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      54:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      58:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      5c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      60:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      64:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	46 00       	.word	0x0046	; ????

0000006a <__c.2289>:
      6a:	6f 00                                               o.

0000006c <__c.2279>:
      6c:	4c 6f 61 64 69 6e 67 20 44 41 36 2e 2e 2e 00        Loading DA6....

0000007b <waitImage>:
	...
      d7:	00 c0 20 20 20 20 20 20 20 20 20 20 c0 00 00 00     ..          ....
      e7:	00 00 00 00 00 00 f0 10 10 10 10 e0 00 00 f0 00     ................
      f7:	00 80 40 40 40 80 00 00 80 40 40 40 80 00 00 80     ..@@@....@@@....
     107:	40 40 40 80 00 00 80 40 40 40 80 00 00 00 00 00     @@@....@@@......
	...
     12b:	00 0f 11 31 31 d1 f1 d1 d1 31 11 11 0f 00 00 00     ...11....1......
     13b:	00 00 00 00 00 00 1f 01 01 01 01 00 00 00 1f 00     ................
     14b:	00 0f 12 12 12 0b 00 00 0c 12 12 0a 1f 00 00 09     ................
     15b:	12 12 12 0c 00 00 0f 12 12 12 0b 00 00 00 00 00     ................
	...
     17f:	00 f0 18 86 86 e1 f1 e1 e1 86 18 18 f0 00 00 00     ................
	...
     197:	60 80 00 80 60 80 00 80 60 00 40 20 20 20 c0 00     `...`...`.@   ..
     1a7:	00 e8 00 20 f8 20 00 00 00 00 00 00 00 00 00 00     ... . ..........
	...
     1d3:	00 03 07 07 07 07 07 07 07 07 07 07 03 00 00 00     ................
	...
     1eb:	00 03 0c 03 00 03 0c 03 00 00 06 09 09 05 0f 00     ................
     1fb:	00 0f 00 00 0f 08 00 00 00 00 08 00 00 08 00 00     ................
     20b:	08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000273 <FontLookup>:
     273:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
     283:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
     293:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     2a3:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
     2b3:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     2c3:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     2d3:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     2e3:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     2f3:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     303:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     313:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
     323:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     333:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     343:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     353:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     363:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     373:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     383:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     393:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     3a3:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     3b3:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     3c3:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     3d3:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     3e3:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     3f3:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     403:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     413:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     423:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     433:	50 3c 44 64 54 4c 44                                P<DdTLD

0000043a <__ctors_end>:
     43a:	11 24       	eor	r1, r1
     43c:	1f be       	out	0x3f, r1	; 63
     43e:	cf ef       	ldi	r28, 0xFF	; 255
     440:	d8 e0       	ldi	r29, 0x08	; 8
     442:	de bf       	out	0x3e, r29	; 62
     444:	cd bf       	out	0x3d, r28	; 61

00000446 <__do_copy_data>:
     446:	11 e0       	ldi	r17, 0x01	; 1
     448:	a0 e0       	ldi	r26, 0x00	; 0
     44a:	b1 e0       	ldi	r27, 0x01	; 1
     44c:	ec ea       	ldi	r30, 0xAC	; 172
     44e:	f0 e1       	ldi	r31, 0x10	; 16
     450:	02 c0       	rjmp	.+4      	; 0x456 <__do_copy_data+0x10>
     452:	05 90       	lpm	r0, Z+
     454:	0d 92       	st	X+, r0
     456:	aa 30       	cpi	r26, 0x0A	; 10
     458:	b1 07       	cpc	r27, r17
     45a:	d9 f7       	brne	.-10     	; 0x452 <__do_copy_data+0xc>

0000045c <__do_clear_bss>:
     45c:	23 e0       	ldi	r18, 0x03	; 3
     45e:	aa e0       	ldi	r26, 0x0A	; 10
     460:	b1 e0       	ldi	r27, 0x01	; 1
     462:	01 c0       	rjmp	.+2      	; 0x466 <.do_clear_bss_start>

00000464 <.do_clear_bss_loop>:
     464:	1d 92       	st	X+, r1

00000466 <.do_clear_bss_start>:
     466:	a9 30       	cpi	r26, 0x09	; 9
     468:	b2 07       	cpc	r27, r18
     46a:	e1 f7       	brne	.-8      	; 0x464 <.do_clear_bss_loop>
     46c:	0e 94 28 04 	call	0x850	; 0x850 <main>
     470:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <_exit>

00000474 <__bad_interrupt>:
     474:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000478 <LcdSend>:
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
     478:	2a 98       	cbi	0x05, 2	; 5

    if ( cd == LCD_DATA )
     47a:	61 30       	cpi	r22, 0x01	; 1
     47c:	11 f4       	brne	.+4      	; 0x482 <LcdSend+0xa>
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
     47e:	28 9a       	sbi	0x05, 0	; 5
     480:	01 c0       	rjmp	.+2      	; 0x484 <LcdSend+0xc>
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
     482:	28 98       	cbi	0x05, 0	; 5
    }

    /*  Send data to display controller. */
    SPDR = data;
     484:	8e bd       	out	0x2e, r24	; 46

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
     486:	0d b4       	in	r0, 0x2d	; 45
     488:	07 fe       	sbrs	r0, 7
     48a:	fd cf       	rjmp	.-6      	; 0x486 <LcdSend+0xe>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
     48c:	2a 9a       	sbi	0x05, 2	; 5
     48e:	08 95       	ret

00000490 <LcdContrast>:
 * Description  :  Set display contrast.
 * Argument(s)  :  contrast -> Contrast value from 0x00 to 0x7F.
 * Return value :  None.
 */
void LcdContrast ( byte contrast )
{
     490:	cf 93       	push	r28
     492:	c8 2f       	mov	r28, r24
    /* LCD Extended Commands. */
    LcdSend( 0x21, LCD_CMD );
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	81 e2       	ldi	r24, 0x21	; 33
     498:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>

    /* Set LCD contrast level. */
    LcdSend( 0x80 | contrast, LCD_CMD );
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	8c 2f       	mov	r24, r28
     4a0:	80 68       	ori	r24, 0x80	; 128
     4a2:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>

    /* LCD Standard Commands, horizontal addressing mode. */
    LcdSend( 0x20, LCD_CMD );
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	80 e2       	ldi	r24, 0x20	; 32
     4aa:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>
}
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <LcdClear>:
//    /* Set 0x00 to all LcdCache's contents */
//    for ( i = 0; i < LCD_CACHE_SIZE; i++ )
//    {
//        LcdCache[ i ] = 0x00;
//    }
        memset(LcdCache,0x00,LCD_CACHE_SIZE); //Sugestion - its faster and its 10 bytes less in program mem
     4b2:	88 ef       	ldi	r24, 0xF8	; 248
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	e1 e1       	ldi	r30, 0x11	; 17
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	df 01       	movw	r26, r30
     4bc:	9c 01       	movw	r18, r24
     4be:	1d 92       	st	X+, r1
     4c0:	21 50       	subi	r18, 0x01	; 1
     4c2:	30 40       	sbci	r19, 0x00	; 0
     4c4:	e1 f7       	brne	.-8      	; 0x4be <LcdClear+0xc>
    /* Reset watermark pointers to full */
    LoWaterMark = 0;
     4c6:	10 92 0e 01 	sts	0x010E, r1
     4ca:	10 92 0d 01 	sts	0x010D, r1
    HiWaterMark = LCD_CACHE_SIZE - 1;
     4ce:	87 ef       	ldi	r24, 0xF7	; 247
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	90 93 0c 01 	sts	0x010C, r25
     4d6:	80 93 0b 01 	sts	0x010B, r24

    /* Set update flag to be true */
    UpdateLcd = TRUE;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 0a 01 	sts	0x010A, r24
     4e0:	08 95       	ret

000004e2 <LcdChr>:
 * Argument(s)  :  size -> Font size. See enum in pcd8544.h.
 *                 ch   -> Character to write.
 * Return value :  see pcd8544.h about return value
 */
byte LcdChr ( LcdFontSize size, byte ch )
{
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
    byte i, c;
    byte b1, b2;
    int  tmpIdx;

    if ( LcdCacheIdx < LoWaterMark )
     4ec:	40 91 0f 01 	lds	r20, 0x010F
     4f0:	50 91 10 01 	lds	r21, 0x0110
     4f4:	20 91 0d 01 	lds	r18, 0x010D
     4f8:	30 91 0e 01 	lds	r19, 0x010E
     4fc:	42 17       	cp	r20, r18
     4fe:	53 07       	cpc	r21, r19
     500:	24 f4       	brge	.+8      	; 0x50a <LcdChr+0x28>
    {
        /* Update low marker. */
        LoWaterMark = LcdCacheIdx;
     502:	50 93 0e 01 	sts	0x010E, r21
     506:	40 93 0d 01 	sts	0x010D, r20
    }

    if ( (ch < 0x20) || (ch > 0x7b) )
     50a:	90 ee       	ldi	r25, 0xE0	; 224
     50c:	96 0f       	add	r25, r22
     50e:	9c 35       	cpi	r25, 0x5C	; 92
     510:	08 f4       	brcc	.+2      	; 0x514 <LcdChr+0x32>
     512:	9c c0       	rjmp	.+312    	; 0x64c <LcdChr+0x16a>
    {
        /* Convert to a printable character. */
        ch = 92;
     514:	6c e5       	ldi	r22, 0x5C	; 92
     516:	9a c0       	rjmp	.+308    	; 0x64c <LcdChr+0x16a>
    if ( size == FONT_1X )
    {
        for ( i = 0; i < 5; i++ )
        {
            /* Copy lookup table from Flash ROM to LcdCache */
            LcdCache[LcdCacheIdx++] = pgm_read_byte(&( FontLookup[ ch - 32 ][ i ] ) ) << 1;
     518:	84 91       	lpm	r24, Z
     51a:	88 0f       	add	r24, r24
     51c:	8d 93       	st	X+, r24
     51e:	31 96       	adiw	r30, 0x01	; 1
        ch = 92;
    }

    if ( size == FONT_1X )
    {
        for ( i = 0; i < 5; i++ )
     520:	a2 17       	cp	r26, r18
     522:	b3 07       	cpc	r27, r19
     524:	c9 f7       	brne	.-14     	; 0x518 <LcdChr+0x36>
     526:	4b 5f       	subi	r20, 0xFB	; 251
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	50 93 10 01 	sts	0x0110, r21
     52e:	40 93 0f 01 	sts	0x010F, r20
     532:	66 c0       	rjmp	.+204    	; 0x600 <LcdChr+0x11e>
        {
            /* Copy lookup table from Flash ROM to LcdCache */
            LcdCache[LcdCacheIdx++] = pgm_read_byte(&( FontLookup[ ch - 32 ][ i ] ) ) << 1;
        }
    }
    else if ( size == FONT_2X )
     534:	82 30       	cpi	r24, 0x02	; 2
     536:	09 f0       	breq	.+2      	; 0x53a <LcdChr+0x58>
     538:	63 c0       	rjmp	.+198    	; 0x600 <LcdChr+0x11e>
    {
        tmpIdx = LcdCacheIdx - 84;
     53a:	ca 01       	movw	r24, r20
     53c:	84 55       	subi	r24, 0x54	; 84
     53e:	91 09       	sbc	r25, r1

        if ( tmpIdx < LoWaterMark )
     540:	20 91 0d 01 	lds	r18, 0x010D
     544:	30 91 0e 01 	lds	r19, 0x010E
     548:	82 17       	cp	r24, r18
     54a:	93 07       	cpc	r25, r19
     54c:	0c f0       	brlt	.+2      	; 0x550 <LcdChr+0x6e>
     54e:	98 c0       	rjmp	.+304    	; 0x680 <LcdChr+0x19e>
        {
            LoWaterMark = tmpIdx;
     550:	90 93 0e 01 	sts	0x010E, r25
     554:	80 93 0d 01 	sts	0x010D, r24
     558:	93 c0       	rjmp	.+294    	; 0x680 <LcdChr+0x19e>
        if ( tmpIdx < 0 ) return OUT_OF_BORDER;

        for ( i = 0; i < 5; i++ )
        {
            /* Copy lookup table from Flash ROM to temporary c */
            c = pgm_read_byte(&(FontLookup[ch - 32][i])) << 1;
     55a:	94 91       	lpm	r25, Z
     55c:	99 0f       	add	r25, r25
            /* Enlarge image */
            /* First part */
            b1 =  (c & 0x01) * 3;
            b1 |= (c & 0x02) * 6;
            b1 |= (c & 0x04) * 12;
     55e:	89 2f       	mov	r24, r25
     560:	84 70       	andi	r24, 0x04	; 4
     562:	28 2f       	mov	r18, r24
     564:	22 0f       	add	r18, r18
     566:	82 0f       	add	r24, r18
     568:	28 2f       	mov	r18, r24
     56a:	22 0f       	add	r18, r18
     56c:	22 0f       	add	r18, r18
            /* Copy lookup table from Flash ROM to temporary c */
            c = pgm_read_byte(&(FontLookup[ch - 32][i])) << 1;
            /* Enlarge image */
            /* First part */
            b1 =  (c & 0x01) * 3;
            b1 |= (c & 0x02) * 6;
     56e:	89 2f       	mov	r24, r25
     570:	82 70       	andi	r24, 0x02	; 2
     572:	38 2f       	mov	r19, r24
     574:	33 0f       	add	r19, r19
     576:	83 0f       	add	r24, r19
     578:	88 0f       	add	r24, r24
            b1 |= (c & 0x04) * 12;
     57a:	82 2b       	or	r24, r18
            b1 |= (c & 0x08) * 24;
     57c:	39 2f       	mov	r19, r25
     57e:	38 70       	andi	r19, 0x08	; 8
     580:	3f 9d       	mul	r19, r15
     582:	30 2d       	mov	r19, r0
     584:	11 24       	eor	r1, r1
     586:	38 2b       	or	r19, r24

            c >>= 4;
     588:	92 95       	swap	r25
     58a:	9f 70       	andi	r25, 0x0F	; 15
            /* Second part */
            b2 =  (c & 0x01) * 3;
     58c:	29 2f       	mov	r18, r25
     58e:	21 70       	andi	r18, 0x01	; 1
     590:	82 2f       	mov	r24, r18
     592:	88 0f       	add	r24, r24
     594:	82 0f       	add	r24, r18
            b2 |= (c & 0x02) * 6;
     596:	29 2f       	mov	r18, r25
     598:	22 70       	andi	r18, 0x02	; 2
     59a:	12 2f       	mov	r17, r18
     59c:	11 0f       	add	r17, r17
     59e:	21 0f       	add	r18, r17
     5a0:	22 0f       	add	r18, r18
     5a2:	28 2b       	or	r18, r24
            b2 |= (c & 0x04) * 12;
     5a4:	89 2f       	mov	r24, r25
     5a6:	84 70       	andi	r24, 0x04	; 4
     5a8:	18 2f       	mov	r17, r24
     5aa:	11 0f       	add	r17, r17
     5ac:	81 0f       	add	r24, r17
     5ae:	88 0f       	add	r24, r24
     5b0:	88 0f       	add	r24, r24
     5b2:	82 2b       	or	r24, r18
            b2 |= (c & 0x08) * 24;
     5b4:	29 2f       	mov	r18, r25
     5b6:	28 70       	andi	r18, 0x08	; 8
     5b8:	2f 9d       	mul	r18, r15
     5ba:	20 2d       	mov	r18, r0
     5bc:	11 24       	eor	r1, r1
     5be:	98 2f       	mov	r25, r24
     5c0:	92 2b       	or	r25, r18
     5c2:	8d 01       	movw	r16, r26
     5c4:	01 50       	subi	r16, 0x01	; 1
     5c6:	11 09       	sbc	r17, r1

            /* Copy two parts into LcdCache */
            LcdCache[tmpIdx++] = b1;
     5c8:	e8 01       	movw	r28, r16
     5ca:	38 83       	st	Y, r19
            LcdCache[tmpIdx++] = b1;
     5cc:	3c 93       	st	X, r19
     5ce:	9d 01       	movw	r18, r26
     5d0:	2d 5a       	subi	r18, 0xAD	; 173
     5d2:	3f 4f       	sbci	r19, 0xFF	; 255
            LcdCache[tmpIdx + 82] = b2;
     5d4:	e9 01       	movw	r28, r18
     5d6:	98 83       	st	Y, r25
     5d8:	2f 5f       	subi	r18, 0xFF	; 255
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
            LcdCache[tmpIdx + 83] = b2;
     5dc:	e9 01       	movw	r28, r18
     5de:	98 83       	st	Y, r25
     5e0:	31 96       	adiw	r30, 0x01	; 1
     5e2:	12 96       	adiw	r26, 0x02	; 2
            LoWaterMark = tmpIdx;
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;

        for ( i = 0; i < 5; i++ )
     5e4:	a6 17       	cp	r26, r22
     5e6:	b7 07       	cpc	r27, r23
     5e8:	09 f0       	breq	.+2      	; 0x5ec <LcdChr+0x10a>
     5ea:	b7 cf       	rjmp	.-146    	; 0x55a <LcdChr+0x78>
            LcdCache[tmpIdx + 83] = b2;
        }

        /* Update x cursor position. */
        /* Version 0.2.5 - Possible bug fixed on Dec 25,2008 */
        LcdCacheIdx = (LcdCacheIdx + 11) % LCD_CACHE_SIZE;
     5ec:	ca 01       	movw	r24, r20
     5ee:	0b 96       	adiw	r24, 0x0b	; 11
     5f0:	68 ef       	ldi	r22, 0xF8	; 248
     5f2:	71 e0       	ldi	r23, 0x01	; 1
     5f4:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodhi4>
     5f8:	90 93 10 01 	sts	0x0110, r25
     5fc:	80 93 0f 01 	sts	0x010F, r24
    }

    if ( LcdCacheIdx > HiWaterMark )
     600:	80 91 0f 01 	lds	r24, 0x010F
     604:	90 91 10 01 	lds	r25, 0x0110
     608:	20 91 0b 01 	lds	r18, 0x010B
     60c:	30 91 0c 01 	lds	r19, 0x010C
     610:	28 17       	cp	r18, r24
     612:	39 07       	cpc	r19, r25
     614:	24 f4       	brge	.+8      	; 0x61e <LcdChr+0x13c>
    {
        /* Update high marker. */
        HiWaterMark = LcdCacheIdx;
     616:	90 93 0c 01 	sts	0x010C, r25
     61a:	80 93 0b 01 	sts	0x010B, r24
    }

    /* Horizontal gap between characters. */
    /* Version 0.2.5 - Possible bug fixed on Dec 25,2008 */
    LcdCache[LcdCacheIdx] = 0x00;
     61e:	fc 01       	movw	r30, r24
     620:	ef 5e       	subi	r30, 0xEF	; 239
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	10 82       	st	Z, r1
    /* At index number LCD_CACHE_SIZE - 1, wrap to 0 */
    if(LcdCacheIdx == (LCD_CACHE_SIZE - 1) )
     626:	87 3f       	cpi	r24, 0xF7	; 247
     628:	d1 e0       	ldi	r29, 0x01	; 1
     62a:	9d 07       	cpc	r25, r29
     62c:	31 f4       	brne	.+12     	; 0x63a <LcdChr+0x158>
    {
        LcdCacheIdx = 0;
     62e:	10 92 10 01 	sts	0x0110, r1
     632:	10 92 0f 01 	sts	0x010F, r1
        return OK_WITH_WRAP;
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	3c c0       	rjmp	.+120    	; 0x6b2 <LcdChr+0x1d0>
    }
    /* Otherwise just increment the index */
    LcdCacheIdx++;
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	90 93 10 01 	sts	0x0110, r25
     640:	80 93 0f 01 	sts	0x010F, r24
    return OK;
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	35 c0       	rjmp	.+106    	; 0x6b2 <LcdChr+0x1d0>
        if ( tmpIdx < LoWaterMark )
        {
            LoWaterMark = tmpIdx;
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	33 c0       	rjmp	.+102    	; 0x6b2 <LcdChr+0x1d0>
    {
        /* Convert to a printable character. */
        ch = 92;
    }

    if ( size == FONT_1X )
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	09 f0       	breq	.+2      	; 0x652 <LcdChr+0x170>
     650:	71 cf       	rjmp	.-286    	; 0x534 <LcdChr+0x52>
     652:	40 91 0f 01 	lds	r20, 0x010F
     656:	50 91 10 01 	lds	r21, 0x0110
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	60 52       	subi	r22, 0x20	; 32
     65e:	71 09       	sbc	r23, r1
     660:	fb 01       	movw	r30, r22
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	e6 0f       	add	r30, r22
     66c:	f7 1f       	adc	r31, r23
     66e:	ed 58       	subi	r30, 0x8D	; 141
     670:	fd 4f       	sbci	r31, 0xFD	; 253
     672:	da 01       	movw	r26, r20
     674:	af 5e       	subi	r26, 0xEF	; 239
     676:	be 4f       	sbci	r27, 0xFE	; 254
     678:	9a 01       	movw	r18, r20
     67a:	2a 5e       	subi	r18, 0xEA	; 234
     67c:	3e 4f       	sbci	r19, 0xFE	; 254
     67e:	4c cf       	rjmp	.-360    	; 0x518 <LcdChr+0x36>
        if ( tmpIdx < LoWaterMark )
        {
            LoWaterMark = tmpIdx;
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;
     680:	99 23       	and	r25, r25
     682:	14 f3       	brlt	.-60     	; 0x648 <LcdChr+0x166>
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	60 52       	subi	r22, 0x20	; 32
     688:	71 09       	sbc	r23, r1
     68a:	fb 01       	movw	r30, r22
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	e6 0f       	add	r30, r22
     696:	f7 1f       	adc	r31, r23
     698:	ed 58       	subi	r30, 0x8D	; 141
     69a:	fd 4f       	sbci	r31, 0xFD	; 253
     69c:	da 01       	movw	r26, r20
     69e:	a2 54       	subi	r26, 0x42	; 66
     6a0:	bf 4f       	sbci	r27, 0xFF	; 255
     6a2:	ba 01       	movw	r22, r20
     6a4:	68 53       	subi	r22, 0x38	; 56
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
            /* Enlarge image */
            /* First part */
            b1 =  (c & 0x01) * 3;
            b1 |= (c & 0x02) * 6;
            b1 |= (c & 0x04) * 12;
            b1 |= (c & 0x08) * 24;
     6a8:	0f 2e       	mov	r0, r31
     6aa:	f8 e1       	ldi	r31, 0x18	; 24
     6ac:	ff 2e       	mov	r15, r31
     6ae:	f0 2d       	mov	r31, r0
     6b0:	54 cf       	rjmp	.-344    	; 0x55a <LcdChr+0x78>
        return OK_WITH_WRAP;
    }
    /* Otherwise just increment the index */
    LcdCacheIdx++;
    return OK;
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	08 95       	ret

000006be <LcdFStr>:
 * Return value :  see return value on pcd8544.h
 * Example      :  LcdFStr(FONT_1X, PSTR("Hello World"));
 *                 LcdFStr(FONT_1X, &name_of_string_as_array);
 */
byte LcdFStr ( LcdFontSize size, const byte *dataPtr )
{
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	18 2f       	mov	r17, r24
     6c6:	eb 01       	movw	r28, r22
    byte c;
    byte response;
    for ( c = pgm_read_byte( dataPtr ); c; ++dataPtr, c = pgm_read_byte( dataPtr ) )
     6c8:	fb 01       	movw	r30, r22
     6ca:	64 91       	lpm	r22, Z
     6cc:	66 23       	and	r22, r22
     6ce:	61 f0       	breq	.+24     	; 0x6e8 <LcdFStr+0x2a>
    {
        /* Put char */
        response = LcdChr( size, c );
     6d0:	81 2f       	mov	r24, r17
     6d2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LcdChr>
        if(response == OUT_OF_BORDER)
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	49 f0       	breq	.+18     	; 0x6ec <LcdFStr+0x2e>
 */
byte LcdFStr ( LcdFontSize size, const byte *dataPtr )
{
    byte c;
    byte response;
    for ( c = pgm_read_byte( dataPtr ); c; ++dataPtr, c = pgm_read_byte( dataPtr ) )
     6da:	21 96       	adiw	r28, 0x01	; 1
     6dc:	fe 01       	movw	r30, r28
     6de:	64 91       	lpm	r22, Z
     6e0:	61 11       	cpse	r22, r1
     6e2:	f6 cf       	rjmp	.-20     	; 0x6d0 <LcdFStr+0x12>
        response = LcdChr( size, c );
        if(response == OUT_OF_BORDER)
            return OUT_OF_BORDER;
    }
        /* Fixed by Jakub Lasinski. Version 0.2.6, March 14, 2009 */
    return OK;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <LcdFStr+0x30>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <LcdFStr+0x30>
    for ( c = pgm_read_byte( dataPtr ); c; ++dataPtr, c = pgm_read_byte( dataPtr ) )
    {
        /* Put char */
        response = LcdChr( size, c );
        if(response == OUT_OF_BORDER)
            return OUT_OF_BORDER;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
    }
        /* Fixed by Jakub Lasinski. Version 0.2.6, March 14, 2009 */
    return OK;
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	08 95       	ret

000006f6 <LcdImage>:
//    {
//              /* Copy data from pointer to cache buffer */
//        LcdCache[LcdCacheIdx] = pgm_read_byte( imageData++ );
//    }
        /* optimized by Jakub Lasinski, version 0.2.6, March 14, 2009 */
    memcpy_P(LcdCache,imageData,LCD_CACHE_SIZE);        //Same as aboeve - 6 bytes less and faster instruction
     6f6:	48 ef       	ldi	r20, 0xF8	; 248
     6f8:	51 e0       	ldi	r21, 0x01	; 1
     6fa:	bc 01       	movw	r22, r24
     6fc:	81 e1       	ldi	r24, 0x11	; 17
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 73 05 	call	0xae6	; 0xae6 <memcpy_P>
        /* Reset watermark pointers to be full */
    LoWaterMark = 0;
     704:	10 92 0e 01 	sts	0x010E, r1
     708:	10 92 0d 01 	sts	0x010D, r1
    HiWaterMark = LCD_CACHE_SIZE - 1;
     70c:	87 ef       	ldi	r24, 0xF7	; 247
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	90 93 0c 01 	sts	0x010C, r25
     714:	80 93 0b 01 	sts	0x010B, r24

        /* Set update flag to be true */
    UpdateLcd = TRUE;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 0a 01 	sts	0x010A, r24
     71e:	08 95       	ret

00000720 <LcdUpdate>:
 * Description  :  Copies the LCD cache into the device RAM.
 * Argument(s)  :  None.
 * Return value :  None.
 */
void LcdUpdate ( void )
{
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
    int i;

    if ( LoWaterMark < 0 )
     728:	80 91 0d 01 	lds	r24, 0x010D
     72c:	90 91 0e 01 	lds	r25, 0x010E
     730:	99 23       	and	r25, r25
     732:	2c f4       	brge	.+10     	; 0x73e <LcdUpdate+0x1e>
        LoWaterMark = 0;
     734:	10 92 0e 01 	sts	0x010E, r1
     738:	10 92 0d 01 	sts	0x010D, r1
     73c:	09 c0       	rjmp	.+18     	; 0x750 <LcdUpdate+0x30>
    else if ( LoWaterMark >= LCD_CACHE_SIZE )
     73e:	88 3f       	cpi	r24, 0xF8	; 248
     740:	91 40       	sbci	r25, 0x01	; 1
     742:	34 f0       	brlt	.+12     	; 0x750 <LcdUpdate+0x30>
        LoWaterMark = LCD_CACHE_SIZE - 1;
     744:	87 ef       	ldi	r24, 0xF7	; 247
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	90 93 0e 01 	sts	0x010E, r25
     74c:	80 93 0d 01 	sts	0x010D, r24

    if ( HiWaterMark < 0 )
     750:	80 91 0b 01 	lds	r24, 0x010B
     754:	90 91 0c 01 	lds	r25, 0x010C
     758:	99 23       	and	r25, r25
     75a:	2c f4       	brge	.+10     	; 0x766 <LcdUpdate+0x46>
        HiWaterMark = 0;
     75c:	10 92 0c 01 	sts	0x010C, r1
     760:	10 92 0b 01 	sts	0x010B, r1
     764:	09 c0       	rjmp	.+18     	; 0x778 <LcdUpdate+0x58>
    else if ( HiWaterMark >= LCD_CACHE_SIZE )
     766:	88 3f       	cpi	r24, 0xF8	; 248
     768:	91 40       	sbci	r25, 0x01	; 1
     76a:	34 f0       	brlt	.+12     	; 0x778 <LcdUpdate+0x58>
        HiWaterMark = LCD_CACHE_SIZE - 1;
     76c:	87 ef       	ldi	r24, 0xF7	; 247
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	90 93 0c 01 	sts	0x010C, r25
     774:	80 93 0b 01 	sts	0x010B, r24

    /*  Set base address according to LoWaterMark. */
    LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
     778:	c0 91 0d 01 	lds	r28, 0x010D
     77c:	d0 91 0e 01 	lds	r29, 0x010E
     780:	ce 01       	movw	r24, r28
     782:	64 e5       	ldi	r22, 0x54	; 84
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divmodhi4>
     78a:	16 2f       	mov	r17, r22
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>
    LcdSend( 0x40 | ( LoWaterMark / LCD_X_RES ), LCD_CMD );
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	81 2f       	mov	r24, r17
     798:	80 64       	ori	r24, 0x40	; 64
     79a:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>

    /*  Serialize the display buffer. */
    for ( i = LoWaterMark; i <= HiWaterMark; i++ )
     79e:	80 91 0b 01 	lds	r24, 0x010B
     7a2:	90 91 0c 01 	lds	r25, 0x010C
     7a6:	8c 17       	cp	r24, r28
     7a8:	9d 07       	cpc	r25, r29
     7aa:	8c f0       	brlt	.+34     	; 0x7ce <LcdUpdate+0xae>
     7ac:	8e 01       	movw	r16, r28
     7ae:	0f 5e       	subi	r16, 0xEF	; 239
     7b0:	1e 4f       	sbci	r17, 0xFE	; 254
    {
        LcdSend( LcdCache[ i ], LCD_DATA );
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	f8 01       	movw	r30, r16
     7b6:	81 91       	ld	r24, Z+
     7b8:	8f 01       	movw	r16, r30
     7ba:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>
    /*  Set base address according to LoWaterMark. */
    LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
    LcdSend( 0x40 | ( LoWaterMark / LCD_X_RES ), LCD_CMD );

    /*  Serialize the display buffer. */
    for ( i = LoWaterMark; i <= HiWaterMark; i++ )
     7be:	21 96       	adiw	r28, 0x01	; 1
     7c0:	80 91 0b 01 	lds	r24, 0x010B
     7c4:	90 91 0c 01 	lds	r25, 0x010C
     7c8:	8c 17       	cp	r24, r28
     7ca:	9d 07       	cpc	r25, r29
     7cc:	94 f7       	brge	.-28     	; 0x7b2 <LcdUpdate+0x92>
    {
        LcdSend( LcdCache[ i ], LCD_DATA );
    }

    /*  Reset watermark pointers. */
    LoWaterMark = LCD_CACHE_SIZE - 1;
     7ce:	87 ef       	ldi	r24, 0xF7	; 247
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	90 93 0e 01 	sts	0x010E, r25
     7d6:	80 93 0d 01 	sts	0x010D, r24
    HiWaterMark = 0;
     7da:	10 92 0c 01 	sts	0x010C, r1
     7de:	10 92 0b 01 	sts	0x010B, r1

    /* Set update flag to be true */
        UpdateLcd = FALSE;
     7e2:	10 92 0a 01 	sts	0x010A, r1
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	08 95       	ret

000007f0 <LcdInit>:
 * Return value :  None.
 */
void LcdInit ( void )
{
    /* Pull-up on reset pin. */
    LCD_PORT |= _BV ( LCD_RST_PIN );
     7f0:	2c 9a       	sbi	0x05, 4	; 5

    /* Set output bits on LCD Port. */
    LCD_DDR |= _BV( LCD_RST_PIN ) | _BV( LCD_DC_PIN ) | _BV( LCD_CE_PIN ) | _BV( SPI_MOSI_PIN ) | _BV( SPI_CLK_PIN );
     7f2:	84 b1       	in	r24, 0x04	; 4
     7f4:	8d 63       	ori	r24, 0x3D	; 61
     7f6:	84 b9       	out	0x04, r24	; 4

    Delay();

    /* Toggle display reset pin. */
    LCD_PORT &= ~( _BV( LCD_RST_PIN ) );
     7f8:	2c 98       	cbi	0x05, 4	; 5
    Delay();
    LCD_PORT |= _BV ( LCD_RST_PIN );
     7fa:	2c 9a       	sbi	0x05, 4	; 5

    /* Enable SPI port:
    * No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    */
    SPCR = 0x50;
     7fc:	80 e5       	ldi	r24, 0x50	; 80
     7fe:	8c bd       	out	0x2c, r24	; 44

    /* Disable LCD controller */
    LCD_PORT |= _BV( LCD_CE_PIN );
     800:	2a 9a       	sbi	0x05, 2	; 5

    LcdSend( 0x21, LCD_CMD ); /* LCD Extended Commands. */
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	81 e2       	ldi	r24, 0x21	; 33
     806:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>
    LcdSend( 0xC8, LCD_CMD ); /* Set LCD Vop (Contrast).*/
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	88 ec       	ldi	r24, 0xC8	; 200
     80e:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>
    LcdSend( 0x06, LCD_CMD ); /* Set Temp coefficent. */
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	86 e0       	ldi	r24, 0x06	; 6
     816:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>
    LcdSend( 0x13, LCD_CMD ); /* LCD bias mode 1:48. */
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	83 e1       	ldi	r24, 0x13	; 19
     81e:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>
    LcdSend( 0x20, LCD_CMD ); /* LCD Standard Commands,Horizontal addressing mode */
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	80 e2       	ldi	r24, 0x20	; 32
     826:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>
    LcdSend( 0x0C, LCD_CMD ); /* LCD in normal mode. */
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	8c e0       	ldi	r24, 0x0C	; 12
     82e:	0e 94 3c 02 	call	0x478	; 0x478 <LcdSend>

    /* Reset watermark pointers to empty */
    LoWaterMark = LCD_CACHE_SIZE;
     832:	88 ef       	ldi	r24, 0xF8	; 248
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	90 93 0e 01 	sts	0x010E, r25
     83a:	80 93 0d 01 	sts	0x010D, r24
    HiWaterMark = 0;
     83e:	10 92 0c 01 	sts	0x010C, r1
     842:	10 92 0b 01 	sts	0x010B, r1

    /* Clear display on first time use */
    LcdClear();
     846:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LcdClear>
    LcdUpdate();
     84a:	0e 94 90 03 	call	0x720	; 0x720 <LcdUpdate>
     84e:	08 95       	ret

00000850 <main>:
#include "pcd8544.h"		//header file for PCD8544 LCD (similar to Nokia 5110)
#include "pcd8544.c"		//driver for PCD8544 LCD (similar to Nokia 5110)
#include "main.h"			//header file for "Please Wait" icon displayed on LCD

int main()
{
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <main+0x6>
     856:	00 d0       	rcall	.+0      	; 0x858 <main+0x8>
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
        LcdInit();	//initialize  LCD (black rectangle)
     85c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <LcdInit>
        LcdContrast(0x7F);	 //display image on full contrast
     860:	8f e7       	ldi	r24, 0x7F	; 127
     862:	0e 94 48 02 	call	0x490	; 0x490 <LcdContrast>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     866:	2f e3       	ldi	r18, 0x3F	; 63
     868:	6d e0       	ldi	r22, 0x0D	; 13
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	60 40       	sbci	r22, 0x00	; 0
     870:	80 40       	sbci	r24, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <main+0x1c>
     874:	00 c0       	rjmp	.+0      	; 0x876 <main+0x26>
     876:	00 00       	nop
        _delay_ms(1000);	//1 sec delay
        LcdClear();			//clear LCD output
     878:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LcdClear>
       
        LcdContrast(0x3F);	//low contrast to make letters visible
     87c:	8f e3       	ldi	r24, 0x3F	; 63
     87e:	0e 94 48 02 	call	0x490	; 0x490 <LcdContrast>
     882:	9f e3       	ldi	r25, 0x3F	; 63
     884:	ed e0       	ldi	r30, 0x0D	; 13
     886:	f3 e0       	ldi	r31, 0x03	; 3
     888:	91 50       	subi	r25, 0x01	; 1
     88a:	e0 40       	sbci	r30, 0x00	; 0
     88c:	f0 40       	sbci	r31, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <main+0x38>
     890:	00 c0       	rjmp	.+0      	; 0x892 <main+0x42>
     892:	00 00       	nop
        _delay_ms(1000);	//1 second delay
        LcdClear();			//clear LCD output
     894:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LcdClear>
        
        LcdImage(waitImage);	//"Please Wait" icon
     898:	8b e7       	ldi	r24, 0x7B	; 123
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LcdImage>
        return OUT_OF_BORDER;
    if( y > 6)
        return OUT_OF_BORDER;
    /*  Calculate index. It is defined as address within 504 bytes memory */

    LcdCacheIdx = ( x - 1 ) * 6 + ( y - 1 ) * 84;
     8a0:	84 ea       	ldi	r24, 0xA4	; 164
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	90 93 10 01 	sts	0x0110, r25
     8a8:	80 93 0f 01 	sts	0x010F, r24
		LcdGotoXYFont(1,6);		//6th row, 1st cursor
		LcdFStr(FONT_1X,(unsigned char*)PSTR ("Loading DA6..."));	//fancy output for DA6
     8ac:	6c e6       	ldi	r22, 0x6C	; 108
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 5f 03 	call	0x6be	; 0x6be <LcdFStr>
        LcdUpdate();			//update output to LCD screen
     8b6:	0e 94 90 03 	call	0x720	; 0x720 <LcdUpdate>
     8ba:	2f ef       	ldi	r18, 0xFF	; 255
     8bc:	64 e3       	ldi	r22, 0x34	; 52
     8be:	8c e0       	ldi	r24, 0x0C	; 12
     8c0:	21 50       	subi	r18, 0x01	; 1
     8c2:	60 40       	sbci	r22, 0x00	; 0
     8c4:	80 40       	sbci	r24, 0x00	; 0
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <main+0x70>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <main+0x7a>
     8ca:	00 00       	nop
        _delay_ms(4000);		//4 second delay
		
		ADCSRA |= (1<<ADEN);	//ADC enable
     8cc:	ea e7       	ldi	r30, 0x7A	; 122
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	80 68       	ori	r24, 0x80	; 128
     8d4:	80 83       	st	Z, r24
		ADCSRA |=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);   //clock prescaler 128
     8d6:	80 81       	ld	r24, Z
     8d8:	87 60       	ori	r24, 0x07	; 7
     8da:	80 83       	st	Z, r24
		
		ADMUX |= (1<<REFS0)|(1<<ADLAR);	//external capacitor, ADC0 is input
     8dc:	ec e7       	ldi	r30, 0x7C	; 124
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	80 66       	ori	r24, 0x60	; 96
     8e4:	80 83       	st	Z, r24
		
		DDRC = 0x00;	
     8e6:	17 b8       	out	0x07, r1	; 7
		
		uint16_t temp0, temp1, temp2, temp3;		//create temporary veriables for ADC conversion

        while (1)
        {
				ADCSRA |= (1<<ADSC);	//begin ADC
     8e8:	0a e7       	ldi	r16, 0x7A	; 122
     8ea:	10 e0       	ldi	r17, 0x00	; 0
				
				while(!(ADCSRA &(1<<ADSC))==0);		//while not end of conversion
				temp0=(ADCH<<8)|ADCL;	//get ADC bits
     8ec:	0f 2e       	mov	r0, r31
     8ee:	f9 e7       	ldi	r31, 0x79	; 121
     8f0:	2f 2e       	mov	r2, r31
     8f2:	31 2c       	mov	r3, r1
     8f4:	f0 2d       	mov	r31, r0
                temp1 = temp0 % 10;		//for digit X in temp output XY.Z
                temp2 = temp0 % 100 / 10;	//for digit Y in temp output XY.Z
                temp3 = temp0 % 1000 / 100;	//for digit Z in temp output XY.Z
     8f6:	0f 2e       	mov	r0, r31
     8f8:	f8 ee       	ldi	r31, 0xE8	; 232
     8fa:	8f 2e       	mov	r8, r31
     8fc:	f3 e0       	ldi	r31, 0x03	; 3
     8fe:	9f 2e       	mov	r9, r31
     900:	f0 2d       	mov	r31, r0
				
                char displayTemp[4];			//create string array of size 4
				
                sprintf(displayTemp, "%d%d.%d ", temp1, temp2, temp3); //display temperature XY.Z
     902:	0f 2e       	mov	r0, r31
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	cf 2e       	mov	r12, r31
     908:	f1 e0       	ldi	r31, 0x01	; 1
     90a:	df 2e       	mov	r13, r31
     90c:	f0 2d       	mov	r31, r0
     90e:	fe 01       	movw	r30, r28
     910:	31 96       	adiw	r30, 0x01	; 1
     912:	7f 01       	movw	r14, r30
     914:	0f 2e       	mov	r0, r31
     916:	f2 e7       	ldi	r31, 0x72	; 114
     918:	af 2e       	mov	r10, r31
     91a:	b1 2c       	mov	r11, r1
     91c:	f0 2d       	mov	r31, r0
     91e:	0f 2e       	mov	r0, r31
     920:	fa e1       	ldi	r31, 0x1A	; 26
     922:	6f 2e       	mov	r6, r31
     924:	77 24       	eor	r7, r7
     926:	73 94       	inc	r7
     928:	f0 2d       	mov	r31, r0
     92a:	0f 2e       	mov	r0, r31
     92c:	f8 ec       	ldi	r31, 0xC8	; 200
     92e:	4f 2e       	mov	r4, r31
     930:	55 24       	eor	r5, r5
     932:	53 94       	inc	r5
     934:	f0 2d       	mov	r31, r0
		
		uint16_t temp0, temp1, temp2, temp3;		//create temporary veriables for ADC conversion

        while (1)
        {
				ADCSRA |= (1<<ADSC);	//begin ADC
     936:	f8 01       	movw	r30, r16
     938:	80 81       	ld	r24, Z
     93a:	80 64       	ori	r24, 0x40	; 64
     93c:	80 83       	st	Z, r24
				
				while(!(ADCSRA &(1<<ADSC))==0);		//while not end of conversion
     93e:	f8 01       	movw	r30, r16
     940:	80 81       	ld	r24, Z
     942:	86 fd       	sbrc	r24, 6
     944:	fc cf       	rjmp	.-8      	; 0x93e <__stack+0x3f>
				temp0=(ADCH<<8)|ADCL;	//get ADC bits
     946:	f1 01       	movw	r30, r2
     948:	80 81       	ld	r24, Z
     94a:	e8 e7       	ldi	r30, 0x78	; 120
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	40 81       	ld	r20, Z
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	58 2b       	or	r21, r24
                temp1 = temp0 % 10;		//for digit X in temp output XY.Z
                temp2 = temp0 % 100 / 10;	//for digit Y in temp output XY.Z
                temp3 = temp0 % 1000 / 100;	//for digit Z in temp output XY.Z
     954:	9a 01       	movw	r18, r20
     956:	36 95       	lsr	r19
     958:	27 95       	ror	r18
     95a:	36 95       	lsr	r19
     95c:	27 95       	ror	r18
     95e:	36 95       	lsr	r19
     960:	27 95       	ror	r18
     962:	a5 ec       	ldi	r26, 0xC5	; 197
     964:	b0 e2       	ldi	r27, 0x20	; 32
     966:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__umulhisi3>
     96a:	92 95       	swap	r25
     96c:	82 95       	swap	r24
     96e:	8f 70       	andi	r24, 0x0F	; 15
     970:	89 27       	eor	r24, r25
     972:	9f 70       	andi	r25, 0x0F	; 15
     974:	89 27       	eor	r24, r25
     976:	88 9d       	mul	r24, r8
     978:	90 01       	movw	r18, r0
     97a:	89 9d       	mul	r24, r9
     97c:	30 0d       	add	r19, r0
     97e:	98 9d       	mul	r25, r8
     980:	30 0d       	add	r19, r0
     982:	11 24       	eor	r1, r1
     984:	ca 01       	movw	r24, r20
     986:	82 1b       	sub	r24, r18
     988:	93 0b       	sbc	r25, r19
     98a:	9c 01       	movw	r18, r24
     98c:	36 95       	lsr	r19
     98e:	27 95       	ror	r18
     990:	36 95       	lsr	r19
     992:	27 95       	ror	r18
     994:	ab e7       	ldi	r26, 0x7B	; 123
     996:	b4 e1       	ldi	r27, 0x14	; 20
     998:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__umulhisi3>
     99c:	96 95       	lsr	r25
     99e:	87 95       	ror	r24
				
                char displayTemp[4];			//create string array of size 4
				
                sprintf(displayTemp, "%d%d.%d ", temp1, temp2, temp3); //display temperature XY.Z
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
				ADCSRA |= (1<<ADSC);	//begin ADC
				
				while(!(ADCSRA &(1<<ADSC))==0);		//while not end of conversion
				temp0=(ADCH<<8)|ADCL;	//get ADC bits
                temp1 = temp0 % 10;		//for digit X in temp output XY.Z
                temp2 = temp0 % 100 / 10;	//for digit Y in temp output XY.Z
     9a4:	9a 01       	movw	r18, r20
     9a6:	36 95       	lsr	r19
     9a8:	27 95       	ror	r18
     9aa:	36 95       	lsr	r19
     9ac:	27 95       	ror	r18
     9ae:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__umulhisi3>
     9b2:	96 95       	lsr	r25
     9b4:	87 95       	ror	r24
     9b6:	e4 e6       	ldi	r30, 0x64	; 100
     9b8:	e8 9f       	mul	r30, r24
     9ba:	90 01       	movw	r18, r0
     9bc:	e9 9f       	mul	r30, r25
     9be:	30 0d       	add	r19, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	ca 01       	movw	r24, r20
     9c4:	82 1b       	sub	r24, r18
     9c6:	93 0b       	sbc	r25, r19
     9c8:	9c 01       	movw	r18, r24
     9ca:	ad ec       	ldi	r26, 0xCD	; 205
     9cc:	bc ec       	ldi	r27, 0xCC	; 204
     9ce:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__umulhisi3>
     9d2:	96 95       	lsr	r25
     9d4:	87 95       	ror	r24
     9d6:	96 95       	lsr	r25
     9d8:	87 95       	ror	r24
     9da:	96 95       	lsr	r25
     9dc:	87 95       	ror	r24
                temp3 = temp0 % 1000 / 100;	//for digit Z in temp output XY.Z
				
                char displayTemp[4];			//create string array of size 4
				
                sprintf(displayTemp, "%d%d.%d ", temp1, temp2, temp3); //display temperature XY.Z
     9de:	9f 93       	push	r25
     9e0:	8f 93       	push	r24
        {
				ADCSRA |= (1<<ADSC);	//begin ADC
				
				while(!(ADCSRA &(1<<ADSC))==0);		//while not end of conversion
				temp0=(ADCH<<8)|ADCL;	//get ADC bits
                temp1 = temp0 % 10;		//for digit X in temp output XY.Z
     9e2:	9a 01       	movw	r18, r20
     9e4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__umulhisi3>
     9e8:	96 95       	lsr	r25
     9ea:	87 95       	ror	r24
     9ec:	96 95       	lsr	r25
     9ee:	87 95       	ror	r24
     9f0:	96 95       	lsr	r25
     9f2:	87 95       	ror	r24
     9f4:	9c 01       	movw	r18, r24
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	82 0f       	add	r24, r18
     a08:	93 1f       	adc	r25, r19
     a0a:	48 1b       	sub	r20, r24
     a0c:	59 0b       	sbc	r21, r25
                temp2 = temp0 % 100 / 10;	//for digit Y in temp output XY.Z
                temp3 = temp0 % 1000 / 100;	//for digit Z in temp output XY.Z
				
                char displayTemp[4];			//create string array of size 4
				
                sprintf(displayTemp, "%d%d.%d ", temp1, temp2, temp3); //display temperature XY.Z
     a0e:	5f 93       	push	r21
     a10:	4f 93       	push	r20
     a12:	df 92       	push	r13
     a14:	cf 92       	push	r12
     a16:	ff 92       	push	r15
     a18:	ef 92       	push	r14
     a1a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <sprintf>
                LcdClear();	//clear display for final output
     a1e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LcdClear>
     a22:	b0 92 10 01 	sts	0x0110, r11
     a26:	a0 92 0f 01 	sts	0x010F, r10
				
                LcdGotoXYFont(6,2); //2nd row, 6th cursor
                LcdFStr(FONT_1X,(unsigned char*)displayTemp);	//display temperature XY.Z
     a2a:	b7 01       	movw	r22, r14
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	0e 94 5f 03 	call	0x6be	; 0x6be <LcdFStr>
     a32:	70 92 10 01 	sts	0x0110, r7
     a36:	60 92 0f 01 	sts	0x010F, r6
		        LcdGotoXYFont(6,4); //4th row, 6th cursor
		        LcdFStr(FONT_1X,(unsigned char*)PSTR ("o"));	//display degrees symbol
     a3a:	6a e6       	ldi	r22, 0x6A	; 106
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	0e 94 5f 03 	call	0x6be	; 0x6be <LcdFStr>
     a44:	50 92 10 01 	sts	0x0110, r5
     a48:	40 92 0f 01 	sts	0x010F, r4
		        LcdGotoXYFont(7,6); //6th row, 7th cursor
		        LcdFStr(FONT_2X,(unsigned char*)PSTR ("F"));	//display "F" for Fahrenheit
     a4c:	68 e6       	ldi	r22, 0x68	; 104
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	0e 94 5f 03 	call	0x6be	; 0x6be <LcdFStr>
				
				LcdUpdate();	//update output to LCD screen
     a56:	0e 94 90 03 	call	0x720	; 0x720 <LcdUpdate>
     a5a:	9f e7       	ldi	r25, 0x7F	; 127
     a5c:	ea e1       	ldi	r30, 0x1A	; 26
     a5e:	f6 e0       	ldi	r31, 0x06	; 6
     a60:	91 50       	subi	r25, 0x01	; 1
     a62:	e0 40       	sbci	r30, 0x00	; 0
     a64:	f0 40       	sbci	r31, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <__stack+0x161>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <__stack+0x16b>
     a6a:	00 00       	nop
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
				_delay_ms(2000);
				
        }
     a76:	5f cf       	rjmp	.-322    	; 0x936 <__stack+0x37>

00000a78 <__divmodhi4>:
     a78:	97 fb       	bst	r25, 7
     a7a:	07 2e       	mov	r0, r23
     a7c:	16 f4       	brtc	.+4      	; 0xa82 <__divmodhi4+0xa>
     a7e:	00 94       	com	r0
     a80:	07 d0       	rcall	.+14     	; 0xa90 <__divmodhi4_neg1>
     a82:	77 fd       	sbrc	r23, 7
     a84:	09 d0       	rcall	.+18     	; 0xa98 <__divmodhi4_neg2>
     a86:	0e 94 5f 05 	call	0xabe	; 0xabe <__udivmodhi4>
     a8a:	07 fc       	sbrc	r0, 7
     a8c:	05 d0       	rcall	.+10     	; 0xa98 <__divmodhi4_neg2>
     a8e:	3e f4       	brtc	.+14     	; 0xa9e <__divmodhi4_exit>

00000a90 <__divmodhi4_neg1>:
     a90:	90 95       	com	r25
     a92:	81 95       	neg	r24
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
     a96:	08 95       	ret

00000a98 <__divmodhi4_neg2>:
     a98:	70 95       	com	r23
     a9a:	61 95       	neg	r22
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a9e <__divmodhi4_exit>:
     a9e:	08 95       	ret

00000aa0 <__umulhisi3>:
     aa0:	a2 9f       	mul	r26, r18
     aa2:	b0 01       	movw	r22, r0
     aa4:	b3 9f       	mul	r27, r19
     aa6:	c0 01       	movw	r24, r0
     aa8:	a3 9f       	mul	r26, r19
     aaa:	70 0d       	add	r23, r0
     aac:	81 1d       	adc	r24, r1
     aae:	11 24       	eor	r1, r1
     ab0:	91 1d       	adc	r25, r1
     ab2:	b2 9f       	mul	r27, r18
     ab4:	70 0d       	add	r23, r0
     ab6:	81 1d       	adc	r24, r1
     ab8:	11 24       	eor	r1, r1
     aba:	91 1d       	adc	r25, r1
     abc:	08 95       	ret

00000abe <__udivmodhi4>:
     abe:	aa 1b       	sub	r26, r26
     ac0:	bb 1b       	sub	r27, r27
     ac2:	51 e1       	ldi	r21, 0x11	; 17
     ac4:	07 c0       	rjmp	.+14     	; 0xad4 <__udivmodhi4_ep>

00000ac6 <__udivmodhi4_loop>:
     ac6:	aa 1f       	adc	r26, r26
     ac8:	bb 1f       	adc	r27, r27
     aca:	a6 17       	cp	r26, r22
     acc:	b7 07       	cpc	r27, r23
     ace:	10 f0       	brcs	.+4      	; 0xad4 <__udivmodhi4_ep>
     ad0:	a6 1b       	sub	r26, r22
     ad2:	b7 0b       	sbc	r27, r23

00000ad4 <__udivmodhi4_ep>:
     ad4:	88 1f       	adc	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	5a 95       	dec	r21
     ada:	a9 f7       	brne	.-22     	; 0xac6 <__udivmodhi4_loop>
     adc:	80 95       	com	r24
     ade:	90 95       	com	r25
     ae0:	bc 01       	movw	r22, r24
     ae2:	cd 01       	movw	r24, r26
     ae4:	08 95       	ret

00000ae6 <memcpy_P>:
     ae6:	fb 01       	movw	r30, r22
     ae8:	dc 01       	movw	r26, r24
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <memcpy_P+0xa>
     aec:	05 90       	lpm	r0, Z+
     aee:	0d 92       	st	X+, r0
     af0:	41 50       	subi	r20, 0x01	; 1
     af2:	50 40       	sbci	r21, 0x00	; 0
     af4:	d8 f7       	brcc	.-10     	; 0xaec <memcpy_P+0x6>
     af6:	08 95       	ret

00000af8 <sprintf>:
     af8:	ae e0       	ldi	r26, 0x0E	; 14
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	e2 e8       	ldi	r30, 0x82	; 130
     afe:	f5 e0       	ldi	r31, 0x05	; 5
     b00:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__prologue_saves__+0x1c>
     b04:	0d 89       	ldd	r16, Y+21	; 0x15
     b06:	1e 89       	ldd	r17, Y+22	; 0x16
     b08:	86 e0       	ldi	r24, 0x06	; 6
     b0a:	8c 83       	std	Y+4, r24	; 0x04
     b0c:	1a 83       	std	Y+2, r17	; 0x02
     b0e:	09 83       	std	Y+1, r16	; 0x01
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	9f e7       	ldi	r25, 0x7F	; 127
     b14:	9e 83       	std	Y+6, r25	; 0x06
     b16:	8d 83       	std	Y+5, r24	; 0x05
     b18:	ae 01       	movw	r20, r28
     b1a:	47 5e       	subi	r20, 0xE7	; 231
     b1c:	5f 4f       	sbci	r21, 0xFF	; 255
     b1e:	6f 89       	ldd	r22, Y+23	; 0x17
     b20:	78 8d       	ldd	r23, Y+24	; 0x18
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	0e 94 9f 05 	call	0xb3e	; 0xb3e <vfprintf>
     b2a:	2f 81       	ldd	r18, Y+7	; 0x07
     b2c:	38 85       	ldd	r19, Y+8	; 0x08
     b2e:	f8 01       	movw	r30, r16
     b30:	e2 0f       	add	r30, r18
     b32:	f3 1f       	adc	r31, r19
     b34:	10 82       	st	Z, r1
     b36:	2e 96       	adiw	r28, 0x0e	; 14
     b38:	e4 e0       	ldi	r30, 0x04	; 4
     b3a:	0c 94 47 08 	jmp	0x108e	; 0x108e <__epilogue_restores__+0x1c>

00000b3e <vfprintf>:
     b3e:	ac e0       	ldi	r26, 0x0C	; 12
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e5 ea       	ldi	r30, 0xA5	; 165
     b44:	f5 e0       	ldi	r31, 0x05	; 5
     b46:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__prologue_saves__>
     b4a:	7c 01       	movw	r14, r24
     b4c:	6b 01       	movw	r12, r22
     b4e:	8a 01       	movw	r16, r20
     b50:	fc 01       	movw	r30, r24
     b52:	17 82       	std	Z+7, r1	; 0x07
     b54:	16 82       	std	Z+6, r1	; 0x06
     b56:	83 81       	ldd	r24, Z+3	; 0x03
     b58:	81 ff       	sbrs	r24, 1
     b5a:	bd c1       	rjmp	.+890    	; 0xed6 <vfprintf+0x398>
     b5c:	ce 01       	movw	r24, r28
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	4c 01       	movw	r8, r24
     b62:	f7 01       	movw	r30, r14
     b64:	93 81       	ldd	r25, Z+3	; 0x03
     b66:	f6 01       	movw	r30, r12
     b68:	93 fd       	sbrc	r25, 3
     b6a:	85 91       	lpm	r24, Z+
     b6c:	93 ff       	sbrs	r25, 3
     b6e:	81 91       	ld	r24, Z+
     b70:	6f 01       	movw	r12, r30
     b72:	88 23       	and	r24, r24
     b74:	09 f4       	brne	.+2      	; 0xb78 <vfprintf+0x3a>
     b76:	ab c1       	rjmp	.+854    	; 0xece <vfprintf+0x390>
     b78:	85 32       	cpi	r24, 0x25	; 37
     b7a:	39 f4       	brne	.+14     	; 0xb8a <vfprintf+0x4c>
     b7c:	93 fd       	sbrc	r25, 3
     b7e:	85 91       	lpm	r24, Z+
     b80:	93 ff       	sbrs	r25, 3
     b82:	81 91       	ld	r24, Z+
     b84:	6f 01       	movw	r12, r30
     b86:	85 32       	cpi	r24, 0x25	; 37
     b88:	29 f4       	brne	.+10     	; 0xb94 <vfprintf+0x56>
     b8a:	b7 01       	movw	r22, r14
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 87 07 	call	0xf0e	; 0xf0e <fputc>
     b92:	e7 cf       	rjmp	.-50     	; 0xb62 <vfprintf+0x24>
     b94:	51 2c       	mov	r5, r1
     b96:	31 2c       	mov	r3, r1
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	20 32       	cpi	r18, 0x20	; 32
     b9c:	a0 f4       	brcc	.+40     	; 0xbc6 <vfprintf+0x88>
     b9e:	8b 32       	cpi	r24, 0x2B	; 43
     ba0:	69 f0       	breq	.+26     	; 0xbbc <vfprintf+0x7e>
     ba2:	30 f4       	brcc	.+12     	; 0xbb0 <vfprintf+0x72>
     ba4:	80 32       	cpi	r24, 0x20	; 32
     ba6:	59 f0       	breq	.+22     	; 0xbbe <vfprintf+0x80>
     ba8:	83 32       	cpi	r24, 0x23	; 35
     baa:	69 f4       	brne	.+26     	; 0xbc6 <vfprintf+0x88>
     bac:	20 61       	ori	r18, 0x10	; 16
     bae:	2c c0       	rjmp	.+88     	; 0xc08 <vfprintf+0xca>
     bb0:	8d 32       	cpi	r24, 0x2D	; 45
     bb2:	39 f0       	breq	.+14     	; 0xbc2 <vfprintf+0x84>
     bb4:	80 33       	cpi	r24, 0x30	; 48
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <vfprintf+0x88>
     bb8:	21 60       	ori	r18, 0x01	; 1
     bba:	26 c0       	rjmp	.+76     	; 0xc08 <vfprintf+0xca>
     bbc:	22 60       	ori	r18, 0x02	; 2
     bbe:	24 60       	ori	r18, 0x04	; 4
     bc0:	23 c0       	rjmp	.+70     	; 0xc08 <vfprintf+0xca>
     bc2:	28 60       	ori	r18, 0x08	; 8
     bc4:	21 c0       	rjmp	.+66     	; 0xc08 <vfprintf+0xca>
     bc6:	27 fd       	sbrc	r18, 7
     bc8:	27 c0       	rjmp	.+78     	; 0xc18 <vfprintf+0xda>
     bca:	30 ed       	ldi	r19, 0xD0	; 208
     bcc:	38 0f       	add	r19, r24
     bce:	3a 30       	cpi	r19, 0x0A	; 10
     bd0:	78 f4       	brcc	.+30     	; 0xbf0 <vfprintf+0xb2>
     bd2:	26 ff       	sbrs	r18, 6
     bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <vfprintf+0xa4>
     bd6:	fa e0       	ldi	r31, 0x0A	; 10
     bd8:	5f 9e       	mul	r5, r31
     bda:	30 0d       	add	r19, r0
     bdc:	11 24       	eor	r1, r1
     bde:	53 2e       	mov	r5, r19
     be0:	13 c0       	rjmp	.+38     	; 0xc08 <vfprintf+0xca>
     be2:	8a e0       	ldi	r24, 0x0A	; 10
     be4:	38 9e       	mul	r3, r24
     be6:	30 0d       	add	r19, r0
     be8:	11 24       	eor	r1, r1
     bea:	33 2e       	mov	r3, r19
     bec:	20 62       	ori	r18, 0x20	; 32
     bee:	0c c0       	rjmp	.+24     	; 0xc08 <vfprintf+0xca>
     bf0:	8e 32       	cpi	r24, 0x2E	; 46
     bf2:	21 f4       	brne	.+8      	; 0xbfc <vfprintf+0xbe>
     bf4:	26 fd       	sbrc	r18, 6
     bf6:	6b c1       	rjmp	.+726    	; 0xece <vfprintf+0x390>
     bf8:	20 64       	ori	r18, 0x40	; 64
     bfa:	06 c0       	rjmp	.+12     	; 0xc08 <vfprintf+0xca>
     bfc:	8c 36       	cpi	r24, 0x6C	; 108
     bfe:	11 f4       	brne	.+4      	; 0xc04 <vfprintf+0xc6>
     c00:	20 68       	ori	r18, 0x80	; 128
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <vfprintf+0xca>
     c04:	88 36       	cpi	r24, 0x68	; 104
     c06:	41 f4       	brne	.+16     	; 0xc18 <vfprintf+0xda>
     c08:	f6 01       	movw	r30, r12
     c0a:	93 fd       	sbrc	r25, 3
     c0c:	85 91       	lpm	r24, Z+
     c0e:	93 ff       	sbrs	r25, 3
     c10:	81 91       	ld	r24, Z+
     c12:	6f 01       	movw	r12, r30
     c14:	81 11       	cpse	r24, r1
     c16:	c1 cf       	rjmp	.-126    	; 0xb9a <vfprintf+0x5c>
     c18:	98 2f       	mov	r25, r24
     c1a:	9f 7d       	andi	r25, 0xDF	; 223
     c1c:	95 54       	subi	r25, 0x45	; 69
     c1e:	93 30       	cpi	r25, 0x03	; 3
     c20:	28 f4       	brcc	.+10     	; 0xc2c <vfprintf+0xee>
     c22:	0c 5f       	subi	r16, 0xFC	; 252
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	ff e3       	ldi	r31, 0x3F	; 63
     c28:	f9 83       	std	Y+1, r31	; 0x01
     c2a:	0d c0       	rjmp	.+26     	; 0xc46 <vfprintf+0x108>
     c2c:	83 36       	cpi	r24, 0x63	; 99
     c2e:	31 f0       	breq	.+12     	; 0xc3c <vfprintf+0xfe>
     c30:	83 37       	cpi	r24, 0x73	; 115
     c32:	71 f0       	breq	.+28     	; 0xc50 <vfprintf+0x112>
     c34:	83 35       	cpi	r24, 0x53	; 83
     c36:	09 f0       	breq	.+2      	; 0xc3a <vfprintf+0xfc>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <vfprintf+0x1b2>
     c3a:	22 c0       	rjmp	.+68     	; 0xc80 <vfprintf+0x142>
     c3c:	f8 01       	movw	r30, r16
     c3e:	80 81       	ld	r24, Z
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	0e 5f       	subi	r16, 0xFE	; 254
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	44 24       	eor	r4, r4
     c48:	43 94       	inc	r4
     c4a:	51 2c       	mov	r5, r1
     c4c:	54 01       	movw	r10, r8
     c4e:	15 c0       	rjmp	.+42     	; 0xc7a <vfprintf+0x13c>
     c50:	38 01       	movw	r6, r16
     c52:	f2 e0       	ldi	r31, 0x02	; 2
     c54:	6f 0e       	add	r6, r31
     c56:	71 1c       	adc	r7, r1
     c58:	f8 01       	movw	r30, r16
     c5a:	a0 80       	ld	r10, Z
     c5c:	b1 80       	ldd	r11, Z+1	; 0x01
     c5e:	26 ff       	sbrs	r18, 6
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <vfprintf+0x12a>
     c62:	65 2d       	mov	r22, r5
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x12e>
     c68:	6f ef       	ldi	r22, 0xFF	; 255
     c6a:	7f ef       	ldi	r23, 0xFF	; 255
     c6c:	c5 01       	movw	r24, r10
     c6e:	2c 87       	std	Y+12, r18	; 0x0c
     c70:	0e 94 7c 07 	call	0xef8	; 0xef8 <strnlen>
     c74:	2c 01       	movw	r4, r24
     c76:	83 01       	movw	r16, r6
     c78:	2c 85       	ldd	r18, Y+12	; 0x0c
     c7a:	2f 77       	andi	r18, 0x7F	; 127
     c7c:	22 2e       	mov	r2, r18
     c7e:	17 c0       	rjmp	.+46     	; 0xcae <vfprintf+0x170>
     c80:	38 01       	movw	r6, r16
     c82:	f2 e0       	ldi	r31, 0x02	; 2
     c84:	6f 0e       	add	r6, r31
     c86:	71 1c       	adc	r7, r1
     c88:	f8 01       	movw	r30, r16
     c8a:	a0 80       	ld	r10, Z
     c8c:	b1 80       	ldd	r11, Z+1	; 0x01
     c8e:	26 ff       	sbrs	r18, 6
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <vfprintf+0x15a>
     c92:	65 2d       	mov	r22, r5
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x15e>
     c98:	6f ef       	ldi	r22, 0xFF	; 255
     c9a:	7f ef       	ldi	r23, 0xFF	; 255
     c9c:	c5 01       	movw	r24, r10
     c9e:	2c 87       	std	Y+12, r18	; 0x0c
     ca0:	0e 94 71 07 	call	0xee2	; 0xee2 <strnlen_P>
     ca4:	2c 01       	movw	r4, r24
     ca6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ca8:	20 68       	ori	r18, 0x80	; 128
     caa:	22 2e       	mov	r2, r18
     cac:	83 01       	movw	r16, r6
     cae:	23 fc       	sbrc	r2, 3
     cb0:	1b c0       	rjmp	.+54     	; 0xce8 <vfprintf+0x1aa>
     cb2:	83 2d       	mov	r24, r3
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	48 16       	cp	r4, r24
     cb8:	59 06       	cpc	r5, r25
     cba:	b0 f4       	brcc	.+44     	; 0xce8 <vfprintf+0x1aa>
     cbc:	b7 01       	movw	r22, r14
     cbe:	80 e2       	ldi	r24, 0x20	; 32
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 87 07 	call	0xf0e	; 0xf0e <fputc>
     cc6:	3a 94       	dec	r3
     cc8:	f4 cf       	rjmp	.-24     	; 0xcb2 <vfprintf+0x174>
     cca:	f5 01       	movw	r30, r10
     ccc:	27 fc       	sbrc	r2, 7
     cce:	85 91       	lpm	r24, Z+
     cd0:	27 fe       	sbrs	r2, 7
     cd2:	81 91       	ld	r24, Z+
     cd4:	5f 01       	movw	r10, r30
     cd6:	b7 01       	movw	r22, r14
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 87 07 	call	0xf0e	; 0xf0e <fputc>
     cde:	31 10       	cpse	r3, r1
     ce0:	3a 94       	dec	r3
     ce2:	f1 e0       	ldi	r31, 0x01	; 1
     ce4:	4f 1a       	sub	r4, r31
     ce6:	51 08       	sbc	r5, r1
     ce8:	41 14       	cp	r4, r1
     cea:	51 04       	cpc	r5, r1
     cec:	71 f7       	brne	.-36     	; 0xcca <vfprintf+0x18c>
     cee:	e5 c0       	rjmp	.+458    	; 0xeba <vfprintf+0x37c>
     cf0:	84 36       	cpi	r24, 0x64	; 100
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <vfprintf+0x1ba>
     cf4:	89 36       	cpi	r24, 0x69	; 105
     cf6:	39 f5       	brne	.+78     	; 0xd46 <vfprintf+0x208>
     cf8:	f8 01       	movw	r30, r16
     cfa:	27 ff       	sbrs	r18, 7
     cfc:	07 c0       	rjmp	.+14     	; 0xd0c <vfprintf+0x1ce>
     cfe:	60 81       	ld	r22, Z
     d00:	71 81       	ldd	r23, Z+1	; 0x01
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	0c 5f       	subi	r16, 0xFC	; 252
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <vfprintf+0x1de>
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	07 2e       	mov	r0, r23
     d12:	00 0c       	add	r0, r0
     d14:	88 0b       	sbc	r24, r24
     d16:	99 0b       	sbc	r25, r25
     d18:	0e 5f       	subi	r16, 0xFE	; 254
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	2f 76       	andi	r18, 0x6F	; 111
     d1e:	72 2e       	mov	r7, r18
     d20:	97 ff       	sbrs	r25, 7
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <vfprintf+0x1f8>
     d24:	90 95       	com	r25
     d26:	80 95       	com	r24
     d28:	70 95       	com	r23
     d2a:	61 95       	neg	r22
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	8f 4f       	sbci	r24, 0xFF	; 255
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	20 68       	ori	r18, 0x80	; 128
     d34:	72 2e       	mov	r7, r18
     d36:	2a e0       	ldi	r18, 0x0A	; 10
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	a4 01       	movw	r20, r8
     d3c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__ultoa_invert>
     d40:	a8 2e       	mov	r10, r24
     d42:	a8 18       	sub	r10, r8
     d44:	44 c0       	rjmp	.+136    	; 0xdce <vfprintf+0x290>
     d46:	85 37       	cpi	r24, 0x75	; 117
     d48:	29 f4       	brne	.+10     	; 0xd54 <vfprintf+0x216>
     d4a:	2f 7e       	andi	r18, 0xEF	; 239
     d4c:	b2 2e       	mov	r11, r18
     d4e:	2a e0       	ldi	r18, 0x0A	; 10
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	25 c0       	rjmp	.+74     	; 0xd9e <vfprintf+0x260>
     d54:	f2 2f       	mov	r31, r18
     d56:	f9 7f       	andi	r31, 0xF9	; 249
     d58:	bf 2e       	mov	r11, r31
     d5a:	8f 36       	cpi	r24, 0x6F	; 111
     d5c:	c1 f0       	breq	.+48     	; 0xd8e <vfprintf+0x250>
     d5e:	18 f4       	brcc	.+6      	; 0xd66 <vfprintf+0x228>
     d60:	88 35       	cpi	r24, 0x58	; 88
     d62:	79 f0       	breq	.+30     	; 0xd82 <vfprintf+0x244>
     d64:	b4 c0       	rjmp	.+360    	; 0xece <vfprintf+0x390>
     d66:	80 37       	cpi	r24, 0x70	; 112
     d68:	19 f0       	breq	.+6      	; 0xd70 <vfprintf+0x232>
     d6a:	88 37       	cpi	r24, 0x78	; 120
     d6c:	21 f0       	breq	.+8      	; 0xd76 <vfprintf+0x238>
     d6e:	af c0       	rjmp	.+350    	; 0xece <vfprintf+0x390>
     d70:	2f 2f       	mov	r18, r31
     d72:	20 61       	ori	r18, 0x10	; 16
     d74:	b2 2e       	mov	r11, r18
     d76:	b4 fe       	sbrs	r11, 4
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <vfprintf+0x256>
     d7a:	8b 2d       	mov	r24, r11
     d7c:	84 60       	ori	r24, 0x04	; 4
     d7e:	b8 2e       	mov	r11, r24
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <vfprintf+0x256>
     d82:	24 ff       	sbrs	r18, 4
     d84:	0a c0       	rjmp	.+20     	; 0xd9a <vfprintf+0x25c>
     d86:	9f 2f       	mov	r25, r31
     d88:	96 60       	ori	r25, 0x06	; 6
     d8a:	b9 2e       	mov	r11, r25
     d8c:	06 c0       	rjmp	.+12     	; 0xd9a <vfprintf+0x25c>
     d8e:	28 e0       	ldi	r18, 0x08	; 8
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <vfprintf+0x260>
     d94:	20 e1       	ldi	r18, 0x10	; 16
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x260>
     d9a:	20 e1       	ldi	r18, 0x10	; 16
     d9c:	32 e0       	ldi	r19, 0x02	; 2
     d9e:	f8 01       	movw	r30, r16
     da0:	b7 fe       	sbrs	r11, 7
     da2:	07 c0       	rjmp	.+14     	; 0xdb2 <vfprintf+0x274>
     da4:	60 81       	ld	r22, Z
     da6:	71 81       	ldd	r23, Z+1	; 0x01
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	93 81       	ldd	r25, Z+3	; 0x03
     dac:	0c 5f       	subi	r16, 0xFC	; 252
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <vfprintf+0x280>
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 5f       	subi	r16, 0xFE	; 254
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	a4 01       	movw	r20, r8
     dc0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__ultoa_invert>
     dc4:	a8 2e       	mov	r10, r24
     dc6:	a8 18       	sub	r10, r8
     dc8:	fb 2d       	mov	r31, r11
     dca:	ff 77       	andi	r31, 0x7F	; 127
     dcc:	7f 2e       	mov	r7, r31
     dce:	76 fe       	sbrs	r7, 6
     dd0:	0b c0       	rjmp	.+22     	; 0xde8 <vfprintf+0x2aa>
     dd2:	37 2d       	mov	r19, r7
     dd4:	3e 7f       	andi	r19, 0xFE	; 254
     dd6:	a5 14       	cp	r10, r5
     dd8:	50 f4       	brcc	.+20     	; 0xdee <vfprintf+0x2b0>
     dda:	74 fe       	sbrs	r7, 4
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <vfprintf+0x2b4>
     dde:	72 fc       	sbrc	r7, 2
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <vfprintf+0x2b4>
     de2:	37 2d       	mov	r19, r7
     de4:	3e 7e       	andi	r19, 0xEE	; 238
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <vfprintf+0x2b4>
     de8:	ba 2c       	mov	r11, r10
     dea:	37 2d       	mov	r19, r7
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <vfprintf+0x2b6>
     dee:	ba 2c       	mov	r11, r10
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <vfprintf+0x2b6>
     df2:	b5 2c       	mov	r11, r5
     df4:	34 ff       	sbrs	r19, 4
     df6:	0d c0       	rjmp	.+26     	; 0xe12 <vfprintf+0x2d4>
     df8:	fe 01       	movw	r30, r28
     dfa:	ea 0d       	add	r30, r10
     dfc:	f1 1d       	adc	r31, r1
     dfe:	80 81       	ld	r24, Z
     e00:	80 33       	cpi	r24, 0x30	; 48
     e02:	11 f4       	brne	.+4      	; 0xe08 <vfprintf+0x2ca>
     e04:	39 7e       	andi	r19, 0xE9	; 233
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <vfprintf+0x2dc>
     e08:	32 ff       	sbrs	r19, 2
     e0a:	06 c0       	rjmp	.+12     	; 0xe18 <vfprintf+0x2da>
     e0c:	b3 94       	inc	r11
     e0e:	b3 94       	inc	r11
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <vfprintf+0x2dc>
     e12:	83 2f       	mov	r24, r19
     e14:	86 78       	andi	r24, 0x86	; 134
     e16:	09 f0       	breq	.+2      	; 0xe1a <vfprintf+0x2dc>
     e18:	b3 94       	inc	r11
     e1a:	33 fd       	sbrc	r19, 3
     e1c:	13 c0       	rjmp	.+38     	; 0xe44 <vfprintf+0x306>
     e1e:	30 ff       	sbrs	r19, 0
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <vfprintf+0x2f0>
     e22:	5a 2c       	mov	r5, r10
     e24:	b3 14       	cp	r11, r3
     e26:	18 f4       	brcc	.+6      	; 0xe2e <vfprintf+0x2f0>
     e28:	53 0c       	add	r5, r3
     e2a:	5b 18       	sub	r5, r11
     e2c:	b3 2c       	mov	r11, r3
     e2e:	b3 14       	cp	r11, r3
     e30:	68 f4       	brcc	.+26     	; 0xe4c <vfprintf+0x30e>
     e32:	b7 01       	movw	r22, r14
     e34:	80 e2       	ldi	r24, 0x20	; 32
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	3c 87       	std	Y+12, r19	; 0x0c
     e3a:	0e 94 87 07 	call	0xf0e	; 0xf0e <fputc>
     e3e:	b3 94       	inc	r11
     e40:	3c 85       	ldd	r19, Y+12	; 0x0c
     e42:	f5 cf       	rjmp	.-22     	; 0xe2e <vfprintf+0x2f0>
     e44:	b3 14       	cp	r11, r3
     e46:	10 f4       	brcc	.+4      	; 0xe4c <vfprintf+0x30e>
     e48:	3b 18       	sub	r3, r11
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <vfprintf+0x310>
     e4c:	31 2c       	mov	r3, r1
     e4e:	34 ff       	sbrs	r19, 4
     e50:	12 c0       	rjmp	.+36     	; 0xe76 <vfprintf+0x338>
     e52:	b7 01       	movw	r22, r14
     e54:	80 e3       	ldi	r24, 0x30	; 48
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	3c 87       	std	Y+12, r19	; 0x0c
     e5a:	0e 94 87 07 	call	0xf0e	; 0xf0e <fputc>
     e5e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e60:	32 ff       	sbrs	r19, 2
     e62:	17 c0       	rjmp	.+46     	; 0xe92 <vfprintf+0x354>
     e64:	31 fd       	sbrc	r19, 1
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <vfprintf+0x330>
     e68:	88 e7       	ldi	r24, 0x78	; 120
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <vfprintf+0x334>
     e6e:	88 e5       	ldi	r24, 0x58	; 88
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	b7 01       	movw	r22, r14
     e74:	0c c0       	rjmp	.+24     	; 0xe8e <vfprintf+0x350>
     e76:	83 2f       	mov	r24, r19
     e78:	86 78       	andi	r24, 0x86	; 134
     e7a:	59 f0       	breq	.+22     	; 0xe92 <vfprintf+0x354>
     e7c:	31 ff       	sbrs	r19, 1
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <vfprintf+0x346>
     e80:	8b e2       	ldi	r24, 0x2B	; 43
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <vfprintf+0x348>
     e84:	80 e2       	ldi	r24, 0x20	; 32
     e86:	37 fd       	sbrc	r19, 7
     e88:	8d e2       	ldi	r24, 0x2D	; 45
     e8a:	b7 01       	movw	r22, r14
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 87 07 	call	0xf0e	; 0xf0e <fputc>
     e92:	a5 14       	cp	r10, r5
     e94:	38 f4       	brcc	.+14     	; 0xea4 <vfprintf+0x366>
     e96:	b7 01       	movw	r22, r14
     e98:	80 e3       	ldi	r24, 0x30	; 48
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 87 07 	call	0xf0e	; 0xf0e <fputc>
     ea0:	5a 94       	dec	r5
     ea2:	f7 cf       	rjmp	.-18     	; 0xe92 <vfprintf+0x354>
     ea4:	aa 94       	dec	r10
     ea6:	f4 01       	movw	r30, r8
     ea8:	ea 0d       	add	r30, r10
     eaa:	f1 1d       	adc	r31, r1
     eac:	80 81       	ld	r24, Z
     eae:	b7 01       	movw	r22, r14
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 87 07 	call	0xf0e	; 0xf0e <fputc>
     eb6:	a1 10       	cpse	r10, r1
     eb8:	f5 cf       	rjmp	.-22     	; 0xea4 <vfprintf+0x366>
     eba:	33 20       	and	r3, r3
     ebc:	09 f4       	brne	.+2      	; 0xec0 <vfprintf+0x382>
     ebe:	51 ce       	rjmp	.-862    	; 0xb62 <vfprintf+0x24>
     ec0:	b7 01       	movw	r22, r14
     ec2:	80 e2       	ldi	r24, 0x20	; 32
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 87 07 	call	0xf0e	; 0xf0e <fputc>
     eca:	3a 94       	dec	r3
     ecc:	f6 cf       	rjmp	.-20     	; 0xeba <vfprintf+0x37c>
     ece:	f7 01       	movw	r30, r14
     ed0:	86 81       	ldd	r24, Z+6	; 0x06
     ed2:	97 81       	ldd	r25, Z+7	; 0x07
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x39c>
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	9f ef       	ldi	r25, 0xFF	; 255
     eda:	2c 96       	adiw	r28, 0x0c	; 12
     edc:	e2 e1       	ldi	r30, 0x12	; 18
     ede:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__epilogue_restores__>

00000ee2 <strnlen_P>:
     ee2:	fc 01       	movw	r30, r24
     ee4:	05 90       	lpm	r0, Z+
     ee6:	61 50       	subi	r22, 0x01	; 1
     ee8:	70 40       	sbci	r23, 0x00	; 0
     eea:	01 10       	cpse	r0, r1
     eec:	d8 f7       	brcc	.-10     	; 0xee4 <strnlen_P+0x2>
     eee:	80 95       	com	r24
     ef0:	90 95       	com	r25
     ef2:	8e 0f       	add	r24, r30
     ef4:	9f 1f       	adc	r25, r31
     ef6:	08 95       	ret

00000ef8 <strnlen>:
     ef8:	fc 01       	movw	r30, r24
     efa:	61 50       	subi	r22, 0x01	; 1
     efc:	70 40       	sbci	r23, 0x00	; 0
     efe:	01 90       	ld	r0, Z+
     f00:	01 10       	cpse	r0, r1
     f02:	d8 f7       	brcc	.-10     	; 0xefa <strnlen+0x2>
     f04:	80 95       	com	r24
     f06:	90 95       	com	r25
     f08:	8e 0f       	add	r24, r30
     f0a:	9f 1f       	adc	r25, r31
     f0c:	08 95       	ret

00000f0e <fputc>:
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	fb 01       	movw	r30, r22
     f18:	23 81       	ldd	r18, Z+3	; 0x03
     f1a:	21 fd       	sbrc	r18, 1
     f1c:	03 c0       	rjmp	.+6      	; 0xf24 <fputc+0x16>
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	9f ef       	ldi	r25, 0xFF	; 255
     f22:	28 c0       	rjmp	.+80     	; 0xf74 <fputc+0x66>
     f24:	22 ff       	sbrs	r18, 2
     f26:	16 c0       	rjmp	.+44     	; 0xf54 <fputc+0x46>
     f28:	46 81       	ldd	r20, Z+6	; 0x06
     f2a:	57 81       	ldd	r21, Z+7	; 0x07
     f2c:	24 81       	ldd	r18, Z+4	; 0x04
     f2e:	35 81       	ldd	r19, Z+5	; 0x05
     f30:	42 17       	cp	r20, r18
     f32:	53 07       	cpc	r21, r19
     f34:	44 f4       	brge	.+16     	; 0xf46 <fputc+0x38>
     f36:	a0 81       	ld	r26, Z
     f38:	b1 81       	ldd	r27, Z+1	; 0x01
     f3a:	9d 01       	movw	r18, r26
     f3c:	2f 5f       	subi	r18, 0xFF	; 255
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	31 83       	std	Z+1, r19	; 0x01
     f42:	20 83       	st	Z, r18
     f44:	8c 93       	st	X, r24
     f46:	26 81       	ldd	r18, Z+6	; 0x06
     f48:	37 81       	ldd	r19, Z+7	; 0x07
     f4a:	2f 5f       	subi	r18, 0xFF	; 255
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	37 83       	std	Z+7, r19	; 0x07
     f50:	26 83       	std	Z+6, r18	; 0x06
     f52:	10 c0       	rjmp	.+32     	; 0xf74 <fputc+0x66>
     f54:	eb 01       	movw	r28, r22
     f56:	09 2f       	mov	r16, r25
     f58:	18 2f       	mov	r17, r24
     f5a:	00 84       	ldd	r0, Z+8	; 0x08
     f5c:	f1 85       	ldd	r31, Z+9	; 0x09
     f5e:	e0 2d       	mov	r30, r0
     f60:	09 95       	icall
     f62:	89 2b       	or	r24, r25
     f64:	e1 f6       	brne	.-72     	; 0xf1e <fputc+0x10>
     f66:	8e 81       	ldd	r24, Y+6	; 0x06
     f68:	9f 81       	ldd	r25, Y+7	; 0x07
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	9f 83       	std	Y+7, r25	; 0x07
     f6e:	8e 83       	std	Y+6, r24	; 0x06
     f70:	81 2f       	mov	r24, r17
     f72:	90 2f       	mov	r25, r16
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <__ultoa_invert>:
     f7e:	fa 01       	movw	r30, r20
     f80:	aa 27       	eor	r26, r26
     f82:	28 30       	cpi	r18, 0x08	; 8
     f84:	51 f1       	breq	.+84     	; 0xfda <__ultoa_invert+0x5c>
     f86:	20 31       	cpi	r18, 0x10	; 16
     f88:	81 f1       	breq	.+96     	; 0xfea <__ultoa_invert+0x6c>
     f8a:	e8 94       	clt
     f8c:	6f 93       	push	r22
     f8e:	6e 7f       	andi	r22, 0xFE	; 254
     f90:	6e 5f       	subi	r22, 0xFE	; 254
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	af 4f       	sbci	r26, 0xFF	; 255
     f9a:	b1 e0       	ldi	r27, 0x01	; 1
     f9c:	3e d0       	rcall	.+124    	; 0x101a <__ultoa_invert+0x9c>
     f9e:	b4 e0       	ldi	r27, 0x04	; 4
     fa0:	3c d0       	rcall	.+120    	; 0x101a <__ultoa_invert+0x9c>
     fa2:	67 0f       	add	r22, r23
     fa4:	78 1f       	adc	r23, r24
     fa6:	89 1f       	adc	r24, r25
     fa8:	9a 1f       	adc	r25, r26
     faa:	a1 1d       	adc	r26, r1
     fac:	68 0f       	add	r22, r24
     fae:	79 1f       	adc	r23, r25
     fb0:	8a 1f       	adc	r24, r26
     fb2:	91 1d       	adc	r25, r1
     fb4:	a1 1d       	adc	r26, r1
     fb6:	6a 0f       	add	r22, r26
     fb8:	71 1d       	adc	r23, r1
     fba:	81 1d       	adc	r24, r1
     fbc:	91 1d       	adc	r25, r1
     fbe:	a1 1d       	adc	r26, r1
     fc0:	20 d0       	rcall	.+64     	; 0x1002 <__ultoa_invert+0x84>
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <__ultoa_invert+0x48>
     fc4:	68 94       	set
     fc6:	3f 91       	pop	r19
     fc8:	2a e0       	ldi	r18, 0x0A	; 10
     fca:	26 9f       	mul	r18, r22
     fcc:	11 24       	eor	r1, r1
     fce:	30 19       	sub	r19, r0
     fd0:	30 5d       	subi	r19, 0xD0	; 208
     fd2:	31 93       	st	Z+, r19
     fd4:	de f6       	brtc	.-74     	; 0xf8c <__ultoa_invert+0xe>
     fd6:	cf 01       	movw	r24, r30
     fd8:	08 95       	ret
     fda:	46 2f       	mov	r20, r22
     fdc:	47 70       	andi	r20, 0x07	; 7
     fde:	40 5d       	subi	r20, 0xD0	; 208
     fe0:	41 93       	st	Z+, r20
     fe2:	b3 e0       	ldi	r27, 0x03	; 3
     fe4:	0f d0       	rcall	.+30     	; 0x1004 <__ultoa_invert+0x86>
     fe6:	c9 f7       	brne	.-14     	; 0xfda <__ultoa_invert+0x5c>
     fe8:	f6 cf       	rjmp	.-20     	; 0xfd6 <__ultoa_invert+0x58>
     fea:	46 2f       	mov	r20, r22
     fec:	4f 70       	andi	r20, 0x0F	; 15
     fee:	40 5d       	subi	r20, 0xD0	; 208
     ff0:	4a 33       	cpi	r20, 0x3A	; 58
     ff2:	18 f0       	brcs	.+6      	; 0xffa <__ultoa_invert+0x7c>
     ff4:	49 5d       	subi	r20, 0xD9	; 217
     ff6:	31 fd       	sbrc	r19, 1
     ff8:	40 52       	subi	r20, 0x20	; 32
     ffa:	41 93       	st	Z+, r20
     ffc:	02 d0       	rcall	.+4      	; 0x1002 <__ultoa_invert+0x84>
     ffe:	a9 f7       	brne	.-22     	; 0xfea <__ultoa_invert+0x6c>
    1000:	ea cf       	rjmp	.-44     	; 0xfd6 <__ultoa_invert+0x58>
    1002:	b4 e0       	ldi	r27, 0x04	; 4
    1004:	a6 95       	lsr	r26
    1006:	97 95       	ror	r25
    1008:	87 95       	ror	r24
    100a:	77 95       	ror	r23
    100c:	67 95       	ror	r22
    100e:	ba 95       	dec	r27
    1010:	c9 f7       	brne	.-14     	; 0x1004 <__ultoa_invert+0x86>
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	61 05       	cpc	r22, r1
    1016:	71 05       	cpc	r23, r1
    1018:	08 95       	ret
    101a:	9b 01       	movw	r18, r22
    101c:	ac 01       	movw	r20, r24
    101e:	0a 2e       	mov	r0, r26
    1020:	06 94       	lsr	r0
    1022:	57 95       	ror	r21
    1024:	47 95       	ror	r20
    1026:	37 95       	ror	r19
    1028:	27 95       	ror	r18
    102a:	ba 95       	dec	r27
    102c:	c9 f7       	brne	.-14     	; 0x1020 <__ultoa_invert+0xa2>
    102e:	62 0f       	add	r22, r18
    1030:	73 1f       	adc	r23, r19
    1032:	84 1f       	adc	r24, r20
    1034:	95 1f       	adc	r25, r21
    1036:	a0 1d       	adc	r26, r0
    1038:	08 95       	ret

0000103a <__prologue_saves__>:
    103a:	2f 92       	push	r2
    103c:	3f 92       	push	r3
    103e:	4f 92       	push	r4
    1040:	5f 92       	push	r5
    1042:	6f 92       	push	r6
    1044:	7f 92       	push	r7
    1046:	8f 92       	push	r8
    1048:	9f 92       	push	r9
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	ca 1b       	sub	r28, r26
    1064:	db 0b       	sbc	r29, r27
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	09 94       	ijmp

00001072 <__epilogue_restores__>:
    1072:	2a 88       	ldd	r2, Y+18	; 0x12
    1074:	39 88       	ldd	r3, Y+17	; 0x11
    1076:	48 88       	ldd	r4, Y+16	; 0x10
    1078:	5f 84       	ldd	r5, Y+15	; 0x0f
    107a:	6e 84       	ldd	r6, Y+14	; 0x0e
    107c:	7d 84       	ldd	r7, Y+13	; 0x0d
    107e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1080:	9b 84       	ldd	r9, Y+11	; 0x0b
    1082:	aa 84       	ldd	r10, Y+10	; 0x0a
    1084:	b9 84       	ldd	r11, Y+9	; 0x09
    1086:	c8 84       	ldd	r12, Y+8	; 0x08
    1088:	df 80       	ldd	r13, Y+7	; 0x07
    108a:	ee 80       	ldd	r14, Y+6	; 0x06
    108c:	fd 80       	ldd	r15, Y+5	; 0x05
    108e:	0c 81       	ldd	r16, Y+4	; 0x04
    1090:	1b 81       	ldd	r17, Y+3	; 0x03
    1092:	aa 81       	ldd	r26, Y+2	; 0x02
    1094:	b9 81       	ldd	r27, Y+1	; 0x01
    1096:	ce 0f       	add	r28, r30
    1098:	d1 1d       	adc	r29, r1
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	ed 01       	movw	r28, r26
    10a6:	08 95       	ret

000010a8 <_exit>:
    10a8:	f8 94       	cli

000010aa <__stop_program>:
    10aa:	ff cf       	rjmp	.-2      	; 0x10aa <__stop_program>
