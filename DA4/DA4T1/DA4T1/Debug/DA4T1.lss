
DA4T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000312  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000dc  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f3  00000000  00000000  0000071a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b7  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00000b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <red_in>:
	}
}

void red_in()
{
	while(OCR0A < DUTYHIGH){	//when timer counter less than 90% DC
  80:	87 b5       	in	r24, 0x27	; 39
  82:	86 3e       	cpi	r24, 0xE6	; 230
  84:	78 f4       	brcc	.+30     	; 0xa4 <red_in+0x24>
		OCR0A = OCR0A + 0xF;	//increase Duty Cycle by 10
  86:	87 b5       	in	r24, 0x27	; 39
  88:	81 5f       	subi	r24, 0xF1	; 241
  8a:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	80 e7       	ldi	r24, 0x70	; 112
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <red_in+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <red_in+0x1c>
  9c:	00 00       	nop
	}
}

void red_in()
{
	while(OCR0A < DUTYHIGH){	//when timer counter less than 90% DC
  9e:	87 b5       	in	r24, 0x27	; 39
  a0:	86 3e       	cpi	r24, 0xE6	; 230
  a2:	88 f3       	brcs	.-30     	; 0x86 <red_in+0x6>
  a4:	08 95       	ret

000000a6 <blue_in>:
	_delay_ms(50);}				//0.5 sec delay hold
}

void blue_in()
{
	while(OCR2A < DUTYHIGH){	//when timer counter less than 90% DC
  a6:	80 91 b3 00 	lds	r24, 0x00B3
  aa:	86 3e       	cpi	r24, 0xE6	; 230
  ac:	88 f4       	brcc	.+34     	; 0xd0 <blue_in+0x2a>
		OCR2A = OCR2A + 0xF;	//increase Duty Cycle by 10
  ae:	e3 eb       	ldi	r30, 0xB3	; 179
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 5f       	subi	r24, 0xF1	; 241
  b6:	80 83       	st	Z, r24
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	80 e7       	ldi	r24, 0x70	; 112
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <blue_in+0x18>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <blue_in+0x22>
  c8:	00 00       	nop
	_delay_ms(50);}				//0.5 sec delay hold
}

void blue_in()
{
	while(OCR2A < DUTYHIGH){	//when timer counter less than 90% DC
  ca:	80 81       	ld	r24, Z
  cc:	86 3e       	cpi	r24, 0xE6	; 230
  ce:	88 f3       	brcs	.-30     	; 0xb2 <blue_in+0xc>
  d0:	08 95       	ret

000000d2 <green_in>:
		OCR2A = OCR2A + 0xF;	//increase Duty Cycle by 10
	_delay_ms(50);}				//0.5 sec delay hold
}
void green_in()
{
	while(OCR1A < DUTYHIGH){	//when timer counter less than 90% DC
  d2:	80 91 88 00 	lds	r24, 0x0088
  d6:	90 91 89 00 	lds	r25, 0x0089
  da:	86 3e       	cpi	r24, 0xE6	; 230
  dc:	91 05       	cpc	r25, r1
  de:	a8 f4       	brcc	.+42     	; 0x10a <green_in+0x38>
		OCR1A = OCR1A + 0xF;	//increase Duty Cycle by 10
  e0:	e8 e8       	ldi	r30, 0x88	; 136
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	91 81       	ldd	r25, Z+1	; 0x01
  e8:	0f 96       	adiw	r24, 0x0f	; 15
  ea:	91 83       	std	Z+1, r25	; 0x01
  ec:	80 83       	st	Z, r24
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	92 e0       	ldi	r25, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <green_in+0x22>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <green_in+0x2c>
  fe:	00 00       	nop
		OCR2A = OCR2A + 0xF;	//increase Duty Cycle by 10
	_delay_ms(50);}				//0.5 sec delay hold
}
void green_in()
{
	while(OCR1A < DUTYHIGH){	//when timer counter less than 90% DC
 100:	80 81       	ld	r24, Z
 102:	91 81       	ldd	r25, Z+1	; 0x01
 104:	86 3e       	cpi	r24, 0xE6	; 230
 106:	91 05       	cpc	r25, r1
 108:	68 f3       	brcs	.-38     	; 0xe4 <green_in+0x12>
 10a:	08 95       	ret

0000010c <red_out>:
		OCR1A = OCR1A + 0xF;	//increase Duty Cycle by 10
	_delay_ms(50);}				//0.5 sec delay hold
}
void red_out()
{
	while(OCR0A > DUTYLOW){	// when timer counter higher than 10% DC
 10c:	87 b5       	in	r24, 0x27	; 39
 10e:	8a 31       	cpi	r24, 0x1A	; 26
 110:	78 f0       	brcs	.+30     	; 0x130 <red_out+0x24>
		OCR0A = OCR0A - 0xF;	//decrease Duty Cycle by 10
 112:	87 b5       	in	r24, 0x27	; 39
 114:	8f 50       	subi	r24, 0x0F	; 15
 116:	87 bd       	out	0x27, r24	; 39
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	80 e7       	ldi	r24, 0x70	; 112
 11c:	92 e0       	ldi	r25, 0x02	; 2
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <red_out+0x12>
 126:	00 c0       	rjmp	.+0      	; 0x128 <red_out+0x1c>
 128:	00 00       	nop
		OCR1A = OCR1A + 0xF;	//increase Duty Cycle by 10
	_delay_ms(50);}				//0.5 sec delay hold
}
void red_out()
{
	while(OCR0A > DUTYLOW){	// when timer counter higher than 10% DC
 12a:	87 b5       	in	r24, 0x27	; 39
 12c:	8a 31       	cpi	r24, 0x1A	; 26
 12e:	88 f7       	brcc	.-30     	; 0x112 <red_out+0x6>
 130:	08 95       	ret

00000132 <blue_out>:
		OCR0A = OCR0A - 0xF;	//decrease Duty Cycle by 10
	_delay_ms(50);}				//0.5 sec delay hold
}
void blue_out()
{
	while(OCR2A > DUTYLOW){	// when timer counter higher than 10% DC
 132:	80 91 b3 00 	lds	r24, 0x00B3
 136:	8a 31       	cpi	r24, 0x1A	; 26
 138:	88 f0       	brcs	.+34     	; 0x15c <blue_out+0x2a>
		OCR2A = OCR2A - 0xF;	//decrease Duty Cycle by 10
 13a:	e3 eb       	ldi	r30, 0xB3	; 179
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8f 50       	subi	r24, 0x0F	; 15
 142:	80 83       	st	Z, r24
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	80 e7       	ldi	r24, 0x70	; 112
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <blue_out+0x18>
 152:	00 c0       	rjmp	.+0      	; 0x154 <blue_out+0x22>
 154:	00 00       	nop
		OCR0A = OCR0A - 0xF;	//decrease Duty Cycle by 10
	_delay_ms(50);}				//0.5 sec delay hold
}
void blue_out()
{
	while(OCR2A > DUTYLOW){	// when timer counter higher than 10% DC
 156:	80 81       	ld	r24, Z
 158:	8a 31       	cpi	r24, 0x1A	; 26
 15a:	88 f7       	brcc	.-30     	; 0x13e <blue_out+0xc>
 15c:	08 95       	ret

0000015e <green_out>:
		OCR2A = OCR2A - 0xF;	//decrease Duty Cycle by 10
	_delay_ms(50);}				//0.5 sec delay hold
}
void green_out()
{
	while(OCR1A > DUTYLOW){	// when timer counter higher than 10% DC
 15e:	80 91 88 00 	lds	r24, 0x0088
 162:	90 91 89 00 	lds	r25, 0x0089
 166:	4a 97       	sbiw	r24, 0x1a	; 26
 168:	a0 f0       	brcs	.+40     	; 0x192 <green_out+0x34>
		OCR1A = OCR1A - 0xF;	//decrease Duty Cycle by 10
 16a:	e8 e8       	ldi	r30, 0x88	; 136
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	91 81       	ldd	r25, Z+1	; 0x01
 172:	0f 97       	sbiw	r24, 0x0f	; 15
 174:	91 83       	std	Z+1, r25	; 0x01
 176:	80 83       	st	Z, r24
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	80 e7       	ldi	r24, 0x70	; 112
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <green_out+0x20>
 186:	00 c0       	rjmp	.+0      	; 0x188 <green_out+0x2a>
 188:	00 00       	nop
		OCR2A = OCR2A - 0xF;	//decrease Duty Cycle by 10
	_delay_ms(50);}				//0.5 sec delay hold
}
void green_out()
{
	while(OCR1A > DUTYLOW){	// when timer counter higher than 10% DC
 18a:	80 81       	ld	r24, Z
 18c:	91 81       	ldd	r25, Z+1	; 0x01
 18e:	4a 97       	sbiw	r24, 0x1a	; 26
 190:	70 f7       	brcc	.-36     	; 0x16e <green_out+0x10>
 192:	08 95       	ret

00000194 <main>:

int main(void)
{
	//PWM INITIALIZATION - 3 channels of PWM
	
	DDRD |= (1<<PD6); //Red - PD6 - OC0A (Output Compare A)
 194:	56 9a       	sbi	0x0a, 6	; 10
	DDRB |= (1<<PB1) | (1<<PB3); //Blue - PB1 - 0C1A (Output Compare B), Green - PB3 - OC2A (Output Compare C)
 196:	84 b1       	in	r24, 0x04	; 4
 198:	8a 60       	ori	r24, 0x0A	; 10
 19a:	84 b9       	out	0x04, r24	; 4
	
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);	//T0 Clear mode set, WGM01=1 and WGM00=1 => Fast PWM
 19c:	84 b5       	in	r24, 0x24	; 36
 19e:	83 68       	ori	r24, 0x83	; 131
 1a0:	84 bd       	out	0x24, r24	; 36
	TCCR1A |= (1<<COM1A1) | (1<<WGM10);				//T1 Clear mode set, WGM10=1 and 
 1a2:	e0 e8       	ldi	r30, 0x80	; 128
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	81 68       	ori	r24, 0x81	; 129
 1aa:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);							//WGM12=1 => Fast PWM(8bit)
 1ac:	e1 e8       	ldi	r30, 0x81	; 129
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2A1) | (1<<WGM21) | (1<<WGM20);	//T2 Clear mode set, WGM21=1 and WGM20=1 => Fast PWM
 1b6:	a0 eb       	ldi	r26, 0xB0	; 176
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	8c 91       	ld	r24, X
 1bc:	83 68       	ori	r24, 0x83	; 131
 1be:	8c 93       	st	X, r24
	TCCR0B |= (1<<CS00);	//T0 No Prescaling
 1c0:	85 b5       	in	r24, 0x25	; 37
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS10);	//T1 No Prescaling
 1c6:	80 81       	ld	r24, Z
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20);	//T2 No Prescaling
 1cc:	e1 eb       	ldi	r30, 0xB1	; 177
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	80 83       	st	Z, r24
	
	OCR0A = DUTYLOW;	//Red on 10% DC
 1d6:	89 e1       	ldi	r24, 0x19	; 25
 1d8:	87 bd       	out	0x27, r24	; 39
	OCR1A = DUTYLOW;	//Blue on 10% DC
 1da:	29 e1       	ldi	r18, 0x19	; 25
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	30 93 89 00 	sts	0x0089, r19
 1e2:	20 93 88 00 	sts	0x0088, r18
	OCR2A = DUTYLOW;	//Green on 10% DC
 1e6:	80 93 b3 00 	sts	0x00B3, r24
	
	while(1)
	{
		red_in();		//increment DC T0
 1ea:	0e 94 40 00 	call	0x80	; 0x80 <red_in>
		green_in();		//increment DC T2
 1ee:	0e 94 69 00 	call	0xd2	; 0xd2 <green_in>
		blue_in();		//increment DC T1
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <blue_in>
		red_out();		//decrement DC T0
 1f6:	0e 94 86 00 	call	0x10c	; 0x10c <red_out>
		blue_out();		//decrement DC T1
 1fa:	0e 94 99 00 	call	0x132	; 0x132 <blue_out>
		red_in();		//increment DC T0
 1fe:	0e 94 40 00 	call	0x80	; 0x80 <red_in>
		blue_in();		//increment DC T1
 202:	0e 94 53 00 	call	0xa6	; 0xa6 <blue_in>
		green_out();	//decrement DC T2
 206:	0e 94 af 00 	call	0x15e	; 0x15e <green_out>
		red_out();		//decrement DC T0
 20a:	0e 94 86 00 	call	0x10c	; 0x10c <red_out>
		blue_out();		//decrement DC T1
 20e:	0e 94 99 00 	call	0x132	; 0x132 <blue_out>
	}
 212:	eb cf       	rjmp	.-42     	; 0x1ea <main+0x56>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
