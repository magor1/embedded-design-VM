
DA2T5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015d  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fb  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000012a  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000197  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  00000793  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000087f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
	int binaryCounter = 0;		// set counter for LED bargraph starting at 0
	int risingCounter = 0;		// set counter for 5th/10th rising edge starting at 0
	DDRB = 0xFF;			// PB0-PB7 set to outputs
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x30;			// set PC4 an PC5 as outputs on PORTC
  84:	80 e3       	ldi	r24, 0x30	; 48
  86:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f e7       	ldi	r18, 0x7F	; 127
  8a:	58 e3       	ldi	r21, 0x38	; 56
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	50 40       	sbci	r21, 0x00	; 0
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x18>
  98:	00 00       	nop
#include <util/delay.h>

int main(void)
{
	int binaryCounter = 0;		// set counter for LED bargraph starting at 0
	int risingCounter = 0;		// set counter for 5th/10th rising edge starting at 0
  9a:	e0 e0       	ldi	r30, 0x00	; 0
  9c:	f0 e0       	ldi	r31, 0x00	; 0
	DDRB = 0xFF;			// PB0-PB7 set to outputs
	DDRC = 0x30;			// set PC4 an PC5 as outputs on PORTC
	while(1) 
	{
		_delay_ms(50);		// call delay function for 250ms delay (.25 seconds)
		binaryCounter++;			// increment counter after delay
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
		if(binaryCounter > 255)		// if counter went above 255 (9th bit)
		binaryCounter = 0;		// reset counter back to zero
		PORTB = binaryCounter;		// output counter to LED bargraph
		risingCounter++;			// increment counter for 5th/10th checks
		
		if(risingCounter%5 == 0) //PC4 toggles every 5 rising pulses
  a2:	05 e0       	ldi	r16, 0x05	; 5
  a4:	10 e0       	ldi	r17, 0x00	; 0
		PORTC ^= (1<<PC4);
  a6:	68 94       	set
  a8:	dd 24       	eor	r13, r13
  aa:	d4 f8       	bld	r13, 4
		
		if(risingCounter%10 == 0) //PC5 toggles every 10 rising pulses
  ac:	ca e0       	ldi	r28, 0x0A	; 10
  ae:	d0 e0       	ldi	r29, 0x00	; 0
		PORTC ^= (1<<PC5);
  b0:	68 94       	set
  b2:	ee 24       	eor	r14, r14
  b4:	e5 f8       	bld	r14, 5
	while(1) 
	{
		_delay_ms(50);		// call delay function for 250ms delay (.25 seconds)
		binaryCounter++;			// increment counter after delay
		if(binaryCounter > 255)		// if counter went above 255 (9th bit)
		binaryCounter = 0;		// reset counter back to zero
  b6:	f1 2c       	mov	r15, r1
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x40>
  bc:	2f 2d       	mov	r18, r15
  be:	34 2f       	mov	r19, r20
		PORTB = binaryCounter;		// output counter to LED bargraph
  c0:	25 b9       	out	0x05, r18	; 5
		risingCounter++;			// increment counter for 5th/10th checks
  c2:	31 96       	adiw	r30, 0x01	; 1
		
		if(risingCounter%5 == 0) //PC4 toggles every 5 rising pulses
  c4:	cf 01       	movw	r24, r30
  c6:	b8 01       	movw	r22, r16
  c8:	0e 94 8d 00 	call	0x11a	; 0x11a <__divmodhi4>
  cc:	89 2b       	or	r24, r25
  ce:	19 f4       	brne	.+6      	; 0xd6 <main+0x56>
		PORTC ^= (1<<PC4);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	8d 25       	eor	r24, r13
  d4:	88 b9       	out	0x08, r24	; 8
		
		if(risingCounter%10 == 0) //PC5 toggles every 10 rising pulses
  d6:	cf 01       	movw	r24, r30
  d8:	be 01       	movw	r22, r28
  da:	0e 94 8d 00 	call	0x11a	; 0x11a <__divmodhi4>
  de:	89 2b       	or	r24, r25
  e0:	19 f4       	brne	.+6      	; 0xe8 <main+0x68>
		PORTC ^= (1<<PC5);
  e2:	88 b1       	in	r24, 0x08	; 8
  e4:	8e 25       	eor	r24, r14
  e6:	88 b9       	out	0x08, r24	; 8
  e8:	9f e7       	ldi	r25, 0x7F	; 127
  ea:	58 e3       	ldi	r21, 0x38	; 56
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	91 50       	subi	r25, 0x01	; 1
  f0:	50 40       	sbci	r21, 0x00	; 0
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x6e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x78>
  f8:	00 00       	nop
  fa:	9f e7       	ldi	r25, 0x7F	; 127
  fc:	58 e3       	ldi	r21, 0x38	; 56
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	91 50       	subi	r25, 0x01	; 1
 102:	50 40       	sbci	r21, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
	DDRB = 0xFF;			// PB0-PB7 set to outputs
	DDRC = 0x30;			// set PC4 an PC5 as outputs on PORTC
	while(1) 
	{
		_delay_ms(50);		// call delay function for 250ms delay (.25 seconds)
		binaryCounter++;			// increment counter after delay
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
		if(binaryCounter > 255)		// if counter went above 255 (9th bit)
 110:	2f 3f       	cpi	r18, 0xFF	; 255
 112:	31 05       	cpc	r19, r1
 114:	09 f0       	breq	.+2      	; 0x118 <main+0x98>
 116:	94 f6       	brge	.-92     	; 0xbc <main+0x3c>
 118:	d3 cf       	rjmp	.-90     	; 0xc0 <main+0x40>

0000011a <__divmodhi4>:
 11a:	97 fb       	bst	r25, 7
 11c:	07 2e       	mov	r0, r23
 11e:	16 f4       	brtc	.+4      	; 0x124 <__divmodhi4+0xa>
 120:	00 94       	com	r0
 122:	07 d0       	rcall	.+14     	; 0x132 <__divmodhi4_neg1>
 124:	77 fd       	sbrc	r23, 7
 126:	09 d0       	rcall	.+18     	; 0x13a <__divmodhi4_neg2>
 128:	0e 94 a1 00 	call	0x142	; 0x142 <__udivmodhi4>
 12c:	07 fc       	sbrc	r0, 7
 12e:	05 d0       	rcall	.+10     	; 0x13a <__divmodhi4_neg2>
 130:	3e f4       	brtc	.+14     	; 0x140 <__divmodhi4_exit>

00000132 <__divmodhi4_neg1>:
 132:	90 95       	com	r25
 134:	81 95       	neg	r24
 136:	9f 4f       	sbci	r25, 0xFF	; 255
 138:	08 95       	ret

0000013a <__divmodhi4_neg2>:
 13a:	70 95       	com	r23
 13c:	61 95       	neg	r22
 13e:	7f 4f       	sbci	r23, 0xFF	; 255

00000140 <__divmodhi4_exit>:
 140:	08 95       	ret

00000142 <__udivmodhi4>:
 142:	aa 1b       	sub	r26, r26
 144:	bb 1b       	sub	r27, r27
 146:	51 e1       	ldi	r21, 0x11	; 17
 148:	07 c0       	rjmp	.+14     	; 0x158 <__udivmodhi4_ep>

0000014a <__udivmodhi4_loop>:
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	a6 17       	cp	r26, r22
 150:	b7 07       	cpc	r27, r23
 152:	10 f0       	brcs	.+4      	; 0x158 <__udivmodhi4_ep>
 154:	a6 1b       	sub	r26, r22
 156:	b7 0b       	sbc	r27, r23

00000158 <__udivmodhi4_ep>:
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	5a 95       	dec	r21
 15e:	a9 f7       	brne	.-22     	; 0x14a <__udivmodhi4_loop>
 160:	80 95       	com	r24
 162:	90 95       	com	r25
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
